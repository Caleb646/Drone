
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009014  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  081092b4  081092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081092e4  081092e4  0000a2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  081092e8  081092e8  0000a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  10000000  081092ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ee4  1000006c  08109358  0000b06c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000f50  08109358  0000bf50  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029c72  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004ff5  00000000  00000000  00034d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002240  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001a9b  00000000  00000000  0003bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00007de2  00000000  00000000  0003d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002bc9e  00000000  00000000  000457c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001c0a18  00000000  00000000  00071463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00231e7b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000098a8  00000000  00000000  00231ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000050  00000000  00000000  0023b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810929c 	.word	0x0810929c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	0810929c 	.word	0x0810929c

081002e0 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 81002e0:	b580      	push	{r7, lr}
 81002e2:	b084      	sub	sp, #16
 81002e4:	af00      	add	r7, sp, #0
 81002e6:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 81002e8:	f002 fb04 	bl	81028f4 <HAL_GetCurrentCPUID>
 81002ec:	4603      	mov	r3, r0
 81002ee:	2b03      	cmp	r3, #3
 81002f0:	d110      	bne.n	8100314 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 81002f2:	4b15      	ldr	r3, [pc, #84]	@ (8100348 <__io_putchar+0x68>)
 81002f4:	681b      	ldr	r3, [r3, #0]
 81002f6:	1d39      	adds	r1, r7, #4
 81002f8:	2201      	movs	r2, #1
 81002fa:	4618      	mov	r0, r3
 81002fc:	f000 f8fa 	bl	81004f4 <RingBuffWrite>
    if((char)ch == '\n')
 8100300:	687b      	ldr	r3, [r7, #4]
 8100302:	b2db      	uxtb	r3, r3
 8100304:	2b0a      	cmp	r3, #10
 8100306:	d119      	bne.n	810033c <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 8100308:	4b0f      	ldr	r3, [pc, #60]	@ (8100348 <__io_putchar+0x68>)
 810030a:	681b      	ldr	r3, [r3, #0]
 810030c:	4618      	mov	r0, r3
 810030e:	f000 f859 	bl	81003c4 <LoggerWriteToUART>
 8100312:	e013      	b.n	810033c <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 8100314:	4b0d      	ldr	r3, [pc, #52]	@ (810034c <__io_putchar+0x6c>)
 8100316:	681b      	ldr	r3, [r3, #0]
 8100318:	1d39      	adds	r1, r7, #4
 810031a:	2201      	movs	r2, #1
 810031c:	4618      	mov	r0, r3
 810031e:	f000 f8e9 	bl	81004f4 <RingBuffWrite>
    if((char)ch == '\n')
 8100322:	687b      	ldr	r3, [r7, #4]
 8100324:	b2db      	uxtb	r3, r3
 8100326:	2b0a      	cmp	r3, #10
 8100328:	d108      	bne.n	810033c <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 810032a:	2300      	movs	r3, #0
 810032c:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 810032e:	f107 030c 	add.w	r3, r7, #12
 8100332:	2204      	movs	r2, #4
 8100334:	4619      	mov	r1, r3
 8100336:	2000      	movs	r0, #0
 8100338:	f000 fadc 	bl	81008f4 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 810033c:	687b      	ldr	r3, [r7, #4]
}
 810033e:	4618      	mov	r0, r3
 8100340:	3710      	adds	r7, #16
 8100342:	46bd      	mov	sp, r7
 8100344:	bd80      	pop	{r7, pc}
 8100346:	bf00      	nop
 8100348:	1000008c 	.word	0x1000008c
 810034c:	10000088 	.word	0x10000088

08100350 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 8100350:	b580      	push	{r7, lr}
 8100352:	b082      	sub	sp, #8
 8100354:	af00      	add	r7, sp, #0
 8100356:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 8100358:	f002 facc 	bl	81028f4 <HAL_GetCurrentCPUID>
 810035c:	4603      	mov	r3, r0
 810035e:	2b03      	cmp	r3, #3
 8100360:	d102      	bne.n	8100368 <LoggerInit+0x18>
 8100362:	687b      	ldr	r3, [r7, #4]
 8100364:	2b00      	cmp	r3, #0
 8100366:	d105      	bne.n	8100374 <LoggerInit+0x24>
  {
    pUART = NULL;
 8100368:	4b10      	ldr	r3, [pc, #64]	@ (81003ac <LoggerInit+0x5c>)
 810036a:	2200      	movs	r2, #0
 810036c:	601a      	str	r2, [r3, #0]
    return -1;
 810036e:	f04f 33ff 	mov.w	r3, #4294967295
 8100372:	e017      	b.n	81003a4 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8100374:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100378:	480d      	ldr	r0, [pc, #52]	@ (81003b0 <LoggerInit+0x60>)
 810037a:	f000 f88b 	bl	8100494 <RingBuffCreate>
 810037e:	4603      	mov	r3, r0
 8100380:	4a0c      	ldr	r2, [pc, #48]	@ (81003b4 <LoggerInit+0x64>)
 8100382:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8100384:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100388:	480b      	ldr	r0, [pc, #44]	@ (81003b8 <LoggerInit+0x68>)
 810038a:	f000 f883 	bl	8100494 <RingBuffCreate>
 810038e:	4603      	mov	r3, r0
 8100390:	4a0a      	ldr	r2, [pc, #40]	@ (81003bc <LoggerInit+0x6c>)
 8100392:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8100394:	4a05      	ldr	r2, [pc, #20]	@ (81003ac <LoggerInit+0x5c>)
 8100396:	687b      	ldr	r3, [r7, #4]
 8100398:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 810039a:	2100      	movs	r1, #0
 810039c:	4808      	ldr	r0, [pc, #32]	@ (81003c0 <LoggerInit+0x70>)
 810039e:	f000 fb01 	bl	81009a4 <SyncRegisterHandler>

  return 0;
 81003a2:	2300      	movs	r3, #0
}
 81003a4:	4618      	mov	r0, r3
 81003a6:	3708      	adds	r7, #8
 81003a8:	46bd      	mov	sp, r7
 81003aa:	bd80      	pop	{r7, pc}
 81003ac:	10000090 	.word	0x10000090
 81003b0:	38000008 	.word	0x38000008
 81003b4:	10000088 	.word	0x10000088
 81003b8:	38000128 	.word	0x38000128
 81003bc:	1000008c 	.word	0x1000008c
 81003c0:	08100415 	.word	0x08100415

081003c4 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 81003c4:	b580      	push	{r7, lr}
 81003c6:	b084      	sub	sp, #16
 81003c8:	af00      	add	r7, sp, #0
 81003ca:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 81003cc:	2300      	movs	r3, #0
 81003ce:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 81003d0:	2300      	movs	r3, #0
 81003d2:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 81003d4:	6878      	ldr	r0, [r7, #4]
 81003d6:	f000 f9c9 	bl	810076c <RingBuffGetLinearBlockReadLength>
 81003da:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 81003dc:	68fb      	ldr	r3, [r7, #12]
 81003de:	2b00      	cmp	r3, #0
 81003e0:	d011      	beq.n	8100406 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 81003e2:	6878      	ldr	r0, [r7, #4]
 81003e4:	f000 f998 	bl	8100718 <RingBuffGetLinearBlockReadAddress>
 81003e8:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 81003ea:	4b09      	ldr	r3, [pc, #36]	@ (8100410 <LoggerWriteToUART+0x4c>)
 81003ec:	6818      	ldr	r0, [r3, #0]
 81003ee:	68fb      	ldr	r3, [r7, #12]
 81003f0:	b29a      	uxth	r2, r3
 81003f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81003f6:	68b9      	ldr	r1, [r7, #8]
 81003f8:	f007 fc06 	bl	8107c08 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 81003fc:	68f9      	ldr	r1, [r7, #12]
 81003fe:	6878      	ldr	r0, [r7, #4]
 8100400:	f000 f9f6 	bl	81007f0 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 8100404:	e7e6      	b.n	81003d4 <LoggerWriteToUART+0x10>
  }
  return 0;
 8100406:	2300      	movs	r3, #0
}
 8100408:	4618      	mov	r0, r3
 810040a:	3710      	adds	r7, #16
 810040c:	46bd      	mov	sp, r7
 810040e:	bd80      	pop	{r7, pc}
 8100410:	10000090 	.word	0x10000090

08100414 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 8100414:	b580      	push	{r7, lr}
 8100416:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8100418:	f002 fa6c 	bl	81028f4 <HAL_GetCurrentCPUID>
 810041c:	4603      	mov	r3, r0
 810041e:	2b03      	cmp	r3, #3
 8100420:	d104      	bne.n	810042c <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 8100422:	4b03      	ldr	r3, [pc, #12]	@ (8100430 <SyncUARTTaskHandler+0x1c>)
 8100424:	681b      	ldr	r3, [r3, #0]
 8100426:	4618      	mov	r0, r3
 8100428:	f7ff ffcc 	bl	81003c4 <LoggerWriteToUART>
  }
 810042c:	bf00      	nop
 810042e:	bd80      	pop	{r7, pc}
 8100430:	10000088 	.word	0x10000088

08100434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100434:	b480      	push	{r7}
 8100436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100438:	4b09      	ldr	r3, [pc, #36]	@ (8100460 <SystemInit+0x2c>)
 810043a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810043e:	4a08      	ldr	r2, [pc, #32]	@ (8100460 <SystemInit+0x2c>)
 8100440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100448:	4b05      	ldr	r3, [pc, #20]	@ (8100460 <SystemInit+0x2c>)
 810044a:	691b      	ldr	r3, [r3, #16]
 810044c:	4a04      	ldr	r2, [pc, #16]	@ (8100460 <SystemInit+0x2c>)
 810044e:	f043 0310 	orr.w	r3, r3, #16
 8100452:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100454:	bf00      	nop
 8100456:	46bd      	mov	sp, r7
 8100458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810045c:	4770      	bx	lr
 810045e:	bf00      	nop
 8100460:	e000ed00 	.word	0xe000ed00

08100464 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100464:	b480      	push	{r7}
 8100466:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100468:	4b09      	ldr	r3, [pc, #36]	@ (8100490 <ExitRun0Mode+0x2c>)
 810046a:	68db      	ldr	r3, [r3, #12]
 810046c:	4a08      	ldr	r2, [pc, #32]	@ (8100490 <ExitRun0Mode+0x2c>)
 810046e:	f023 0302 	bic.w	r3, r3, #2
 8100472:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100474:	bf00      	nop
 8100476:	4b06      	ldr	r3, [pc, #24]	@ (8100490 <ExitRun0Mode+0x2c>)
 8100478:	685b      	ldr	r3, [r3, #4]
 810047a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810047e:	2b00      	cmp	r3, #0
 8100480:	d0f9      	beq.n	8100476 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100482:	bf00      	nop
 8100484:	bf00      	nop
 8100486:	46bd      	mov	sp, r7
 8100488:	f85d 7b04 	ldr.w	r7, [sp], #4
 810048c:	4770      	bx	lr
 810048e:	bf00      	nop
 8100490:	58024800 	.word	0x58024800

08100494 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8100494:	b580      	push	{r7, lr}
 8100496:	b084      	sub	sp, #16
 8100498:	af00      	add	r7, sp, #0
 810049a:	6078      	str	r0, [r7, #4]
 810049c:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 810049e:	687b      	ldr	r3, [r7, #4]
 81004a0:	2b00      	cmp	r3, #0
 81004a2:	d005      	beq.n	81004b0 <RingBuffCreate+0x1c>
 81004a4:	683b      	ldr	r3, [r7, #0]
 81004a6:	2b00      	cmp	r3, #0
 81004a8:	d002      	beq.n	81004b0 <RingBuffCreate+0x1c>
 81004aa:	683b      	ldr	r3, [r7, #0]
 81004ac:	2b20      	cmp	r3, #32
 81004ae:	d801      	bhi.n	81004b4 <RingBuffCreate+0x20>
        return NULL;
 81004b0:	2300      	movs	r3, #0
 81004b2:	e017      	b.n	81004e4 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 81004b4:	687b      	ldr	r3, [r7, #4]
 81004b6:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 81004b8:	2220      	movs	r2, #32
 81004ba:	2100      	movs	r1, #0
 81004bc:	68f8      	ldr	r0, [r7, #12]
 81004be:	f008 fc2b 	bl	8108d18 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 81004c2:	683b      	ldr	r3, [r7, #0]
 81004c4:	f1a3 0220 	sub.w	r2, r3, #32
 81004c8:	68fb      	ldr	r3, [r7, #12]
 81004ca:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 81004cc:	687b      	ldr	r3, [r7, #4]
 81004ce:	f103 0220 	add.w	r2, r3, #32
 81004d2:	68fb      	ldr	r3, [r7, #12]
 81004d4:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 81004d6:	68fb      	ldr	r3, [r7, #12]
 81004d8:	4a04      	ldr	r2, [pc, #16]	@ (81004ec <RingBuffCreate+0x58>)
 81004da:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 81004dc:	68fb      	ldr	r3, [r7, #12]
 81004de:	4a04      	ldr	r2, [pc, #16]	@ (81004f0 <RingBuffCreate+0x5c>)
 81004e0:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 81004e2:	68fb      	ldr	r3, [r7, #12]
}
 81004e4:	4618      	mov	r0, r3
 81004e6:	3710      	adds	r7, #16
 81004e8:	46bd      	mov	sp, r7
 81004ea:	bd80      	pop	{r7, pc}
 81004ec:	deadbeef 	.word	0xdeadbeef
 81004f0:	21524110 	.word	0x21524110

081004f4 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 81004f4:	b580      	push	{r7, lr}
 81004f6:	b088      	sub	sp, #32
 81004f8:	af00      	add	r7, sp, #0
 81004fa:	60f8      	str	r0, [r7, #12]
 81004fc:	60b9      	str	r1, [r7, #8]
 81004fe:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8100500:	68bb      	ldr	r3, [r7, #8]
 8100502:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8100504:	68fb      	ldr	r3, [r7, #12]
 8100506:	2b00      	cmp	r3, #0
 8100508:	d017      	beq.n	810053a <RingBuffWrite+0x46>
 810050a:	68fb      	ldr	r3, [r7, #12]
 810050c:	681b      	ldr	r3, [r3, #0]
 810050e:	4a3b      	ldr	r2, [pc, #236]	@ (81005fc <RingBuffWrite+0x108>)
 8100510:	4293      	cmp	r3, r2
 8100512:	d112      	bne.n	810053a <RingBuffWrite+0x46>
 8100514:	68fb      	ldr	r3, [r7, #12]
 8100516:	699b      	ldr	r3, [r3, #24]
 8100518:	4a39      	ldr	r2, [pc, #228]	@ (8100600 <RingBuffWrite+0x10c>)
 810051a:	4293      	cmp	r3, r2
 810051c:	d10d      	bne.n	810053a <RingBuffWrite+0x46>
 810051e:	68fb      	ldr	r3, [r7, #12]
 8100520:	685b      	ldr	r3, [r3, #4]
 8100522:	2b00      	cmp	r3, #0
 8100524:	d009      	beq.n	810053a <RingBuffWrite+0x46>
 8100526:	68fb      	ldr	r3, [r7, #12]
 8100528:	689b      	ldr	r3, [r3, #8]
 810052a:	2b00      	cmp	r3, #0
 810052c:	d005      	beq.n	810053a <RingBuffWrite+0x46>
 810052e:	68bb      	ldr	r3, [r7, #8]
 8100530:	2b00      	cmp	r3, #0
 8100532:	d002      	beq.n	810053a <RingBuffWrite+0x46>
 8100534:	687b      	ldr	r3, [r7, #4]
 8100536:	2b00      	cmp	r3, #0
 8100538:	d101      	bne.n	810053e <RingBuffWrite+0x4a>
        return 0;
 810053a:	2300      	movs	r3, #0
 810053c:	e059      	b.n	81005f2 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 810053e:	68f8      	ldr	r0, [r7, #12]
 8100540:	f000 f860 	bl	8100604 <RingBuffGetFree>
 8100544:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8100546:	687a      	ldr	r2, [r7, #4]
 8100548:	69bb      	ldr	r3, [r7, #24]
 810054a:	4293      	cmp	r3, r2
 810054c:	bf28      	it	cs
 810054e:	4613      	movcs	r3, r2
 8100550:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8100552:	687b      	ldr	r3, [r7, #4]
 8100554:	2b00      	cmp	r3, #0
 8100556:	d101      	bne.n	810055c <RingBuffWrite+0x68>
        return 0;
 8100558:	2300      	movs	r3, #0
 810055a:	e04a      	b.n	81005f2 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 810055c:	68fb      	ldr	r3, [r7, #12]
 810055e:	689a      	ldr	r2, [r3, #8]
 8100560:	68fb      	ldr	r3, [r7, #12]
 8100562:	691b      	ldr	r3, [r3, #16]
 8100564:	1ad3      	subs	r3, r2, r3
 8100566:	687a      	ldr	r2, [r7, #4]
 8100568:	429a      	cmp	r2, r3
 810056a:	d905      	bls.n	8100578 <RingBuffWrite+0x84>
 810056c:	68fb      	ldr	r3, [r7, #12]
 810056e:	689a      	ldr	r2, [r3, #8]
 8100570:	68fb      	ldr	r3, [r7, #12]
 8100572:	691b      	ldr	r3, [r3, #16]
 8100574:	1ad3      	subs	r3, r2, r3
 8100576:	e000      	b.n	810057a <RingBuffWrite+0x86>
 8100578:	687b      	ldr	r3, [r7, #4]
 810057a:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 810057c:	68fb      	ldr	r3, [r7, #12]
 810057e:	685a      	ldr	r2, [r3, #4]
 8100580:	68fb      	ldr	r3, [r7, #12]
 8100582:	691b      	ldr	r3, [r3, #16]
 8100584:	4413      	add	r3, r2
 8100586:	697a      	ldr	r2, [r7, #20]
 8100588:	69f9      	ldr	r1, [r7, #28]
 810058a:	4618      	mov	r0, r3
 810058c:	f008 fc3f 	bl	8108e0e <memcpy>
    buff->w += tocopy;
 8100590:	68fb      	ldr	r3, [r7, #12]
 8100592:	691a      	ldr	r2, [r3, #16]
 8100594:	697b      	ldr	r3, [r7, #20]
 8100596:	441a      	add	r2, r3
 8100598:	68fb      	ldr	r3, [r7, #12]
 810059a:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 810059c:	687a      	ldr	r2, [r7, #4]
 810059e:	697b      	ldr	r3, [r7, #20]
 81005a0:	1ad3      	subs	r3, r2, r3
 81005a2:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 81005a4:	687b      	ldr	r3, [r7, #4]
 81005a6:	2b00      	cmp	r3, #0
 81005a8:	d00b      	beq.n	81005c2 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 81005aa:	68fb      	ldr	r3, [r7, #12]
 81005ac:	6858      	ldr	r0, [r3, #4]
 81005ae:	69fa      	ldr	r2, [r7, #28]
 81005b0:	697b      	ldr	r3, [r7, #20]
 81005b2:	4413      	add	r3, r2
 81005b4:	687a      	ldr	r2, [r7, #4]
 81005b6:	4619      	mov	r1, r3
 81005b8:	f008 fc29 	bl	8108e0e <memcpy>
        buff->w = btw;
 81005bc:	68fb      	ldr	r3, [r7, #12]
 81005be:	687a      	ldr	r2, [r7, #4]
 81005c0:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 81005c2:	68fb      	ldr	r3, [r7, #12]
 81005c4:	691a      	ldr	r2, [r3, #16]
 81005c6:	68fb      	ldr	r3, [r7, #12]
 81005c8:	689b      	ldr	r3, [r3, #8]
 81005ca:	429a      	cmp	r2, r3
 81005cc:	d302      	bcc.n	81005d4 <RingBuffWrite+0xe0>
        buff->w = 0;
 81005ce:	68fb      	ldr	r3, [r7, #12]
 81005d0:	2200      	movs	r2, #0
 81005d2:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 81005d4:	68fb      	ldr	r3, [r7, #12]
 81005d6:	695b      	ldr	r3, [r3, #20]
 81005d8:	2b00      	cmp	r3, #0
 81005da:	d007      	beq.n	81005ec <RingBuffWrite+0xf8>
 81005dc:	68fb      	ldr	r3, [r7, #12]
 81005de:	695b      	ldr	r3, [r3, #20]
 81005e0:	6979      	ldr	r1, [r7, #20]
 81005e2:	687a      	ldr	r2, [r7, #4]
 81005e4:	440a      	add	r2, r1
 81005e6:	2101      	movs	r1, #1
 81005e8:	68f8      	ldr	r0, [r7, #12]
 81005ea:	4798      	blx	r3
    return tocopy + btw;
 81005ec:	697a      	ldr	r2, [r7, #20]
 81005ee:	687b      	ldr	r3, [r7, #4]
 81005f0:	4413      	add	r3, r2
}
 81005f2:	4618      	mov	r0, r3
 81005f4:	3720      	adds	r7, #32
 81005f6:	46bd      	mov	sp, r7
 81005f8:	bd80      	pop	{r7, pc}
 81005fa:	bf00      	nop
 81005fc:	deadbeef 	.word	0xdeadbeef
 8100600:	21524110 	.word	0x21524110

08100604 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8100604:	b480      	push	{r7}
 8100606:	b087      	sub	sp, #28
 8100608:	af00      	add	r7, sp, #0
 810060a:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 810060c:	687b      	ldr	r3, [r7, #4]
 810060e:	2b00      	cmp	r3, #0
 8100610:	d011      	beq.n	8100636 <RingBuffGetFree+0x32>
 8100612:	687b      	ldr	r3, [r7, #4]
 8100614:	681b      	ldr	r3, [r3, #0]
 8100616:	4a1c      	ldr	r2, [pc, #112]	@ (8100688 <RingBuffGetFree+0x84>)
 8100618:	4293      	cmp	r3, r2
 810061a:	d10c      	bne.n	8100636 <RingBuffGetFree+0x32>
 810061c:	687b      	ldr	r3, [r7, #4]
 810061e:	699b      	ldr	r3, [r3, #24]
 8100620:	4a1a      	ldr	r2, [pc, #104]	@ (810068c <RingBuffGetFree+0x88>)
 8100622:	4293      	cmp	r3, r2
 8100624:	d107      	bne.n	8100636 <RingBuffGetFree+0x32>
 8100626:	687b      	ldr	r3, [r7, #4]
 8100628:	685b      	ldr	r3, [r3, #4]
 810062a:	2b00      	cmp	r3, #0
 810062c:	d003      	beq.n	8100636 <RingBuffGetFree+0x32>
 810062e:	687b      	ldr	r3, [r7, #4]
 8100630:	689b      	ldr	r3, [r3, #8]
 8100632:	2b00      	cmp	r3, #0
 8100634:	d101      	bne.n	810063a <RingBuffGetFree+0x36>
        return 0;
 8100636:	2300      	movs	r3, #0
 8100638:	e01f      	b.n	810067a <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810063a:	687b      	ldr	r3, [r7, #4]
 810063c:	691b      	ldr	r3, [r3, #16]
 810063e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100640:	687b      	ldr	r3, [r7, #4]
 8100642:	68db      	ldr	r3, [r3, #12]
 8100644:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8100646:	693a      	ldr	r2, [r7, #16]
 8100648:	68fb      	ldr	r3, [r7, #12]
 810064a:	429a      	cmp	r2, r3
 810064c:	d103      	bne.n	8100656 <RingBuffGetFree+0x52>
        size = buff->size;
 810064e:	687b      	ldr	r3, [r7, #4]
 8100650:	689b      	ldr	r3, [r3, #8]
 8100652:	617b      	str	r3, [r7, #20]
 8100654:	e00f      	b.n	8100676 <RingBuffGetFree+0x72>
    } else if (r > w) {
 8100656:	68fa      	ldr	r2, [r7, #12]
 8100658:	693b      	ldr	r3, [r7, #16]
 810065a:	429a      	cmp	r2, r3
 810065c:	d904      	bls.n	8100668 <RingBuffGetFree+0x64>
        size = r - w;
 810065e:	68fa      	ldr	r2, [r7, #12]
 8100660:	693b      	ldr	r3, [r7, #16]
 8100662:	1ad3      	subs	r3, r2, r3
 8100664:	617b      	str	r3, [r7, #20]
 8100666:	e006      	b.n	8100676 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8100668:	687b      	ldr	r3, [r7, #4]
 810066a:	689a      	ldr	r2, [r3, #8]
 810066c:	68f9      	ldr	r1, [r7, #12]
 810066e:	693b      	ldr	r3, [r7, #16]
 8100670:	1acb      	subs	r3, r1, r3
 8100672:	4413      	add	r3, r2
 8100674:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8100676:	697b      	ldr	r3, [r7, #20]
 8100678:	3b01      	subs	r3, #1
}
 810067a:	4618      	mov	r0, r3
 810067c:	371c      	adds	r7, #28
 810067e:	46bd      	mov	sp, r7
 8100680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100684:	4770      	bx	lr
 8100686:	bf00      	nop
 8100688:	deadbeef 	.word	0xdeadbeef
 810068c:	21524110 	.word	0x21524110

08100690 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8100690:	b480      	push	{r7}
 8100692:	b087      	sub	sp, #28
 8100694:	af00      	add	r7, sp, #0
 8100696:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8100698:	687b      	ldr	r3, [r7, #4]
 810069a:	2b00      	cmp	r3, #0
 810069c:	d011      	beq.n	81006c2 <RingBuffGetFull+0x32>
 810069e:	687b      	ldr	r3, [r7, #4]
 81006a0:	681b      	ldr	r3, [r3, #0]
 81006a2:	4a1b      	ldr	r2, [pc, #108]	@ (8100710 <RingBuffGetFull+0x80>)
 81006a4:	4293      	cmp	r3, r2
 81006a6:	d10c      	bne.n	81006c2 <RingBuffGetFull+0x32>
 81006a8:	687b      	ldr	r3, [r7, #4]
 81006aa:	699b      	ldr	r3, [r3, #24]
 81006ac:	4a19      	ldr	r2, [pc, #100]	@ (8100714 <RingBuffGetFull+0x84>)
 81006ae:	4293      	cmp	r3, r2
 81006b0:	d107      	bne.n	81006c2 <RingBuffGetFull+0x32>
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	685b      	ldr	r3, [r3, #4]
 81006b6:	2b00      	cmp	r3, #0
 81006b8:	d003      	beq.n	81006c2 <RingBuffGetFull+0x32>
 81006ba:	687b      	ldr	r3, [r7, #4]
 81006bc:	689b      	ldr	r3, [r3, #8]
 81006be:	2b00      	cmp	r3, #0
 81006c0:	d101      	bne.n	81006c6 <RingBuffGetFull+0x36>
        return 0;
 81006c2:	2300      	movs	r3, #0
 81006c4:	e01d      	b.n	8100702 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81006c6:	687b      	ldr	r3, [r7, #4]
 81006c8:	691b      	ldr	r3, [r3, #16]
 81006ca:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81006cc:	687b      	ldr	r3, [r7, #4]
 81006ce:	68db      	ldr	r3, [r3, #12]
 81006d0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81006d2:	693a      	ldr	r2, [r7, #16]
 81006d4:	68fb      	ldr	r3, [r7, #12]
 81006d6:	429a      	cmp	r2, r3
 81006d8:	d102      	bne.n	81006e0 <RingBuffGetFull+0x50>
        size = 0;
 81006da:	2300      	movs	r3, #0
 81006dc:	617b      	str	r3, [r7, #20]
 81006de:	e00f      	b.n	8100700 <RingBuffGetFull+0x70>
    } else if (w > r) {
 81006e0:	693a      	ldr	r2, [r7, #16]
 81006e2:	68fb      	ldr	r3, [r7, #12]
 81006e4:	429a      	cmp	r2, r3
 81006e6:	d904      	bls.n	81006f2 <RingBuffGetFull+0x62>
        size = w - r;
 81006e8:	693a      	ldr	r2, [r7, #16]
 81006ea:	68fb      	ldr	r3, [r7, #12]
 81006ec:	1ad3      	subs	r3, r2, r3
 81006ee:	617b      	str	r3, [r7, #20]
 81006f0:	e006      	b.n	8100700 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 81006f2:	687b      	ldr	r3, [r7, #4]
 81006f4:	689a      	ldr	r2, [r3, #8]
 81006f6:	6939      	ldr	r1, [r7, #16]
 81006f8:	68fb      	ldr	r3, [r7, #12]
 81006fa:	1acb      	subs	r3, r1, r3
 81006fc:	4413      	add	r3, r2
 81006fe:	617b      	str	r3, [r7, #20]
    }
    return size;
 8100700:	697b      	ldr	r3, [r7, #20]
}
 8100702:	4618      	mov	r0, r3
 8100704:	371c      	adds	r7, #28
 8100706:	46bd      	mov	sp, r7
 8100708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810070c:	4770      	bx	lr
 810070e:	bf00      	nop
 8100710:	deadbeef 	.word	0xdeadbeef
 8100714:	21524110 	.word	0x21524110

08100718 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8100718:	b480      	push	{r7}
 810071a:	b083      	sub	sp, #12
 810071c:	af00      	add	r7, sp, #0
 810071e:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8100720:	687b      	ldr	r3, [r7, #4]
 8100722:	2b00      	cmp	r3, #0
 8100724:	d011      	beq.n	810074a <RingBuffGetLinearBlockReadAddress+0x32>
 8100726:	687b      	ldr	r3, [r7, #4]
 8100728:	681b      	ldr	r3, [r3, #0]
 810072a:	4a0e      	ldr	r2, [pc, #56]	@ (8100764 <RingBuffGetLinearBlockReadAddress+0x4c>)
 810072c:	4293      	cmp	r3, r2
 810072e:	d10c      	bne.n	810074a <RingBuffGetLinearBlockReadAddress+0x32>
 8100730:	687b      	ldr	r3, [r7, #4]
 8100732:	699b      	ldr	r3, [r3, #24]
 8100734:	4a0c      	ldr	r2, [pc, #48]	@ (8100768 <RingBuffGetLinearBlockReadAddress+0x50>)
 8100736:	4293      	cmp	r3, r2
 8100738:	d107      	bne.n	810074a <RingBuffGetLinearBlockReadAddress+0x32>
 810073a:	687b      	ldr	r3, [r7, #4]
 810073c:	685b      	ldr	r3, [r3, #4]
 810073e:	2b00      	cmp	r3, #0
 8100740:	d003      	beq.n	810074a <RingBuffGetLinearBlockReadAddress+0x32>
 8100742:	687b      	ldr	r3, [r7, #4]
 8100744:	689b      	ldr	r3, [r3, #8]
 8100746:	2b00      	cmp	r3, #0
 8100748:	d101      	bne.n	810074e <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 810074a:	2300      	movs	r3, #0
 810074c:	e004      	b.n	8100758 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 810074e:	687b      	ldr	r3, [r7, #4]
 8100750:	685a      	ldr	r2, [r3, #4]
 8100752:	687b      	ldr	r3, [r7, #4]
 8100754:	68db      	ldr	r3, [r3, #12]
 8100756:	4413      	add	r3, r2
}
 8100758:	4618      	mov	r0, r3
 810075a:	370c      	adds	r7, #12
 810075c:	46bd      	mov	sp, r7
 810075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100762:	4770      	bx	lr
 8100764:	deadbeef 	.word	0xdeadbeef
 8100768:	21524110 	.word	0x21524110

0810076c <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 810076c:	b480      	push	{r7}
 810076e:	b087      	sub	sp, #28
 8100770:	af00      	add	r7, sp, #0
 8100772:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8100774:	687b      	ldr	r3, [r7, #4]
 8100776:	2b00      	cmp	r3, #0
 8100778:	d011      	beq.n	810079e <RingBuffGetLinearBlockReadLength+0x32>
 810077a:	687b      	ldr	r3, [r7, #4]
 810077c:	681b      	ldr	r3, [r3, #0]
 810077e:	4a1a      	ldr	r2, [pc, #104]	@ (81007e8 <RingBuffGetLinearBlockReadLength+0x7c>)
 8100780:	4293      	cmp	r3, r2
 8100782:	d10c      	bne.n	810079e <RingBuffGetLinearBlockReadLength+0x32>
 8100784:	687b      	ldr	r3, [r7, #4]
 8100786:	699b      	ldr	r3, [r3, #24]
 8100788:	4a18      	ldr	r2, [pc, #96]	@ (81007ec <RingBuffGetLinearBlockReadLength+0x80>)
 810078a:	4293      	cmp	r3, r2
 810078c:	d107      	bne.n	810079e <RingBuffGetLinearBlockReadLength+0x32>
 810078e:	687b      	ldr	r3, [r7, #4]
 8100790:	685b      	ldr	r3, [r3, #4]
 8100792:	2b00      	cmp	r3, #0
 8100794:	d003      	beq.n	810079e <RingBuffGetLinearBlockReadLength+0x32>
 8100796:	687b      	ldr	r3, [r7, #4]
 8100798:	689b      	ldr	r3, [r3, #8]
 810079a:	2b00      	cmp	r3, #0
 810079c:	d101      	bne.n	81007a2 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 810079e:	2300      	movs	r3, #0
 81007a0:	e01b      	b.n	81007da <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81007a2:	687b      	ldr	r3, [r7, #4]
 81007a4:	691b      	ldr	r3, [r3, #16]
 81007a6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81007a8:	687b      	ldr	r3, [r7, #4]
 81007aa:	68db      	ldr	r3, [r3, #12]
 81007ac:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 81007ae:	693a      	ldr	r2, [r7, #16]
 81007b0:	68fb      	ldr	r3, [r7, #12]
 81007b2:	429a      	cmp	r2, r3
 81007b4:	d904      	bls.n	81007c0 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 81007b6:	693a      	ldr	r2, [r7, #16]
 81007b8:	68fb      	ldr	r3, [r7, #12]
 81007ba:	1ad3      	subs	r3, r2, r3
 81007bc:	617b      	str	r3, [r7, #20]
 81007be:	e00b      	b.n	81007d8 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 81007c0:	68fa      	ldr	r2, [r7, #12]
 81007c2:	693b      	ldr	r3, [r7, #16]
 81007c4:	429a      	cmp	r2, r3
 81007c6:	d905      	bls.n	81007d4 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 81007c8:	687b      	ldr	r3, [r7, #4]
 81007ca:	689a      	ldr	r2, [r3, #8]
 81007cc:	68fb      	ldr	r3, [r7, #12]
 81007ce:	1ad3      	subs	r3, r2, r3
 81007d0:	617b      	str	r3, [r7, #20]
 81007d2:	e001      	b.n	81007d8 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 81007d4:	2300      	movs	r3, #0
 81007d6:	617b      	str	r3, [r7, #20]
    }
    return len;
 81007d8:	697b      	ldr	r3, [r7, #20]
}
 81007da:	4618      	mov	r0, r3
 81007dc:	371c      	adds	r7, #28
 81007de:	46bd      	mov	sp, r7
 81007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007e4:	4770      	bx	lr
 81007e6:	bf00      	nop
 81007e8:	deadbeef 	.word	0xdeadbeef
 81007ec:	21524110 	.word	0x21524110

081007f0 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 81007f0:	b580      	push	{r7, lr}
 81007f2:	b084      	sub	sp, #16
 81007f4:	af00      	add	r7, sp, #0
 81007f6:	6078      	str	r0, [r7, #4]
 81007f8:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 81007fa:	687b      	ldr	r3, [r7, #4]
 81007fc:	2b00      	cmp	r3, #0
 81007fe:	d014      	beq.n	810082a <RingBuffSkip+0x3a>
 8100800:	687b      	ldr	r3, [r7, #4]
 8100802:	681b      	ldr	r3, [r3, #0]
 8100804:	4a20      	ldr	r2, [pc, #128]	@ (8100888 <RingBuffSkip+0x98>)
 8100806:	4293      	cmp	r3, r2
 8100808:	d10f      	bne.n	810082a <RingBuffSkip+0x3a>
 810080a:	687b      	ldr	r3, [r7, #4]
 810080c:	699b      	ldr	r3, [r3, #24]
 810080e:	4a1f      	ldr	r2, [pc, #124]	@ (810088c <RingBuffSkip+0x9c>)
 8100810:	4293      	cmp	r3, r2
 8100812:	d10a      	bne.n	810082a <RingBuffSkip+0x3a>
 8100814:	687b      	ldr	r3, [r7, #4]
 8100816:	685b      	ldr	r3, [r3, #4]
 8100818:	2b00      	cmp	r3, #0
 810081a:	d006      	beq.n	810082a <RingBuffSkip+0x3a>
 810081c:	687b      	ldr	r3, [r7, #4]
 810081e:	689b      	ldr	r3, [r3, #8]
 8100820:	2b00      	cmp	r3, #0
 8100822:	d002      	beq.n	810082a <RingBuffSkip+0x3a>
 8100824:	683b      	ldr	r3, [r7, #0]
 8100826:	2b00      	cmp	r3, #0
 8100828:	d101      	bne.n	810082e <RingBuffSkip+0x3e>
        return 0;
 810082a:	2300      	movs	r3, #0
 810082c:	e027      	b.n	810087e <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 810082e:	6878      	ldr	r0, [r7, #4]
 8100830:	f7ff ff2e 	bl	8100690 <RingBuffGetFull>
 8100834:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8100836:	683a      	ldr	r2, [r7, #0]
 8100838:	68fb      	ldr	r3, [r7, #12]
 810083a:	4293      	cmp	r3, r2
 810083c:	bf28      	it	cs
 810083e:	4613      	movcs	r3, r2
 8100840:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	68da      	ldr	r2, [r3, #12]
 8100846:	683b      	ldr	r3, [r7, #0]
 8100848:	441a      	add	r2, r3
 810084a:	687b      	ldr	r3, [r7, #4]
 810084c:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 810084e:	687b      	ldr	r3, [r7, #4]
 8100850:	68da      	ldr	r2, [r3, #12]
 8100852:	687b      	ldr	r3, [r7, #4]
 8100854:	689b      	ldr	r3, [r3, #8]
 8100856:	429a      	cmp	r2, r3
 8100858:	d306      	bcc.n	8100868 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 810085a:	687b      	ldr	r3, [r7, #4]
 810085c:	689b      	ldr	r3, [r3, #8]
 810085e:	687a      	ldr	r2, [r7, #4]
 8100860:	68d2      	ldr	r2, [r2, #12]
 8100862:	1ad2      	subs	r2, r2, r3
 8100864:	687b      	ldr	r3, [r7, #4]
 8100866:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8100868:	687b      	ldr	r3, [r7, #4]
 810086a:	695b      	ldr	r3, [r3, #20]
 810086c:	2b00      	cmp	r3, #0
 810086e:	d005      	beq.n	810087c <RingBuffSkip+0x8c>
 8100870:	687b      	ldr	r3, [r7, #4]
 8100872:	695b      	ldr	r3, [r3, #20]
 8100874:	683a      	ldr	r2, [r7, #0]
 8100876:	2100      	movs	r1, #0
 8100878:	6878      	ldr	r0, [r7, #4]
 810087a:	4798      	blx	r3
    return len;
 810087c:	683b      	ldr	r3, [r7, #0]
}
 810087e:	4618      	mov	r0, r3
 8100880:	3710      	adds	r7, #16
 8100882:	46bd      	mov	sp, r7
 8100884:	bd80      	pop	{r7, pc}
 8100886:	bf00      	nop
 8100888:	deadbeef 	.word	0xdeadbeef
 810088c:	21524110 	.word	0x21524110

08100890 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8100890:	b480      	push	{r7}
 8100892:	b085      	sub	sp, #20
 8100894:	af00      	add	r7, sp, #0
 8100896:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8100898:	2300      	movs	r3, #0
 810089a:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 810089c:	687b      	ldr	r3, [r7, #4]
 810089e:	2b01      	cmp	r3, #1
 81008a0:	d103      	bne.n	81008aa <SyncMailBoxGet+0x1a>
 81008a2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81008a6:	60fb      	str	r3, [r7, #12]
 81008a8:	e001      	b.n	81008ae <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 81008aa:	4b04      	ldr	r3, [pc, #16]	@ (81008bc <SyncMailBoxGet+0x2c>)
 81008ac:	60fb      	str	r3, [r7, #12]
    return pMB;
 81008ae:	68fb      	ldr	r3, [r7, #12]
}
 81008b0:	4618      	mov	r0, r3
 81008b2:	3714      	adds	r7, #20
 81008b4:	46bd      	mov	sp, r7
 81008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ba:	4770      	bx	lr
 81008bc:	38000004 	.word	0x38000004

081008c0 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 81008c0:	b580      	push	{r7, lr}
 81008c2:	b086      	sub	sp, #24
 81008c4:	af00      	add	r7, sp, #0
 81008c6:	60f8      	str	r0, [r7, #12]
 81008c8:	60b9      	str	r1, [r7, #8]
 81008ca:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 81008cc:	687b      	ldr	r3, [r7, #4]
 81008ce:	2b04      	cmp	r3, #4
 81008d0:	d902      	bls.n	81008d8 <SyncMailBoxWrite+0x18>
 81008d2:	f04f 33ff 	mov.w	r3, #4294967295
 81008d6:	e009      	b.n	81008ec <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 81008d8:	68f8      	ldr	r0, [r7, #12]
 81008da:	f7ff ffd9 	bl	8100890 <SyncMailBoxGet>
 81008de:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 81008e0:	687a      	ldr	r2, [r7, #4]
 81008e2:	68b9      	ldr	r1, [r7, #8]
 81008e4:	6978      	ldr	r0, [r7, #20]
 81008e6:	f008 fa92 	bl	8108e0e <memcpy>
    return 0;
 81008ea:	2300      	movs	r3, #0
}
 81008ec:	4618      	mov	r0, r3
 81008ee:	3718      	adds	r7, #24
 81008f0:	46bd      	mov	sp, r7
 81008f2:	bd80      	pop	{r7, pc}

081008f4 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 81008f4:	b580      	push	{r7, lr}
 81008f6:	b086      	sub	sp, #24
 81008f8:	af00      	add	r7, sp, #0
 81008fa:	60f8      	str	r0, [r7, #12]
 81008fc:	60b9      	str	r1, [r7, #8]
 81008fe:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 8100900:	687a      	ldr	r2, [r7, #4]
 8100902:	68b9      	ldr	r1, [r7, #8]
 8100904:	68f8      	ldr	r0, [r7, #12]
 8100906:	f7ff ffdb 	bl	81008c0 <SyncMailBoxWrite>
 810090a:	4603      	mov	r3, r0
 810090c:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 810090e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8100912:	2b00      	cmp	r3, #0
 8100914:	da02      	bge.n	810091c <SyncMailBoxWriteNotify+0x28>
 8100916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 810091a:	e003      	b.n	8100924 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 810091c:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 8100920:	bf40      	sev
    return 0;
 8100922:	2300      	movs	r3, #0
}
 8100924:	4618      	mov	r0, r3
 8100926:	3718      	adds	r7, #24
 8100928:	46bd      	mov	sp, r7
 810092a:	bd80      	pop	{r7, pc}

0810092c <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 810092c:	b580      	push	{r7, lr}
 810092e:	b086      	sub	sp, #24
 8100930:	af00      	add	r7, sp, #0
 8100932:	60f8      	str	r0, [r7, #12]
 8100934:	60b9      	str	r1, [r7, #8]
 8100936:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8100938:	687b      	ldr	r3, [r7, #4]
 810093a:	2b04      	cmp	r3, #4
 810093c:	d902      	bls.n	8100944 <SyncMailBoxRead+0x18>
 810093e:	f04f 33ff 	mov.w	r3, #4294967295
 8100942:	e009      	b.n	8100958 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8100944:	68f8      	ldr	r0, [r7, #12]
 8100946:	f7ff ffa3 	bl	8100890 <SyncMailBoxGet>
 810094a:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 810094c:	687a      	ldr	r2, [r7, #4]
 810094e:	6979      	ldr	r1, [r7, #20]
 8100950:	68b8      	ldr	r0, [r7, #8]
 8100952:	f008 fa5c 	bl	8108e0e <memcpy>
    return 0;
 8100956:	2300      	movs	r3, #0
}
 8100958:	4618      	mov	r0, r3
 810095a:	3718      	adds	r7, #24
 810095c:	46bd      	mov	sp, r7
 810095e:	bd80      	pop	{r7, pc}

08100960 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8100960:	b480      	push	{r7}
 8100962:	b083      	sub	sp, #12
 8100964:	af00      	add	r7, sp, #0
 8100966:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8100968:	687b      	ldr	r3, [r7, #4]
 810096a:	2b02      	cmp	r3, #2
 810096c:	d901      	bls.n	8100972 <SyncGetTaskHandler+0x12>
 810096e:	2300      	movs	r3, #0
 8100970:	e003      	b.n	810097a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8100972:	4a05      	ldr	r2, [pc, #20]	@ (8100988 <SyncGetTaskHandler+0x28>)
 8100974:	687b      	ldr	r3, [r7, #4]
 8100976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 810097a:	4618      	mov	r0, r3
 810097c:	370c      	adds	r7, #12
 810097e:	46bd      	mov	sp, r7
 8100980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100984:	4770      	bx	lr
 8100986:	bf00      	nop
 8100988:	10000094 	.word	0x10000094

0810098c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 810098c:	b580      	push	{r7, lr}
 810098e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8100990:	2208      	movs	r2, #8
 8100992:	2100      	movs	r1, #0
 8100994:	4802      	ldr	r0, [pc, #8]	@ (81009a0 <SyncInit+0x14>)
 8100996:	f008 f9bf 	bl	8108d18 <memset>
    return 0;
 810099a:	2300      	movs	r3, #0
}
 810099c:	4618      	mov	r0, r3
 810099e:	bd80      	pop	{r7, pc}
 81009a0:	10000094 	.word	0x10000094

081009a4 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 81009a4:	b480      	push	{r7}
 81009a6:	b083      	sub	sp, #12
 81009a8:	af00      	add	r7, sp, #0
 81009aa:	6078      	str	r0, [r7, #4]
 81009ac:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 81009ae:	683b      	ldr	r3, [r7, #0]
 81009b0:	2b02      	cmp	r3, #2
 81009b2:	d902      	bls.n	81009ba <SyncRegisterHandler+0x16>
 81009b4:	f04f 33ff 	mov.w	r3, #4294967295
 81009b8:	e005      	b.n	81009c6 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 81009ba:	4906      	ldr	r1, [pc, #24]	@ (81009d4 <SyncRegisterHandler+0x30>)
 81009bc:	683b      	ldr	r3, [r7, #0]
 81009be:	687a      	ldr	r2, [r7, #4]
 81009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 81009c4:	2300      	movs	r3, #0
}
 81009c6:	4618      	mov	r0, r3
 81009c8:	370c      	adds	r7, #12
 81009ca:	46bd      	mov	sp, r7
 81009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d0:	4770      	bx	lr
 81009d2:	bf00      	nop
 81009d4:	10000094 	.word	0x10000094

081009d8 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 81009d8:	b580      	push	{r7, lr}
 81009da:	b082      	sub	sp, #8
 81009dc:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 81009de:	2300      	movs	r3, #0
 81009e0:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 81009e2:	463b      	mov	r3, r7
 81009e4:	2204      	movs	r2, #4
 81009e6:	4619      	mov	r1, r3
 81009e8:	2000      	movs	r0, #0
 81009ea:	f7ff ff9f 	bl	810092c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 81009ee:	683b      	ldr	r3, [r7, #0]
 81009f0:	4618      	mov	r0, r3
 81009f2:	f7ff ffb5 	bl	8100960 <SyncGetTaskHandler>
 81009f6:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 81009f8:	687b      	ldr	r3, [r7, #4]
 81009fa:	2b00      	cmp	r3, #0
 81009fc:	d001      	beq.n	8100a02 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 81009fe:	687b      	ldr	r3, [r7, #4]
 8100a00:	4798      	blx	r3
    }
}
 8100a02:	bf00      	nop
 8100a04:	3708      	adds	r7, #8
 8100a06:	46bd      	mov	sp, r7
 8100a08:	bd80      	pop	{r7, pc}

08100a0a <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8100a0a:	b580      	push	{r7, lr}
 8100a0c:	b082      	sub	sp, #8
 8100a0e:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8100a10:	2300      	movs	r3, #0
 8100a12:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100a14:	463b      	mov	r3, r7
 8100a16:	2204      	movs	r2, #4
 8100a18:	4619      	mov	r1, r3
 8100a1a:	2001      	movs	r0, #1
 8100a1c:	f7ff ff86 	bl	810092c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100a20:	683b      	ldr	r3, [r7, #0]
 8100a22:	4618      	mov	r0, r3
 8100a24:	f7ff ff9c 	bl	8100960 <SyncGetTaskHandler>
 8100a28:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100a2a:	687b      	ldr	r3, [r7, #4]
 8100a2c:	2b00      	cmp	r3, #0
 8100a2e:	d001      	beq.n	8100a34 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8100a30:	687b      	ldr	r3, [r7, #4]
 8100a32:	4798      	blx	r3
    }
 8100a34:	bf00      	nop
 8100a36:	3708      	adds	r7, #8
 8100a38:	46bd      	mov	sp, r7
 8100a3a:	bd80      	pop	{r7, pc}

08100a3c <HAL_GPIO_EXTI_Callback>:
}

// SPI_HandleTypeDef *const pIMUSPIRef = &hspi2;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 8100a3c:	b480      	push	{r7}
 8100a3e:	b083      	sub	sp, #12
 8100a40:	af00      	add	r7, sp, #0
 8100a42:	4603      	mov	r3, r0
 8100a44:	80fb      	strh	r3, [r7, #6]
	if(gpioPin == IMU_INT_Pin) {

	}
}
 8100a46:	bf00      	nop
 8100a48:	370c      	adds	r7, #12
 8100a4a:	46bd      	mov	sp, r7
 8100a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a50:	4770      	bx	lr
	...

08100a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100a54:	b580      	push	{r7, lr}
 8100a56:	b082      	sub	sp, #8
 8100a58:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8100b0c <main+0xb8>)
 8100a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a60:	4a2a      	ldr	r2, [pc, #168]	@ (8100b0c <main+0xb8>)
 8100a62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a6a:	4b28      	ldr	r3, [pc, #160]	@ (8100b0c <main+0xb8>)
 8100a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100a74:	607b      	str	r3, [r7, #4]
 8100a76:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a78:	2001      	movs	r0, #1
 8100a7a:	f002 f917 	bl	8102cac <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100a7e:	f002 fad1 	bl	8103024 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100a82:	2201      	movs	r2, #1
 8100a84:	2102      	movs	r1, #2
 8100a86:	2000      	movs	r0, #0
 8100a88:	f002 fa52 	bl	8102f30 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a8c:	4b20      	ldr	r3, [pc, #128]	@ (8100b10 <main+0xbc>)
 8100a8e:	681b      	ldr	r3, [r3, #0]
 8100a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100a94:	2b70      	cmp	r3, #112	@ 0x70
 8100a96:	d108      	bne.n	8100aaa <main+0x56>
 8100a98:	4b1e      	ldr	r3, [pc, #120]	@ (8100b14 <main+0xc0>)
 8100a9a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8100b14 <main+0xc0>)
 8100aa0:	f043 0301 	orr.w	r3, r3, #1
 8100aa4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100aa8:	e007      	b.n	8100aba <main+0x66>
 8100aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8100b14 <main+0xc0>)
 8100aac:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100ab0:	4a18      	ldr	r2, [pc, #96]	@ (8100b14 <main+0xc0>)
 8100ab2:	f043 0301 	orr.w	r3, r3, #1
 8100ab6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100aba:	f001 fc19 	bl	81022f0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100abe:	f000 fb43 	bl	8101148 <MX_GPIO_Init>
  MX_HDMI_CEC_Init();
 8100ac2:	f000 f82b 	bl	8100b1c <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100ac6:	f000 f85d 	bl	8100b84 <MX_RTC_Init>
  MX_SAI1_Init();
 8100aca:	f000 f8a9 	bl	8100c20 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100ace:	f000 f949 	bl	8100d64 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 8100ad2:	f000 f97f 	bl	8100dd4 <MX_SPI2_Init>
  MX_SPI5_Init();
 8100ad6:	f000 f9d3 	bl	8100e80 <MX_SPI5_Init>
  MX_TIM8_Init();
 8100ada:	f000 fa25 	bl	8100f28 <MX_TIM8_Init>
  MX_TIM13_Init();
 8100ade:	f000 fab3 	bl	8101048 <MX_TIM13_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100ae2:	f000 faff 	bl	81010e4 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LoggerInit(NULL);
 8100ae6:	2000      	movs	r0, #0
 8100ae8:	f7ff fc32 	bl	8100350 <LoggerInit>
  SyncInit();
 8100aec:	f7ff ff4e 	bl	810098c <SyncInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  HAL_Delay(500);
 8100af0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100af4:	f001 fc7a 	bl	81023ec <HAL_Delay>

	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(500);
 8100af8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100afc:	f001 fc76 	bl	81023ec <HAL_Delay>

	  printf("Hello from CM4 \r\n");
 8100b00:	4805      	ldr	r0, [pc, #20]	@ (8100b18 <main+0xc4>)
 8100b02:	f008 f829 	bl	8108b58 <puts>
	  HAL_Delay(500);
 8100b06:	bf00      	nop
 8100b08:	e7f2      	b.n	8100af0 <main+0x9c>
 8100b0a:	bf00      	nop
 8100b0c:	58024400 	.word	0x58024400
 8100b10:	e000ed00 	.word	0xe000ed00
 8100b14:	58026400 	.word	0x58026400
 8100b18:	081092c0 	.word	0x081092c0

08100b1c <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100b1c:	b580      	push	{r7, lr}
 8100b1e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100b20:	4b15      	ldr	r3, [pc, #84]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b22:	4a16      	ldr	r2, [pc, #88]	@ (8100b7c <MX_HDMI_CEC_Init+0x60>)
 8100b24:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100b26:	4b14      	ldr	r3, [pc, #80]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b28:	2200      	movs	r2, #0
 8100b2a:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100b2c:	4b12      	ldr	r3, [pc, #72]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b2e:	2200      	movs	r2, #0
 8100b30:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100b32:	4b11      	ldr	r3, [pc, #68]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b34:	2210      	movs	r2, #16
 8100b36:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100b38:	4b0f      	ldr	r3, [pc, #60]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b3a:	2200      	movs	r2, #0
 8100b3c:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b40:	2200      	movs	r2, #0
 8100b42:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100b44:	4b0c      	ldr	r3, [pc, #48]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b46:	2200      	movs	r2, #0
 8100b48:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b4c:	2200      	movs	r2, #0
 8100b4e:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100b50:	4b09      	ldr	r3, [pc, #36]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100b56:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100b58:	4b07      	ldr	r3, [pc, #28]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b5a:	2200      	movs	r2, #0
 8100b5c:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100b5e:	4b06      	ldr	r3, [pc, #24]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b60:	4a07      	ldr	r2, [pc, #28]	@ (8100b80 <MX_HDMI_CEC_Init+0x64>)
 8100b62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100b64:	4804      	ldr	r0, [pc, #16]	@ (8100b78 <MX_HDMI_CEC_Init+0x5c>)
 8100b66:	f001 fc87 	bl	8102478 <HAL_CEC_Init>
 8100b6a:	4603      	mov	r3, r0
 8100b6c:	2b00      	cmp	r3, #0
 8100b6e:	d001      	beq.n	8100b74 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100b70:	f000 fd46 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100b74:	bf00      	nop
 8100b76:	bd80      	pop	{r7, pc}
 8100b78:	1000009c 	.word	0x1000009c
 8100b7c:	40006c00 	.word	0x40006c00
 8100b80:	10000910 	.word	0x10000910

08100b84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100b84:	b580      	push	{r7, lr}
 8100b86:	b08a      	sub	sp, #40	@ 0x28
 8100b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100b8a:	463b      	mov	r3, r7
 8100b8c:	2228      	movs	r2, #40	@ 0x28
 8100b8e:	2100      	movs	r1, #0
 8100b90:	4618      	mov	r0, r3
 8100b92:	f008 f8c1 	bl	8108d18 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100b96:	4b20      	ldr	r3, [pc, #128]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100b98:	4a20      	ldr	r2, [pc, #128]	@ (8100c1c <MX_RTC_Init+0x98>)
 8100b9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100b9e:	2200      	movs	r2, #0
 8100ba0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100ba4:	227f      	movs	r2, #127	@ 0x7f
 8100ba6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100baa:	22ff      	movs	r2, #255	@ 0xff
 8100bac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100bae:	4b1a      	ldr	r3, [pc, #104]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100bb0:	2200      	movs	r2, #0
 8100bb2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100bb4:	4b18      	ldr	r3, [pc, #96]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100bb6:	2200      	movs	r2, #0
 8100bb8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100bba:	4b17      	ldr	r3, [pc, #92]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100bbc:	2200      	movs	r2, #0
 8100bbe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100bc0:	4b15      	ldr	r3, [pc, #84]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100bc2:	2200      	movs	r2, #0
 8100bc4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100bc6:	4814      	ldr	r0, [pc, #80]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100bc8:	f005 f98c 	bl	8105ee4 <HAL_RTC_Init>
 8100bcc:	4603      	mov	r3, r0
 8100bce:	2b00      	cmp	r3, #0
 8100bd0:	d001      	beq.n	8100bd6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100bd2:	f000 fd15 	bl	8101600 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100bd6:	2301      	movs	r3, #1
 8100bd8:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100bda:	2301      	movs	r3, #1
 8100bdc:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100bde:	2300      	movs	r3, #0
 8100be0:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100be2:	2300      	movs	r3, #0
 8100be4:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100be6:	2300      	movs	r3, #0
 8100be8:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100bea:	2300      	movs	r3, #0
 8100bec:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100bee:	2300      	movs	r3, #0
 8100bf0:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100bf2:	2300      	movs	r3, #0
 8100bf4:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100bf6:	2380      	movs	r3, #128	@ 0x80
 8100bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100bfa:	463b      	mov	r3, r7
 8100bfc:	4619      	mov	r1, r3
 8100bfe:	4806      	ldr	r0, [pc, #24]	@ (8100c18 <MX_RTC_Init+0x94>)
 8100c00:	f005 fa88 	bl	8106114 <HAL_RTCEx_SetTamper>
 8100c04:	4603      	mov	r3, r0
 8100c06:	2b00      	cmp	r3, #0
 8100c08:	d001      	beq.n	8100c0e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100c0a:	f000 fcf9 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100c0e:	bf00      	nop
 8100c10:	3728      	adds	r7, #40	@ 0x28
 8100c12:	46bd      	mov	sp, r7
 8100c14:	bd80      	pop	{r7, pc}
 8100c16:	bf00      	nop
 8100c18:	100000e0 	.word	0x100000e0
 8100c1c:	58004000 	.word	0x58004000

08100c20 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100c20:	b580      	push	{r7, lr}
 8100c22:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100c24:	4b4a      	ldr	r3, [pc, #296]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c26:	4a4b      	ldr	r2, [pc, #300]	@ (8100d54 <MX_SAI1_Init+0x134>)
 8100c28:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100c2a:	4b49      	ldr	r3, [pc, #292]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c2c:	2200      	movs	r2, #0
 8100c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100c30:	4b47      	ldr	r3, [pc, #284]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c32:	2200      	movs	r2, #0
 8100c34:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100c36:	4b46      	ldr	r3, [pc, #280]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c38:	2240      	movs	r2, #64	@ 0x40
 8100c3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100c3c:	4b44      	ldr	r3, [pc, #272]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c3e:	2200      	movs	r2, #0
 8100c40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100c42:	4b43      	ldr	r3, [pc, #268]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c44:	2200      	movs	r2, #0
 8100c46:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100c48:	4b41      	ldr	r3, [pc, #260]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c4a:	2200      	movs	r2, #0
 8100c4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100c4e:	4b40      	ldr	r3, [pc, #256]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c50:	2200      	movs	r2, #0
 8100c52:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c54:	4b3e      	ldr	r3, [pc, #248]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c56:	2200      	movs	r2, #0
 8100c58:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c5c:	2200      	movs	r2, #0
 8100c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100c60:	4b3b      	ldr	r3, [pc, #236]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c62:	2200      	movs	r2, #0
 8100c64:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100c66:	4b3a      	ldr	r3, [pc, #232]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c68:	4a3b      	ldr	r2, [pc, #236]	@ (8100d58 <MX_SAI1_Init+0x138>)
 8100c6a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c6c:	4b38      	ldr	r3, [pc, #224]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c6e:	2200      	movs	r2, #0
 8100c70:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c72:	4b37      	ldr	r3, [pc, #220]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c74:	2200      	movs	r2, #0
 8100c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c78:	4b35      	ldr	r3, [pc, #212]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c7a:	2200      	movs	r2, #0
 8100c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100c7e:	4b34      	ldr	r3, [pc, #208]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c80:	2200      	movs	r2, #0
 8100c82:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100c84:	4b32      	ldr	r3, [pc, #200]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c86:	2200      	movs	r2, #0
 8100c88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100c8c:	4b30      	ldr	r3, [pc, #192]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c8e:	2201      	movs	r2, #1
 8100c90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c92:	4b2f      	ldr	r3, [pc, #188]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100c9c:	2208      	movs	r2, #8
 8100c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100ca2:	2201      	movs	r2, #1
 8100ca4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100ca8:	2200      	movs	r2, #0
 8100caa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100cac:	4b28      	ldr	r3, [pc, #160]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100cae:	2200      	movs	r2, #0
 8100cb0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100cb2:	4b27      	ldr	r3, [pc, #156]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100cb4:	2200      	movs	r2, #0
 8100cb6:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100cb8:	4b25      	ldr	r3, [pc, #148]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100cba:	2200      	movs	r2, #0
 8100cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100cbe:	4b24      	ldr	r3, [pc, #144]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100cc0:	2200      	movs	r2, #0
 8100cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100cc4:	4b22      	ldr	r3, [pc, #136]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100cc6:	2201      	movs	r2, #1
 8100cc8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100cca:	4b21      	ldr	r3, [pc, #132]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100ccc:	2200      	movs	r2, #0
 8100cce:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100cd0:	481f      	ldr	r0, [pc, #124]	@ (8100d50 <MX_SAI1_Init+0x130>)
 8100cd2:	f005 faff 	bl	81062d4 <HAL_SAI_Init>
 8100cd6:	4603      	mov	r3, r0
 8100cd8:	2b00      	cmp	r3, #0
 8100cda:	d001      	beq.n	8100ce0 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100cdc:	f000 fc90 	bl	8101600 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8100d60 <MX_SAI1_Init+0x140>)
 8100ce4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100ce8:	2204      	movs	r2, #4
 8100cea:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100cec:	4b1b      	ldr	r3, [pc, #108]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100cee:	2200      	movs	r2, #0
 8100cf0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100cf4:	2200      	movs	r2, #0
 8100cf6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100cf8:	4b18      	ldr	r3, [pc, #96]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100cfa:	2200      	movs	r2, #0
 8100cfc:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100cfe:	4b17      	ldr	r3, [pc, #92]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d00:	2200      	movs	r2, #0
 8100d02:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100d04:	4b15      	ldr	r3, [pc, #84]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d06:	2200      	movs	r2, #0
 8100d08:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100d0a:	4b14      	ldr	r3, [pc, #80]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d0c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100d10:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100d12:	4b12      	ldr	r3, [pc, #72]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d14:	2200      	movs	r2, #0
 8100d16:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100d18:	4b10      	ldr	r3, [pc, #64]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d1a:	2200      	movs	r2, #0
 8100d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d20:	2200      	movs	r2, #0
 8100d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100d24:	4b0d      	ldr	r3, [pc, #52]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d26:	2200      	movs	r2, #0
 8100d28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d2e:	2201      	movs	r2, #1
 8100d30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100d32:	4b0a      	ldr	r3, [pc, #40]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d38:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100d3a:	4808      	ldr	r0, [pc, #32]	@ (8100d5c <MX_SAI1_Init+0x13c>)
 8100d3c:	f005 faca 	bl	81062d4 <HAL_SAI_Init>
 8100d40:	4603      	mov	r3, r0
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d001      	beq.n	8100d4a <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100d46:	f000 fc5b 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100d4a:	bf00      	nop
 8100d4c:	bd80      	pop	{r7, pc}
 8100d4e:	bf00      	nop
 8100d50:	10000104 	.word	0x10000104
 8100d54:	40015804 	.word	0x40015804
 8100d58:	0002ee00 	.word	0x0002ee00
 8100d5c:	1000019c 	.word	0x1000019c
 8100d60:	40015824 	.word	0x40015824

08100d64 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100d64:	b580      	push	{r7, lr}
 8100d66:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100d68:	4b19      	ldr	r3, [pc, #100]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d6a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100d6e:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100d70:	4b17      	ldr	r3, [pc, #92]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d72:	2200      	movs	r2, #0
 8100d74:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100d76:	4b16      	ldr	r3, [pc, #88]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d78:	2200      	movs	r2, #0
 8100d7a:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100d7c:	4b14      	ldr	r3, [pc, #80]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d7e:	2200      	movs	r2, #0
 8100d80:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100d82:	4b13      	ldr	r3, [pc, #76]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d84:	2200      	movs	r2, #0
 8100d86:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100d88:	4b11      	ldr	r3, [pc, #68]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d8a:	2200      	movs	r2, #0
 8100d8c:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100d8e:	4b10      	ldr	r3, [pc, #64]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d90:	2200      	movs	r2, #0
 8100d92:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100d94:	4b0e      	ldr	r3, [pc, #56]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d96:	2200      	movs	r2, #0
 8100d98:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100da0:	4b0b      	ldr	r3, [pc, #44]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100da2:	2200      	movs	r2, #0
 8100da4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100da6:	4b0a      	ldr	r3, [pc, #40]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100da8:	2200      	movs	r2, #0
 8100daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100dac:	4b08      	ldr	r3, [pc, #32]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100dae:	2200      	movs	r2, #0
 8100db0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100db4:	4b06      	ldr	r3, [pc, #24]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100db6:	2200      	movs	r2, #0
 8100db8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100dbc:	4804      	ldr	r0, [pc, #16]	@ (8100dd0 <MX_SPDIFRX1_Init+0x6c>)
 8100dbe:	f005 fd6d 	bl	810689c <HAL_SPDIFRX_Init>
 8100dc2:	4603      	mov	r3, r0
 8100dc4:	2b00      	cmp	r3, #0
 8100dc6:	d001      	beq.n	8100dcc <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100dc8:	f000 fc1a 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100dcc:	bf00      	nop
 8100dce:	bd80      	pop	{r7, pc}
 8100dd0:	10000234 	.word	0x10000234

08100dd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100dd4:	b580      	push	{r7, lr}
 8100dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100dd8:	4b27      	ldr	r3, [pc, #156]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100dda:	4a28      	ldr	r2, [pc, #160]	@ (8100e7c <MX_SPI2_Init+0xa8>)
 8100ddc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100dde:	4b26      	ldr	r3, [pc, #152]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100de0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100de4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100de6:	4b24      	ldr	r3, [pc, #144]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100de8:	2200      	movs	r2, #0
 8100dea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8100dec:	4b22      	ldr	r3, [pc, #136]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100dee:	2207      	movs	r2, #7
 8100df0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100df2:	4b21      	ldr	r3, [pc, #132]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100df4:	2200      	movs	r2, #0
 8100df6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100df8:	4b1f      	ldr	r3, [pc, #124]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100dfa:	2200      	movs	r2, #0
 8100dfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8100dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100e04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8100e06:	4b1c      	ldr	r3, [pc, #112]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e08:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100e0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e10:	2200      	movs	r2, #0
 8100e12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e14:	4b18      	ldr	r3, [pc, #96]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e16:	2200      	movs	r2, #0
 8100e18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e1a:	4b17      	ldr	r3, [pc, #92]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100e20:	4b15      	ldr	r3, [pc, #84]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e22:	2200      	movs	r2, #0
 8100e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e26:	4b14      	ldr	r3, [pc, #80]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100e2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e2e:	4b12      	ldr	r3, [pc, #72]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e30:	2200      	movs	r2, #0
 8100e32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e34:	4b10      	ldr	r3, [pc, #64]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e36:	2200      	movs	r2, #0
 8100e38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e3c:	2200      	movs	r2, #0
 8100e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e40:	4b0d      	ldr	r3, [pc, #52]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e42:	2200      	movs	r2, #0
 8100e44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e46:	4b0c      	ldr	r3, [pc, #48]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e48:	2200      	movs	r2, #0
 8100e4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e4e:	2200      	movs	r2, #0
 8100e50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100e52:	4b09      	ldr	r3, [pc, #36]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e54:	2200      	movs	r2, #0
 8100e56:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e58:	4b07      	ldr	r3, [pc, #28]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e5a:	2200      	movs	r2, #0
 8100e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e5e:	4b06      	ldr	r3, [pc, #24]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e60:	2200      	movs	r2, #0
 8100e62:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100e64:	4804      	ldr	r0, [pc, #16]	@ (8100e78 <MX_SPI2_Init+0xa4>)
 8100e66:	f005 fd87 	bl	8106978 <HAL_SPI_Init>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	2b00      	cmp	r3, #0
 8100e6e:	d001      	beq.n	8100e74 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8100e70:	f000 fbc6 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100e74:	bf00      	nop
 8100e76:	bd80      	pop	{r7, pc}
 8100e78:	10000284 	.word	0x10000284
 8100e7c:	40003800 	.word	0x40003800

08100e80 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100e80:	b580      	push	{r7, lr}
 8100e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100e84:	4b26      	ldr	r3, [pc, #152]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100e86:	4a27      	ldr	r2, [pc, #156]	@ (8100f24 <MX_SPI5_Init+0xa4>)
 8100e88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100e8a:	4b25      	ldr	r3, [pc, #148]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100e8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100e90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100e92:	4b23      	ldr	r3, [pc, #140]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100e94:	2200      	movs	r2, #0
 8100e96:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e98:	4b21      	ldr	r3, [pc, #132]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100e9a:	2203      	movs	r2, #3
 8100e9c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e9e:	4b20      	ldr	r3, [pc, #128]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ea0:	2200      	movs	r2, #0
 8100ea2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ea6:	2200      	movs	r2, #0
 8100ea8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100eac:	2200      	movs	r2, #0
 8100eae:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100eb2:	2200      	movs	r2, #0
 8100eb4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100eb8:	2200      	movs	r2, #0
 8100eba:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100ebc:	4b18      	ldr	r3, [pc, #96]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ebe:	2200      	movs	r2, #0
 8100ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100ec2:	4b17      	ldr	r3, [pc, #92]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ec4:	2200      	movs	r2, #0
 8100ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100ec8:	4b15      	ldr	r3, [pc, #84]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100ece:	4b14      	ldr	r3, [pc, #80]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ed0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100ed4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100ed6:	4b12      	ldr	r3, [pc, #72]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ed8:	2200      	movs	r2, #0
 8100eda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100edc:	4b10      	ldr	r3, [pc, #64]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ee4:	2200      	movs	r2, #0
 8100ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100eea:	2200      	movs	r2, #0
 8100eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100eee:	4b0c      	ldr	r3, [pc, #48]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ef0:	2200      	movs	r2, #0
 8100ef2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100ef6:	2200      	movs	r2, #0
 8100ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100efa:	4b09      	ldr	r3, [pc, #36]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100efc:	2200      	movs	r2, #0
 8100efe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100f00:	4b07      	ldr	r3, [pc, #28]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100f02:	2200      	movs	r2, #0
 8100f04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f06:	4b06      	ldr	r3, [pc, #24]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100f08:	2200      	movs	r2, #0
 8100f0a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100f0c:	4804      	ldr	r0, [pc, #16]	@ (8100f20 <MX_SPI5_Init+0xa0>)
 8100f0e:	f005 fd33 	bl	8106978 <HAL_SPI_Init>
 8100f12:	4603      	mov	r3, r0
 8100f14:	2b00      	cmp	r3, #0
 8100f16:	d001      	beq.n	8100f1c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100f18:	f000 fb72 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100f1c:	bf00      	nop
 8100f1e:	bd80      	pop	{r7, pc}
 8100f20:	1000030c 	.word	0x1000030c
 8100f24:	40015000 	.word	0x40015000

08100f28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100f28:	b580      	push	{r7, lr}
 8100f2a:	b096      	sub	sp, #88	@ 0x58
 8100f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100f2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100f32:	2200      	movs	r2, #0
 8100f34:	601a      	str	r2, [r3, #0]
 8100f36:	605a      	str	r2, [r3, #4]
 8100f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100f3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100f3e:	2200      	movs	r2, #0
 8100f40:	601a      	str	r2, [r3, #0]
 8100f42:	605a      	str	r2, [r3, #4]
 8100f44:	609a      	str	r2, [r3, #8]
 8100f46:	60da      	str	r2, [r3, #12]
 8100f48:	611a      	str	r2, [r3, #16]
 8100f4a:	615a      	str	r2, [r3, #20]
 8100f4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100f4e:	1d3b      	adds	r3, r7, #4
 8100f50:	222c      	movs	r2, #44	@ 0x2c
 8100f52:	2100      	movs	r1, #0
 8100f54:	4618      	mov	r0, r3
 8100f56:	f007 fedf 	bl	8108d18 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100f5a:	4b39      	ldr	r3, [pc, #228]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f5c:	4a39      	ldr	r2, [pc, #228]	@ (8101044 <MX_TIM8_Init+0x11c>)
 8100f5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100f60:	4b37      	ldr	r3, [pc, #220]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f66:	4b36      	ldr	r3, [pc, #216]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f68:	2200      	movs	r2, #0
 8100f6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100f6c:	4b34      	ldr	r3, [pc, #208]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100f72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100f74:	4b32      	ldr	r3, [pc, #200]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f76:	2200      	movs	r2, #0
 8100f78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100f7a:	4b31      	ldr	r3, [pc, #196]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f7c:	2200      	movs	r2, #0
 8100f7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100f80:	4b2f      	ldr	r3, [pc, #188]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f82:	2200      	movs	r2, #0
 8100f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8100f86:	482e      	ldr	r0, [pc, #184]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100f88:	f005 ff04 	bl	8106d94 <HAL_TIM_PWM_Init>
 8100f8c:	4603      	mov	r3, r0
 8100f8e:	2b00      	cmp	r3, #0
 8100f90:	d001      	beq.n	8100f96 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100f92:	f000 fb35 	bl	8101600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100f96:	2300      	movs	r3, #0
 8100f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100f9a:	2300      	movs	r3, #0
 8100f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100f9e:	2300      	movs	r3, #0
 8100fa0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100fa2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100fa6:	4619      	mov	r1, r3
 8100fa8:	4825      	ldr	r0, [pc, #148]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100faa:	f006 fd03 	bl	81079b4 <HAL_TIMEx_MasterConfigSynchronization>
 8100fae:	4603      	mov	r3, r0
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	d001      	beq.n	8100fb8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100fb4:	f000 fb24 	bl	8101600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100fb8:	2360      	movs	r3, #96	@ 0x60
 8100fba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8100fbc:	2300      	movs	r3, #0
 8100fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100fc0:	2300      	movs	r3, #0
 8100fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100fc4:	2300      	movs	r3, #0
 8100fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100fc8:	2300      	movs	r3, #0
 8100fca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100fcc:	2300      	movs	r3, #0
 8100fce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100fd0:	2300      	movs	r3, #0
 8100fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100fd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100fd8:	2200      	movs	r2, #0
 8100fda:	4619      	mov	r1, r3
 8100fdc:	4818      	ldr	r0, [pc, #96]	@ (8101040 <MX_TIM8_Init+0x118>)
 8100fde:	f006 f837 	bl	8107050 <HAL_TIM_PWM_ConfigChannel>
 8100fe2:	4603      	mov	r3, r0
 8100fe4:	2b00      	cmp	r3, #0
 8100fe6:	d001      	beq.n	8100fec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100fe8:	f000 fb0a 	bl	8101600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100fec:	2300      	movs	r3, #0
 8100fee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100ff0:	2300      	movs	r3, #0
 8100ff2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100ff4:	2300      	movs	r3, #0
 8100ff6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100ff8:	2300      	movs	r3, #0
 8100ffa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100ffc:	2300      	movs	r3, #0
 8100ffe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101000:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8101004:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101006:	2300      	movs	r3, #0
 8101008:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810100a:	2300      	movs	r3, #0
 810100c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810100e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101012:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101014:	2300      	movs	r3, #0
 8101016:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101018:	2300      	movs	r3, #0
 810101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 810101c:	1d3b      	adds	r3, r7, #4
 810101e:	4619      	mov	r1, r3
 8101020:	4807      	ldr	r0, [pc, #28]	@ (8101040 <MX_TIM8_Init+0x118>)
 8101022:	f006 fd55 	bl	8107ad0 <HAL_TIMEx_ConfigBreakDeadTime>
 8101026:	4603      	mov	r3, r0
 8101028:	2b00      	cmp	r3, #0
 810102a:	d001      	beq.n	8101030 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 810102c:	f000 fae8 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8101030:	4803      	ldr	r0, [pc, #12]	@ (8101040 <MX_TIM8_Init+0x118>)
 8101032:	f000 fd8f 	bl	8101b54 <HAL_TIM_MspPostInit>

}
 8101036:	bf00      	nop
 8101038:	3758      	adds	r7, #88	@ 0x58
 810103a:	46bd      	mov	sp, r7
 810103c:	bd80      	pop	{r7, pc}
 810103e:	bf00      	nop
 8101040:	10000394 	.word	0x10000394
 8101044:	40010400 	.word	0x40010400

08101048 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8101048:	b580      	push	{r7, lr}
 810104a:	b088      	sub	sp, #32
 810104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 810104e:	1d3b      	adds	r3, r7, #4
 8101050:	2200      	movs	r2, #0
 8101052:	601a      	str	r2, [r3, #0]
 8101054:	605a      	str	r2, [r3, #4]
 8101056:	609a      	str	r2, [r3, #8]
 8101058:	60da      	str	r2, [r3, #12]
 810105a:	611a      	str	r2, [r3, #16]
 810105c:	615a      	str	r2, [r3, #20]
 810105e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8101060:	4b1e      	ldr	r3, [pc, #120]	@ (81010dc <MX_TIM13_Init+0x94>)
 8101062:	4a1f      	ldr	r2, [pc, #124]	@ (81010e0 <MX_TIM13_Init+0x98>)
 8101064:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8101066:	4b1d      	ldr	r3, [pc, #116]	@ (81010dc <MX_TIM13_Init+0x94>)
 8101068:	2200      	movs	r2, #0
 810106a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 810106c:	4b1b      	ldr	r3, [pc, #108]	@ (81010dc <MX_TIM13_Init+0x94>)
 810106e:	2200      	movs	r2, #0
 8101070:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8101072:	4b1a      	ldr	r3, [pc, #104]	@ (81010dc <MX_TIM13_Init+0x94>)
 8101074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8101078:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810107a:	4b18      	ldr	r3, [pc, #96]	@ (81010dc <MX_TIM13_Init+0x94>)
 810107c:	2200      	movs	r2, #0
 810107e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101080:	4b16      	ldr	r3, [pc, #88]	@ (81010dc <MX_TIM13_Init+0x94>)
 8101082:	2200      	movs	r2, #0
 8101084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8101086:	4815      	ldr	r0, [pc, #84]	@ (81010dc <MX_TIM13_Init+0x94>)
 8101088:	f005 fdb5 	bl	8106bf6 <HAL_TIM_Base_Init>
 810108c:	4603      	mov	r3, r0
 810108e:	2b00      	cmp	r3, #0
 8101090:	d001      	beq.n	8101096 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8101092:	f000 fab5 	bl	8101600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8101096:	4811      	ldr	r0, [pc, #68]	@ (81010dc <MX_TIM13_Init+0x94>)
 8101098:	f005 fe7c 	bl	8106d94 <HAL_TIM_PWM_Init>
 810109c:	4603      	mov	r3, r0
 810109e:	2b00      	cmp	r3, #0
 81010a0:	d001      	beq.n	81010a6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 81010a2:	f000 faad 	bl	8101600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81010a6:	2360      	movs	r3, #96	@ 0x60
 81010a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 81010aa:	2300      	movs	r3, #0
 81010ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81010ae:	2300      	movs	r3, #0
 81010b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81010b2:	2300      	movs	r3, #0
 81010b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81010b6:	1d3b      	adds	r3, r7, #4
 81010b8:	2200      	movs	r2, #0
 81010ba:	4619      	mov	r1, r3
 81010bc:	4807      	ldr	r0, [pc, #28]	@ (81010dc <MX_TIM13_Init+0x94>)
 81010be:	f005 ffc7 	bl	8107050 <HAL_TIM_PWM_ConfigChannel>
 81010c2:	4603      	mov	r3, r0
 81010c4:	2b00      	cmp	r3, #0
 81010c6:	d001      	beq.n	81010cc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 81010c8:	f000 fa9a 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 81010cc:	4803      	ldr	r0, [pc, #12]	@ (81010dc <MX_TIM13_Init+0x94>)
 81010ce:	f000 fd41 	bl	8101b54 <HAL_TIM_MspPostInit>

}
 81010d2:	bf00      	nop
 81010d4:	3720      	adds	r7, #32
 81010d6:	46bd      	mov	sp, r7
 81010d8:	bd80      	pop	{r7, pc}
 81010da:	bf00      	nop
 81010dc:	100003e0 	.word	0x100003e0
 81010e0:	40001c00 	.word	0x40001c00

081010e4 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 81010e4:	b580      	push	{r7, lr}
 81010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 81010e8:	4b15      	ldr	r3, [pc, #84]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010ea:	4a16      	ldr	r2, [pc, #88]	@ (8101144 <MX_USB_OTG_HS_PCD_Init+0x60>)
 81010ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 81010ee:	4b14      	ldr	r3, [pc, #80]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010f0:	2209      	movs	r2, #9
 81010f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 81010f4:	4b12      	ldr	r3, [pc, #72]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010f6:	2200      	movs	r2, #0
 81010f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 81010fa:	4b11      	ldr	r3, [pc, #68]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010fc:	2200      	movs	r2, #0
 81010fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101100:	4b0f      	ldr	r3, [pc, #60]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101102:	2201      	movs	r2, #1
 8101104:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101106:	4b0e      	ldr	r3, [pc, #56]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101108:	2200      	movs	r2, #0
 810110a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 810110c:	4b0c      	ldr	r3, [pc, #48]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810110e:	2200      	movs	r2, #0
 8101110:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8101112:	4b0b      	ldr	r3, [pc, #44]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101114:	2200      	movs	r2, #0
 8101116:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101118:	4b09      	ldr	r3, [pc, #36]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810111a:	2200      	movs	r2, #0
 810111c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810111e:	4b08      	ldr	r3, [pc, #32]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101120:	2200      	movs	r2, #0
 8101122:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101124:	4b06      	ldr	r3, [pc, #24]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101126:	2200      	movs	r2, #0
 8101128:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 810112a:	4805      	ldr	r0, [pc, #20]	@ (8101140 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810112c:	f001 fdd0 	bl	8102cd0 <HAL_PCD_Init>
 8101130:	4603      	mov	r3, r0
 8101132:	2b00      	cmp	r3, #0
 8101134:	d001      	beq.n	810113a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8101136:	f000 fa63 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 810113a:	bf00      	nop
 810113c:	bd80      	pop	{r7, pc}
 810113e:	bf00      	nop
 8101140:	1000042c 	.word	0x1000042c
 8101144:	40040000 	.word	0x40040000

08101148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b090      	sub	sp, #64	@ 0x40
 810114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810114e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101152:	2200      	movs	r2, #0
 8101154:	601a      	str	r2, [r3, #0]
 8101156:	605a      	str	r2, [r3, #4]
 8101158:	609a      	str	r2, [r3, #8]
 810115a:	60da      	str	r2, [r3, #12]
 810115c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810115e:	4bbc      	ldr	r3, [pc, #752]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101164:	4aba      	ldr	r2, [pc, #744]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810116a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810116e:	4bb8      	ldr	r3, [pc, #736]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101178:	62bb      	str	r3, [r7, #40]	@ 0x28
 810117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810117c:	4bb4      	ldr	r3, [pc, #720]	@ (8101450 <MX_GPIO_Init+0x308>)
 810117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101182:	4ab3      	ldr	r2, [pc, #716]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101184:	f043 0302 	orr.w	r3, r3, #2
 8101188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810118c:	4bb0      	ldr	r3, [pc, #704]	@ (8101450 <MX_GPIO_Init+0x308>)
 810118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101192:	f003 0302 	and.w	r3, r3, #2
 8101196:	627b      	str	r3, [r7, #36]	@ 0x24
 8101198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810119a:	4bad      	ldr	r3, [pc, #692]	@ (8101450 <MX_GPIO_Init+0x308>)
 810119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011a0:	4aab      	ldr	r2, [pc, #684]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011aa:	4ba9      	ldr	r3, [pc, #676]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81011b4:	623b      	str	r3, [r7, #32]
 81011b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81011b8:	4ba5      	ldr	r3, [pc, #660]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011be:	4aa4      	ldr	r2, [pc, #656]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011c0:	f043 0304 	orr.w	r3, r3, #4
 81011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011c8:	4ba1      	ldr	r3, [pc, #644]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ce:	f003 0304 	and.w	r3, r3, #4
 81011d2:	61fb      	str	r3, [r7, #28]
 81011d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81011d6:	4b9e      	ldr	r3, [pc, #632]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011dc:	4a9c      	ldr	r2, [pc, #624]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011de:	f043 0310 	orr.w	r3, r3, #16
 81011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011e6:	4b9a      	ldr	r3, [pc, #616]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ec:	f003 0310 	and.w	r3, r3, #16
 81011f0:	61bb      	str	r3, [r7, #24]
 81011f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81011f4:	4b96      	ldr	r3, [pc, #600]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011fa:	4a95      	ldr	r2, [pc, #596]	@ (8101450 <MX_GPIO_Init+0x308>)
 81011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101204:	4b92      	ldr	r3, [pc, #584]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810120a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810120e:	617b      	str	r3, [r7, #20]
 8101210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101212:	4b8f      	ldr	r3, [pc, #572]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101218:	4a8d      	ldr	r2, [pc, #564]	@ (8101450 <MX_GPIO_Init+0x308>)
 810121a:	f043 0308 	orr.w	r3, r3, #8
 810121e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101222:	4b8b      	ldr	r3, [pc, #556]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101228:	f003 0308 	and.w	r3, r3, #8
 810122c:	613b      	str	r3, [r7, #16]
 810122e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101230:	4b87      	ldr	r3, [pc, #540]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101236:	4a86      	ldr	r2, [pc, #536]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101238:	f043 0301 	orr.w	r3, r3, #1
 810123c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101240:	4b83      	ldr	r3, [pc, #524]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101246:	f003 0301 	and.w	r3, r3, #1
 810124a:	60fb      	str	r3, [r7, #12]
 810124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810124e:	4b80      	ldr	r3, [pc, #512]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101254:	4a7e      	ldr	r2, [pc, #504]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101256:	f043 0320 	orr.w	r3, r3, #32
 810125a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810125e:	4b7c      	ldr	r3, [pc, #496]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101264:	f003 0320 	and.w	r3, r3, #32
 8101268:	60bb      	str	r3, [r7, #8]
 810126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 810126c:	4b78      	ldr	r3, [pc, #480]	@ (8101450 <MX_GPIO_Init+0x308>)
 810126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101272:	4a77      	ldr	r2, [pc, #476]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101274:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810127c:	4b74      	ldr	r3, [pc, #464]	@ (8101450 <MX_GPIO_Init+0x308>)
 810127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101286:	607b      	str	r3, [r7, #4]
 8101288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 810128a:	4b71      	ldr	r3, [pc, #452]	@ (8101450 <MX_GPIO_Init+0x308>)
 810128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101290:	4a6f      	ldr	r2, [pc, #444]	@ (8101450 <MX_GPIO_Init+0x308>)
 8101292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810129a:	4b6d      	ldr	r3, [pc, #436]	@ (8101450 <MX_GPIO_Init+0x308>)
 810129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81012a4:	603b      	str	r3, [r7, #0]
 81012a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 81012a8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 81012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012ae:	2302      	movs	r3, #2
 81012b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012b2:	2300      	movs	r3, #0
 81012b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012b6:	2303      	movs	r3, #3
 81012b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81012ba:	230c      	movs	r3, #12
 81012bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81012be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012c2:	4619      	mov	r1, r3
 81012c4:	4863      	ldr	r0, [pc, #396]	@ (8101454 <MX_GPIO_Init+0x30c>)
 81012c6:	f001 fb27 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 81012ca:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 81012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012d0:	2302      	movs	r3, #2
 81012d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012d4:	2300      	movs	r3, #0
 81012d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012d8:	2300      	movs	r3, #0
 81012da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81012dc:	2309      	movs	r3, #9
 81012de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81012e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012e4:	4619      	mov	r1, r3
 81012e6:	485c      	ldr	r0, [pc, #368]	@ (8101458 <MX_GPIO_Init+0x310>)
 81012e8:	f001 fb16 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_8;
 81012ec:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 81012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012f2:	2302      	movs	r3, #2
 81012f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f6:	2300      	movs	r3, #0
 81012f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012fa:	2303      	movs	r3, #3
 81012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81012fe:	230c      	movs	r3, #12
 8101300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101306:	4619      	mov	r1, r3
 8101308:	4854      	ldr	r0, [pc, #336]	@ (810145c <MX_GPIO_Init+0x314>)
 810130a:	f001 fb05 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 810130e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8101312:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101314:	2302      	movs	r3, #2
 8101316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101318:	2300      	movs	r3, #0
 810131a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810131c:	2303      	movs	r3, #3
 810131e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101320:	230c      	movs	r3, #12
 8101322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101328:	4619      	mov	r1, r3
 810132a:	484d      	ldr	r0, [pc, #308]	@ (8101460 <MX_GPIO_Init+0x318>)
 810132c:	f001 faf4 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8101330:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101336:	2302      	movs	r3, #2
 8101338:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810133a:	2300      	movs	r3, #0
 810133c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810133e:	2300      	movs	r3, #0
 8101340:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101342:	230b      	movs	r3, #11
 8101344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810134a:	4619      	mov	r1, r3
 810134c:	4842      	ldr	r0, [pc, #264]	@ (8101458 <MX_GPIO_Init+0x310>)
 810134e:	f001 fae3 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 8101352:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8101356:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101358:	2302      	movs	r3, #2
 810135a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810135c:	2300      	movs	r3, #0
 810135e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101360:	2303      	movs	r3, #3
 8101362:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101364:	230c      	movs	r3, #12
 8101366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101368:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810136c:	4619      	mov	r1, r3
 810136e:	483d      	ldr	r0, [pc, #244]	@ (8101464 <MX_GPIO_Init+0x31c>)
 8101370:	f001 fad2 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG4 PG2
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_2
 8101374:	f248 1317 	movw	r3, #33047	@ 0x8117
 8101378:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810137a:	2302      	movs	r3, #2
 810137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810137e:	2300      	movs	r3, #0
 8101380:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101382:	2303      	movs	r3, #3
 8101384:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101386:	230c      	movs	r3, #12
 8101388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810138a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810138e:	4619      	mov	r1, r3
 8101390:	4831      	ldr	r0, [pc, #196]	@ (8101458 <MX_GPIO_Init+0x310>)
 8101392:	f001 fac1 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101396:	2304      	movs	r3, #4
 8101398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810139a:	2302      	movs	r3, #2
 810139c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810139e:	2300      	movs	r3, #0
 81013a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81013a2:	2303      	movs	r3, #3
 81013a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81013a6:	230c      	movs	r3, #12
 81013a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81013aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013ae:	4619      	mov	r1, r3
 81013b0:	482d      	ldr	r0, [pc, #180]	@ (8101468 <MX_GPIO_Init+0x320>)
 81013b2:	f001 fab1 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 81013b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 81013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013bc:	2302      	movs	r3, #2
 81013be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013c0:	2300      	movs	r3, #0
 81013c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81013c4:	2303      	movs	r3, #3
 81013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81013c8:	230c      	movs	r3, #12
 81013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81013cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013d0:	4619      	mov	r1, r3
 81013d2:	4825      	ldr	r0, [pc, #148]	@ (8101468 <MX_GPIO_Init+0x320>)
 81013d4:	f001 faa0 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 81013d8:	2380      	movs	r3, #128	@ 0x80
 81013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81013dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 81013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013e2:	2300      	movs	r3, #0
 81013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 81013e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013ea:	4619      	mov	r1, r3
 81013ec:	481b      	ldr	r0, [pc, #108]	@ (810145c <MX_GPIO_Init+0x314>)
 81013ee:	f001 fa93 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 81013f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 81013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013f8:	2302      	movs	r3, #2
 81013fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013fc:	2300      	movs	r3, #0
 81013fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101400:	2303      	movs	r3, #3
 8101402:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101404:	230c      	movs	r3, #12
 8101406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810140c:	4619      	mov	r1, r3
 810140e:	4817      	ldr	r0, [pc, #92]	@ (810146c <MX_GPIO_Init+0x324>)
 8101410:	f001 fa82 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101414:	2340      	movs	r3, #64	@ 0x40
 8101416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101418:	2302      	movs	r3, #2
 810141a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810141c:	2300      	movs	r3, #0
 810141e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101420:	2300      	movs	r3, #0
 8101422:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101424:	230a      	movs	r3, #10
 8101426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101428:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810142c:	4619      	mov	r1, r3
 810142e:	480a      	ldr	r0, [pc, #40]	@ (8101458 <MX_GPIO_Init+0x310>)
 8101430:	f001 fa72 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101434:	23c0      	movs	r3, #192	@ 0xc0
 8101436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101438:	2302      	movs	r3, #2
 810143a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810143c:	2300      	movs	r3, #0
 810143e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101440:	2300      	movs	r3, #0
 8101442:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101444:	2309      	movs	r3, #9
 8101446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101448:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810144c:	4619      	mov	r1, r3
 810144e:	e00f      	b.n	8101470 <MX_GPIO_Init+0x328>
 8101450:	58024400 	.word	0x58024400
 8101454:	58022000 	.word	0x58022000
 8101458:	58021800 	.word	0x58021800
 810145c:	58020800 	.word	0x58020800
 8101460:	58021000 	.word	0x58021000
 8101464:	58021c00 	.word	0x58021c00
 8101468:	58020c00 	.word	0x58020c00
 810146c:	58021400 	.word	0x58021400
 8101470:	4853      	ldr	r0, [pc, #332]	@ (81015c0 <MX_GPIO_Init+0x478>)
 8101472:	f001 fa51 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810147c:	2303      	movs	r3, #3
 810147e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101480:	2300      	movs	r3, #0
 8101482:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101488:	4619      	mov	r1, r3
 810148a:	484d      	ldr	r0, [pc, #308]	@ (81015c0 <MX_GPIO_Init+0x478>)
 810148c:	f001 fa44 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101496:	2302      	movs	r3, #2
 8101498:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810149a:	2300      	movs	r3, #0
 810149c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810149e:	2300      	movs	r3, #0
 81014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81014a2:	230a      	movs	r3, #10
 81014a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81014a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81014aa:	4619      	mov	r1, r3
 81014ac:	4844      	ldr	r0, [pc, #272]	@ (81015c0 <MX_GPIO_Init+0x478>)
 81014ae:	f001 fa33 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81014b2:	2332      	movs	r3, #50	@ 0x32
 81014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014b6:	2302      	movs	r3, #2
 81014b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ba:	2300      	movs	r3, #0
 81014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014be:	2300      	movs	r3, #0
 81014c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014c2:	230b      	movs	r3, #11
 81014c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81014c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81014ca:	4619      	mov	r1, r3
 81014cc:	483d      	ldr	r0, [pc, #244]	@ (81015c4 <MX_GPIO_Init+0x47c>)
 81014ce:	f001 fa23 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ9 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 81014d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014d8:	2302      	movs	r3, #2
 81014da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014dc:	2300      	movs	r3, #0
 81014de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014e0:	2300      	movs	r3, #0
 81014e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 81014e4:	2308      	movs	r3, #8
 81014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81014e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81014ec:	4619      	mov	r1, r3
 81014ee:	4836      	ldr	r0, [pc, #216]	@ (81015c8 <MX_GPIO_Init+0x480>)
 81014f0:	f001 fa12 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 81014f4:	230c      	movs	r3, #12
 81014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014f8:	2302      	movs	r3, #2
 81014fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014fc:	2300      	movs	r3, #0
 81014fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101500:	2300      	movs	r3, #0
 8101502:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101504:	2309      	movs	r3, #9
 8101506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810150c:	4619      	mov	r1, r3
 810150e:	482f      	ldr	r0, [pc, #188]	@ (81015cc <MX_GPIO_Init+0x484>)
 8101510:	f001 fa02 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8101514:	2386      	movs	r3, #134	@ 0x86
 8101516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101518:	2302      	movs	r3, #2
 810151a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810151c:	2300      	movs	r3, #0
 810151e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101520:	2300      	movs	r3, #0
 8101522:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101524:	230b      	movs	r3, #11
 8101526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101528:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810152c:	4619      	mov	r1, r3
 810152e:	4828      	ldr	r0, [pc, #160]	@ (81015d0 <MX_GPIO_Init+0x488>)
 8101530:	f001 f9f2 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101534:	2304      	movs	r3, #4
 8101536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101538:	2302      	movs	r3, #2
 810153a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810153c:	2300      	movs	r3, #0
 810153e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101540:	2300      	movs	r3, #0
 8101542:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101544:	2309      	movs	r3, #9
 8101546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101548:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810154c:	4619      	mov	r1, r3
 810154e:	4821      	ldr	r0, [pc, #132]	@ (81015d4 <MX_GPIO_Init+0x48c>)
 8101550:	f001 f9e2 	bl	8102918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101554:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810155a:	2302      	movs	r3, #2
 810155c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810155e:	2300      	movs	r3, #0
 8101560:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101562:	2300      	movs	r3, #0
 8101564:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101566:	2309      	movs	r3, #9
 8101568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810156a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810156e:	4619      	mov	r1, r3
 8101570:	4819      	ldr	r0, [pc, #100]	@ (81015d8 <MX_GPIO_Init+0x490>)
 8101572:	f001 f9d1 	bl	8102918 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8101576:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 810157a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 810157e:	f000 ff65 	bl	810244c <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8101582:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8101586:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 810158a:	f000 ff5f 	bl	810244c <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 810158e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8101592:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8101596:	f000 ff59 	bl	810244c <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810159a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 810159e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81015a2:	f000 ff53 	bl	810244c <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 81015a6:	2200      	movs	r2, #0
 81015a8:	2105      	movs	r1, #5
 81015aa:	2017      	movs	r0, #23
 81015ac:	f001 f97a 	bl	81028a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 81015b0:	2017      	movs	r0, #23
 81015b2:	f001 f991 	bl	81028d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81015b6:	bf00      	nop
 81015b8:	3740      	adds	r7, #64	@ 0x40
 81015ba:	46bd      	mov	sp, r7
 81015bc:	bd80      	pop	{r7, pc}
 81015be:	bf00      	nop
 81015c0:	58021400 	.word	0x58021400
 81015c4:	58020800 	.word	0x58020800
 81015c8:	58022400 	.word	0x58022400
 81015cc:	58021c00 	.word	0x58021c00
 81015d0:	58020000 	.word	0x58020000
 81015d4:	58020400 	.word	0x58020400
 81015d8:	58020c00 	.word	0x58020c00

081015dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81015dc:	b580      	push	{r7, lr}
 81015de:	b082      	sub	sp, #8
 81015e0:	af00      	add	r7, sp, #0
 81015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	681b      	ldr	r3, [r3, #0]
 81015e8:	4a04      	ldr	r2, [pc, #16]	@ (81015fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 81015ea:	4293      	cmp	r3, r2
 81015ec:	d101      	bne.n	81015f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 81015ee:	f000 fedd 	bl	81023ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81015f2:	bf00      	nop
 81015f4:	3708      	adds	r7, #8
 81015f6:	46bd      	mov	sp, r7
 81015f8:	bd80      	pop	{r7, pc}
 81015fa:	bf00      	nop
 81015fc:	40000400 	.word	0x40000400

08101600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101600:	b480      	push	{r7}
 8101602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101604:	b672      	cpsid	i
}
 8101606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101608:	bf00      	nop
 810160a:	e7fd      	b.n	8101608 <Error_Handler+0x8>

0810160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810160c:	b580      	push	{r7, lr}
 810160e:	b082      	sub	sp, #8
 8101610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101612:	4b10      	ldr	r3, [pc, #64]	@ (8101654 <HAL_MspInit+0x48>)
 8101614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101618:	4a0e      	ldr	r2, [pc, #56]	@ (8101654 <HAL_MspInit+0x48>)
 810161a:	f043 0302 	orr.w	r3, r3, #2
 810161e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101622:	4b0c      	ldr	r3, [pc, #48]	@ (8101654 <HAL_MspInit+0x48>)
 8101624:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101628:	f003 0302 	and.w	r3, r3, #2
 810162c:	607b      	str	r3, [r7, #4]
 810162e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101630:	2200      	movs	r2, #0
 8101632:	210f      	movs	r1, #15
 8101634:	f06f 0001 	mvn.w	r0, #1
 8101638:	f001 f934 	bl	81028a4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 810163c:	2200      	movs	r2, #0
 810163e:	2105      	movs	r1, #5
 8101640:	2040      	movs	r0, #64	@ 0x40
 8101642:	f001 f92f 	bl	81028a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101646:	2040      	movs	r0, #64	@ 0x40
 8101648:	f001 f946 	bl	81028d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810164c:	bf00      	nop
 810164e:	3708      	adds	r7, #8
 8101650:	46bd      	mov	sp, r7
 8101652:	bd80      	pop	{r7, pc}
 8101654:	58024400 	.word	0x58024400

08101658 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101658:	b580      	push	{r7, lr}
 810165a:	b0bc      	sub	sp, #240	@ 0xf0
 810165c:	af00      	add	r7, sp, #0
 810165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101660:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101664:	2200      	movs	r2, #0
 8101666:	601a      	str	r2, [r3, #0]
 8101668:	605a      	str	r2, [r3, #4]
 810166a:	609a      	str	r2, [r3, #8]
 810166c:	60da      	str	r2, [r3, #12]
 810166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101670:	f107 0310 	add.w	r3, r7, #16
 8101674:	22c8      	movs	r2, #200	@ 0xc8
 8101676:	2100      	movs	r1, #0
 8101678:	4618      	mov	r0, r3
 810167a:	f007 fb4d 	bl	8108d18 <memset>
  if(hcec->Instance==CEC)
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	681b      	ldr	r3, [r3, #0]
 8101682:	4a2b      	ldr	r2, [pc, #172]	@ (8101730 <HAL_CEC_MspInit+0xd8>)
 8101684:	4293      	cmp	r3, r2
 8101686:	d14e      	bne.n	8101726 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101688:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 810168c:	f04f 0300 	mov.w	r3, #0
 8101690:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101694:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8101698:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810169c:	f107 0310 	add.w	r3, r7, #16
 81016a0:	4618      	mov	r0, r3
 81016a2:	f001 fee1 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 81016a6:	4603      	mov	r3, r0
 81016a8:	2b00      	cmp	r3, #0
 81016aa:	d001      	beq.n	81016b0 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81016ac:	f7ff ffa8 	bl	8101600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81016b0:	4b20      	ldr	r3, [pc, #128]	@ (8101734 <HAL_CEC_MspInit+0xdc>)
 81016b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016b6:	4a1f      	ldr	r2, [pc, #124]	@ (8101734 <HAL_CEC_MspInit+0xdc>)
 81016b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 81016bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81016c0:	4b1c      	ldr	r3, [pc, #112]	@ (8101734 <HAL_CEC_MspInit+0xdc>)
 81016c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81016ca:	60fb      	str	r3, [r7, #12]
 81016cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016ce:	4b19      	ldr	r3, [pc, #100]	@ (8101734 <HAL_CEC_MspInit+0xdc>)
 81016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016d4:	4a17      	ldr	r2, [pc, #92]	@ (8101734 <HAL_CEC_MspInit+0xdc>)
 81016d6:	f043 0302 	orr.w	r3, r3, #2
 81016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016de:	4b15      	ldr	r3, [pc, #84]	@ (8101734 <HAL_CEC_MspInit+0xdc>)
 81016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016e4:	f003 0302 	and.w	r3, r3, #2
 81016e8:	60bb      	str	r3, [r7, #8]
 81016ea:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81016ec:	2340      	movs	r3, #64	@ 0x40
 81016ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81016f2:	2312      	movs	r3, #18
 81016f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016f8:	2300      	movs	r3, #0
 81016fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016fe:	2300      	movs	r3, #0
 8101700:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101704:	2305      	movs	r3, #5
 8101706:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 810170a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810170e:	4619      	mov	r1, r3
 8101710:	4809      	ldr	r0, [pc, #36]	@ (8101738 <HAL_CEC_MspInit+0xe0>)
 8101712:	f001 f901 	bl	8102918 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8101716:	2200      	movs	r2, #0
 8101718:	2105      	movs	r1, #5
 810171a:	205e      	movs	r0, #94	@ 0x5e
 810171c:	f001 f8c2 	bl	81028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101720:	205e      	movs	r0, #94	@ 0x5e
 8101722:	f001 f8d9 	bl	81028d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 8101726:	bf00      	nop
 8101728:	37f0      	adds	r7, #240	@ 0xf0
 810172a:	46bd      	mov	sp, r7
 810172c:	bd80      	pop	{r7, pc}
 810172e:	bf00      	nop
 8101730:	40006c00 	.word	0x40006c00
 8101734:	58024400 	.word	0x58024400
 8101738:	58020400 	.word	0x58020400

0810173c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 810173c:	b580      	push	{r7, lr}
 810173e:	b0b4      	sub	sp, #208	@ 0xd0
 8101740:	af00      	add	r7, sp, #0
 8101742:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101744:	f107 0308 	add.w	r3, r7, #8
 8101748:	22c8      	movs	r2, #200	@ 0xc8
 810174a:	2100      	movs	r1, #0
 810174c:	4618      	mov	r0, r3
 810174e:	f007 fae3 	bl	8108d18 <memset>
  if(hrtc->Instance==RTC)
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	681b      	ldr	r3, [r3, #0]
 8101756:	4a10      	ldr	r2, [pc, #64]	@ (8101798 <HAL_RTC_MspInit+0x5c>)
 8101758:	4293      	cmp	r3, r2
 810175a:	d119      	bne.n	8101790 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 810175c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101760:	f04f 0300 	mov.w	r3, #0
 8101764:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810176c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101770:	f107 0308 	add.w	r3, r7, #8
 8101774:	4618      	mov	r0, r3
 8101776:	f001 fe77 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 810177a:	4603      	mov	r3, r0
 810177c:	2b00      	cmp	r3, #0
 810177e:	d001      	beq.n	8101784 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101780:	f7ff ff3e 	bl	8101600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101784:	4b05      	ldr	r3, [pc, #20]	@ (810179c <HAL_RTC_MspInit+0x60>)
 8101786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101788:	4a04      	ldr	r2, [pc, #16]	@ (810179c <HAL_RTC_MspInit+0x60>)
 810178a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810178e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8101790:	bf00      	nop
 8101792:	37d0      	adds	r7, #208	@ 0xd0
 8101794:	46bd      	mov	sp, r7
 8101796:	bd80      	pop	{r7, pc}
 8101798:	58004000 	.word	0x58004000
 810179c:	58024400 	.word	0x58024400

081017a0 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 81017a0:	b580      	push	{r7, lr}
 81017a2:	b0bc      	sub	sp, #240	@ 0xf0
 81017a4:	af00      	add	r7, sp, #0
 81017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81017ac:	2200      	movs	r2, #0
 81017ae:	601a      	str	r2, [r3, #0]
 81017b0:	605a      	str	r2, [r3, #4]
 81017b2:	609a      	str	r2, [r3, #8]
 81017b4:	60da      	str	r2, [r3, #12]
 81017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017b8:	f107 0310 	add.w	r3, r7, #16
 81017bc:	22c8      	movs	r2, #200	@ 0xc8
 81017be:	2100      	movs	r1, #0
 81017c0:	4618      	mov	r0, r3
 81017c2:	f007 faa9 	bl	8108d18 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	681b      	ldr	r3, [r3, #0]
 81017ca:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 81017ce:	d144      	bne.n	810185a <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 81017d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81017d4:	f04f 0300 	mov.w	r3, #0
 81017d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 81017dc:	2300      	movs	r3, #0
 81017de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017e0:	f107 0310 	add.w	r3, r7, #16
 81017e4:	4618      	mov	r0, r3
 81017e6:	f001 fe3f 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 81017ea:	4603      	mov	r3, r0
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	d001      	beq.n	81017f4 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 81017f0:	f7ff ff06 	bl	8101600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 81017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8101864 <HAL_SPDIFRX_MspInit+0xc4>)
 81017f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81017fa:	4a1a      	ldr	r2, [pc, #104]	@ (8101864 <HAL_SPDIFRX_MspInit+0xc4>)
 81017fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101800:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101804:	4b17      	ldr	r3, [pc, #92]	@ (8101864 <HAL_SPDIFRX_MspInit+0xc4>)
 8101806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810180a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810180e:	60fb      	str	r3, [r7, #12]
 8101810:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101812:	4b14      	ldr	r3, [pc, #80]	@ (8101864 <HAL_SPDIFRX_MspInit+0xc4>)
 8101814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101818:	4a12      	ldr	r2, [pc, #72]	@ (8101864 <HAL_SPDIFRX_MspInit+0xc4>)
 810181a:	f043 0308 	orr.w	r3, r3, #8
 810181e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101822:	4b10      	ldr	r3, [pc, #64]	@ (8101864 <HAL_SPDIFRX_MspInit+0xc4>)
 8101824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101828:	f003 0308 	and.w	r3, r3, #8
 810182c:	60bb      	str	r3, [r7, #8]
 810182e:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101830:	2380      	movs	r3, #128	@ 0x80
 8101832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101836:	2302      	movs	r3, #2
 8101838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810183c:	2300      	movs	r3, #0
 810183e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101842:	2300      	movs	r3, #0
 8101844:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101848:	2309      	movs	r3, #9
 810184a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 810184e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101852:	4619      	mov	r1, r3
 8101854:	4804      	ldr	r0, [pc, #16]	@ (8101868 <HAL_SPDIFRX_MspInit+0xc8>)
 8101856:	f001 f85f 	bl	8102918 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 810185a:	bf00      	nop
 810185c:	37f0      	adds	r7, #240	@ 0xf0
 810185e:	46bd      	mov	sp, r7
 8101860:	bd80      	pop	{r7, pc}
 8101862:	bf00      	nop
 8101864:	58024400 	.word	0x58024400
 8101868:	58020c00 	.word	0x58020c00

0810186c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 810186c:	b580      	push	{r7, lr}
 810186e:	b0c0      	sub	sp, #256	@ 0x100
 8101870:	af00      	add	r7, sp, #0
 8101872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101874:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101878:	2200      	movs	r2, #0
 810187a:	601a      	str	r2, [r3, #0]
 810187c:	605a      	str	r2, [r3, #4]
 810187e:	609a      	str	r2, [r3, #8]
 8101880:	60da      	str	r2, [r3, #12]
 8101882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101884:	f107 0320 	add.w	r3, r7, #32
 8101888:	22c8      	movs	r2, #200	@ 0xc8
 810188a:	2100      	movs	r1, #0
 810188c:	4618      	mov	r0, r3
 810188e:	f007 fa43 	bl	8108d18 <memset>
  if(hspi->Instance==SPI2)
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	681b      	ldr	r3, [r3, #0]
 8101896:	4a72      	ldr	r2, [pc, #456]	@ (8101a60 <HAL_SPI_MspInit+0x1f4>)
 8101898:	4293      	cmp	r3, r2
 810189a:	d16b      	bne.n	8101974 <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 810189c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 81018a0:	f04f 0300 	mov.w	r3, #0
 81018a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81018a8:	2300      	movs	r3, #0
 81018aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81018ae:	f107 0320 	add.w	r3, r7, #32
 81018b2:	4618      	mov	r0, r3
 81018b4:	f001 fdd8 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 81018b8:	4603      	mov	r3, r0
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	d001      	beq.n	81018c2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 81018be:	f7ff fe9f 	bl	8101600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 81018c2:	4b68      	ldr	r3, [pc, #416]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81018c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81018c8:	4a66      	ldr	r2, [pc, #408]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81018ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81018ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81018d2:	4b64      	ldr	r3, [pc, #400]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81018d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81018d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81018dc:	61fb      	str	r3, [r7, #28]
 81018de:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81018e0:	4b60      	ldr	r3, [pc, #384]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018e6:	4a5f      	ldr	r2, [pc, #380]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81018e8:	f043 0301 	orr.w	r3, r3, #1
 81018ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018f0:	4b5c      	ldr	r3, [pc, #368]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018f6:	f003 0301 	and.w	r3, r3, #1
 81018fa:	61bb      	str	r3, [r7, #24]
 81018fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81018fe:	4b59      	ldr	r3, [pc, #356]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 8101900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101904:	4a57      	ldr	r2, [pc, #348]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 8101906:	f043 0304 	orr.w	r3, r3, #4
 810190a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810190e:	4b55      	ldr	r3, [pc, #340]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 8101910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101914:	f003 0304 	and.w	r3, r3, #4
 8101918:	617b      	str	r3, [r7, #20]
 810191a:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 810191c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101920:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101924:	2302      	movs	r3, #2
 8101926:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810192a:	2300      	movs	r3, #0
 810192c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101930:	2300      	movs	r3, #0
 8101932:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101936:	2305      	movs	r3, #5
 8101938:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810193c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101940:	4619      	mov	r1, r3
 8101942:	4849      	ldr	r0, [pc, #292]	@ (8101a68 <HAL_SPI_MspInit+0x1fc>)
 8101944:	f000 ffe8 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101948:	230c      	movs	r3, #12
 810194a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810194e:	2302      	movs	r3, #2
 8101950:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101954:	2300      	movs	r3, #0
 8101956:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810195a:	2300      	movs	r3, #0
 810195c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101960:	2305      	movs	r3, #5
 8101962:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101966:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810196a:	4619      	mov	r1, r3
 810196c:	483f      	ldr	r0, [pc, #252]	@ (8101a6c <HAL_SPI_MspInit+0x200>)
 810196e:	f000 ffd3 	bl	8102918 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101972:	e06f      	b.n	8101a54 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	681b      	ldr	r3, [r3, #0]
 8101978:	4a3d      	ldr	r2, [pc, #244]	@ (8101a70 <HAL_SPI_MspInit+0x204>)
 810197a:	4293      	cmp	r3, r2
 810197c:	d16a      	bne.n	8101a54 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 810197e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101982:	f04f 0300 	mov.w	r3, #0
 8101986:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 810198a:	2300      	movs	r3, #0
 810198c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101990:	f107 0320 	add.w	r3, r7, #32
 8101994:	4618      	mov	r0, r3
 8101996:	f001 fd67 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 810199a:	4603      	mov	r3, r0
 810199c:	2b00      	cmp	r3, #0
 810199e:	d001      	beq.n	81019a4 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 81019a0:	f7ff fe2e 	bl	8101600 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 81019a4:	4b2f      	ldr	r3, [pc, #188]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81019aa:	4a2e      	ldr	r2, [pc, #184]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81019b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81019ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81019be:	613b      	str	r3, [r7, #16]
 81019c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 81019c2:	4b28      	ldr	r3, [pc, #160]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019c8:	4a26      	ldr	r2, [pc, #152]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81019d2:	4b24      	ldr	r3, [pc, #144]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81019dc:	60fb      	str	r3, [r7, #12]
 81019de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81019e0:	4b20      	ldr	r3, [pc, #128]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019e6:	4a1f      	ldr	r2, [pc, #124]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8101a64 <HAL_SPI_MspInit+0x1f8>)
 81019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81019fa:	60bb      	str	r3, [r7, #8]
 81019fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 81019fe:	2303      	movs	r3, #3
 8101a00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a04:	2302      	movs	r3, #2
 8101a06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a10:	2300      	movs	r3, #0
 8101a12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101a16:	2305      	movs	r3, #5
 8101a18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101a1c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a20:	4619      	mov	r1, r3
 8101a22:	4814      	ldr	r0, [pc, #80]	@ (8101a74 <HAL_SPI_MspInit+0x208>)
 8101a24:	f000 ff78 	bl	8102918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101a28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a30:	2302      	movs	r3, #2
 8101a32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a36:	2300      	movs	r3, #0
 8101a38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a3c:	2300      	movs	r3, #0
 8101a3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101a42:	2305      	movs	r3, #5
 8101a44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101a48:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a4c:	4619      	mov	r1, r3
 8101a4e:	480a      	ldr	r0, [pc, #40]	@ (8101a78 <HAL_SPI_MspInit+0x20c>)
 8101a50:	f000 ff62 	bl	8102918 <HAL_GPIO_Init>
}
 8101a54:	bf00      	nop
 8101a56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101a5a:	46bd      	mov	sp, r7
 8101a5c:	bd80      	pop	{r7, pc}
 8101a5e:	bf00      	nop
 8101a60:	40003800 	.word	0x40003800
 8101a64:	58024400 	.word	0x58024400
 8101a68:	58020000 	.word	0x58020000
 8101a6c:	58020800 	.word	0x58020800
 8101a70:	40015000 	.word	0x40015000
 8101a74:	58022800 	.word	0x58022800
 8101a78:	58022400 	.word	0x58022400

08101a7c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101a7c:	b580      	push	{r7, lr}
 8101a7e:	b08a      	sub	sp, #40	@ 0x28
 8101a80:	af00      	add	r7, sp, #0
 8101a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a84:	f107 0314 	add.w	r3, r7, #20
 8101a88:	2200      	movs	r2, #0
 8101a8a:	601a      	str	r2, [r3, #0]
 8101a8c:	605a      	str	r2, [r3, #4]
 8101a8e:	609a      	str	r2, [r3, #8]
 8101a90:	60da      	str	r2, [r3, #12]
 8101a92:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	4a1a      	ldr	r2, [pc, #104]	@ (8101b04 <HAL_TIM_PWM_MspInit+0x88>)
 8101a9a:	4293      	cmp	r3, r2
 8101a9c:	d12d      	bne.n	8101afa <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8101b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8101aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101aa4:	4a18      	ldr	r2, [pc, #96]	@ (8101b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8101aa6:	f043 0302 	orr.w	r3, r3, #2
 8101aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101aae:	4b16      	ldr	r3, [pc, #88]	@ (8101b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101ab4:	f003 0302 	and.w	r3, r3, #2
 8101ab8:	613b      	str	r3, [r7, #16]
 8101aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101abc:	4b12      	ldr	r3, [pc, #72]	@ (8101b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8101abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ac2:	4a11      	ldr	r2, [pc, #68]	@ (8101b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ac4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101acc:	4b0e      	ldr	r3, [pc, #56]	@ (8101b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101ad6:	60fb      	str	r3, [r7, #12]
 8101ad8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8101ada:	2340      	movs	r3, #64	@ 0x40
 8101adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ade:	2302      	movs	r3, #2
 8101ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ae2:	2300      	movs	r3, #0
 8101ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101aea:	2303      	movs	r3, #3
 8101aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8101aee:	f107 0314 	add.w	r3, r7, #20
 8101af2:	4619      	mov	r1, r3
 8101af4:	4805      	ldr	r0, [pc, #20]	@ (8101b0c <HAL_TIM_PWM_MspInit+0x90>)
 8101af6:	f000 ff0f 	bl	8102918 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8101afa:	bf00      	nop
 8101afc:	3728      	adds	r7, #40	@ 0x28
 8101afe:	46bd      	mov	sp, r7
 8101b00:	bd80      	pop	{r7, pc}
 8101b02:	bf00      	nop
 8101b04:	40010400 	.word	0x40010400
 8101b08:	58024400 	.word	0x58024400
 8101b0c:	58022400 	.word	0x58022400

08101b10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101b10:	b480      	push	{r7}
 8101b12:	b085      	sub	sp, #20
 8101b14:	af00      	add	r7, sp, #0
 8101b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	681b      	ldr	r3, [r3, #0]
 8101b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8101b4c <HAL_TIM_Base_MspInit+0x3c>)
 8101b1e:	4293      	cmp	r3, r2
 8101b20:	d10e      	bne.n	8101b40 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101b22:	4b0b      	ldr	r3, [pc, #44]	@ (8101b50 <HAL_TIM_Base_MspInit+0x40>)
 8101b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b28:	4a09      	ldr	r2, [pc, #36]	@ (8101b50 <HAL_TIM_Base_MspInit+0x40>)
 8101b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101b2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101b32:	4b07      	ldr	r3, [pc, #28]	@ (8101b50 <HAL_TIM_Base_MspInit+0x40>)
 8101b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101b3c:	60fb      	str	r3, [r7, #12]
 8101b3e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8101b40:	bf00      	nop
 8101b42:	3714      	adds	r7, #20
 8101b44:	46bd      	mov	sp, r7
 8101b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b4a:	4770      	bx	lr
 8101b4c:	40001c00 	.word	0x40001c00
 8101b50:	58024400 	.word	0x58024400

08101b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101b54:	b580      	push	{r7, lr}
 8101b56:	b08a      	sub	sp, #40	@ 0x28
 8101b58:	af00      	add	r7, sp, #0
 8101b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b5c:	f107 0314 	add.w	r3, r7, #20
 8101b60:	2200      	movs	r2, #0
 8101b62:	601a      	str	r2, [r3, #0]
 8101b64:	605a      	str	r2, [r3, #4]
 8101b66:	609a      	str	r2, [r3, #8]
 8101b68:	60da      	str	r2, [r3, #12]
 8101b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	681b      	ldr	r3, [r3, #0]
 8101b70:	4a35      	ldr	r2, [pc, #212]	@ (8101c48 <HAL_TIM_MspPostInit+0xf4>)
 8101b72:	4293      	cmp	r3, r2
 8101b74:	d13e      	bne.n	8101bf4 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b76:	4b35      	ldr	r3, [pc, #212]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b7c:	4a33      	ldr	r2, [pc, #204]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101b7e:	f043 0304 	orr.w	r3, r3, #4
 8101b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b86:	4b31      	ldr	r3, [pc, #196]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b8c:	f003 0304 	and.w	r3, r3, #4
 8101b90:	613b      	str	r3, [r7, #16]
 8101b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101b94:	4b2d      	ldr	r3, [pc, #180]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101b9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ba4:	4b29      	ldr	r3, [pc, #164]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101bae:	60fb      	str	r3, [r7, #12]
 8101bb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101bb2:	2340      	movs	r3, #64	@ 0x40
 8101bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bb6:	2302      	movs	r3, #2
 8101bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bba:	2300      	movs	r3, #0
 8101bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bbe:	2300      	movs	r3, #0
 8101bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101bc2:	2303      	movs	r3, #3
 8101bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101bc6:	f107 0314 	add.w	r3, r7, #20
 8101bca:	4619      	mov	r1, r3
 8101bcc:	4820      	ldr	r0, [pc, #128]	@ (8101c50 <HAL_TIM_MspPostInit+0xfc>)
 8101bce:	f000 fea3 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8101bd2:	2380      	movs	r3, #128	@ 0x80
 8101bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bd6:	2302      	movs	r3, #2
 8101bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bda:	2300      	movs	r3, #0
 8101bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bde:	2300      	movs	r3, #0
 8101be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101be2:	2303      	movs	r3, #3
 8101be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8101be6:	f107 0314 	add.w	r3, r7, #20
 8101bea:	4619      	mov	r1, r3
 8101bec:	4819      	ldr	r0, [pc, #100]	@ (8101c54 <HAL_TIM_MspPostInit+0x100>)
 8101bee:	f000 fe93 	bl	8102918 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8101bf2:	e024      	b.n	8101c3e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	4a17      	ldr	r2, [pc, #92]	@ (8101c58 <HAL_TIM_MspPostInit+0x104>)
 8101bfa:	4293      	cmp	r3, r2
 8101bfc:	d11f      	bne.n	8101c3e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101bfe:	4b13      	ldr	r3, [pc, #76]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c04:	4a11      	ldr	r2, [pc, #68]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101c06:	f043 0320 	orr.w	r3, r3, #32
 8101c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8101c4c <HAL_TIM_MspPostInit+0xf8>)
 8101c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c14:	f003 0320 	and.w	r3, r3, #32
 8101c18:	60bb      	str	r3, [r7, #8]
 8101c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8101c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c22:	2302      	movs	r3, #2
 8101c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c26:	2300      	movs	r3, #0
 8101c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c2a:	2300      	movs	r3, #0
 8101c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101c2e:	2309      	movs	r3, #9
 8101c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101c32:	f107 0314 	add.w	r3, r7, #20
 8101c36:	4619      	mov	r1, r3
 8101c38:	4808      	ldr	r0, [pc, #32]	@ (8101c5c <HAL_TIM_MspPostInit+0x108>)
 8101c3a:	f000 fe6d 	bl	8102918 <HAL_GPIO_Init>
}
 8101c3e:	bf00      	nop
 8101c40:	3728      	adds	r7, #40	@ 0x28
 8101c42:	46bd      	mov	sp, r7
 8101c44:	bd80      	pop	{r7, pc}
 8101c46:	bf00      	nop
 8101c48:	40010400 	.word	0x40010400
 8101c4c:	58024400 	.word	0x58024400
 8101c50:	58020800 	.word	0x58020800
 8101c54:	58022400 	.word	0x58022400
 8101c58:	40001c00 	.word	0x40001c00
 8101c5c:	58021400 	.word	0x58021400

08101c60 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101c60:	b580      	push	{r7, lr}
 8101c62:	b0c2      	sub	sp, #264	@ 0x108
 8101c64:	af00      	add	r7, sp, #0
 8101c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8101c6e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c70:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101c74:	2200      	movs	r2, #0
 8101c76:	601a      	str	r2, [r3, #0]
 8101c78:	605a      	str	r2, [r3, #4]
 8101c7a:	609a      	str	r2, [r3, #8]
 8101c7c:	60da      	str	r2, [r3, #12]
 8101c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101c84:	22c8      	movs	r2, #200	@ 0xc8
 8101c86:	2100      	movs	r1, #0
 8101c88:	4618      	mov	r0, r3
 8101c8a:	f007 f845 	bl	8108d18 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8101c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	4a79      	ldr	r2, [pc, #484]	@ (8101e80 <HAL_PCD_MspInit+0x220>)
 8101c9c:	4293      	cmp	r3, r2
 8101c9e:	f040 80ea 	bne.w	8101e76 <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8101ca2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8101ca6:	f04f 0300 	mov.w	r3, #0
 8101caa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8101cae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8101cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101cba:	4618      	mov	r0, r3
 8101cbc:	f001 fbd4 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 8101cc0:	4603      	mov	r3, r0
 8101cc2:	2b00      	cmp	r3, #0
 8101cc4:	d001      	beq.n	8101cca <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8101cc6:	f7ff fc9b 	bl	8101600 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8101cca:	f001 f9b9 	bl	8103040 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101cce:	4b6d      	ldr	r3, [pc, #436]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101cd6:	f043 0302 	orr.w	r3, r3, #2
 8101cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101cde:	4b69      	ldr	r3, [pc, #420]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ce4:	f003 0302 	and.w	r3, r3, #2
 8101ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8101cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101cec:	4b65      	ldr	r3, [pc, #404]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101cf2:	4a64      	ldr	r2, [pc, #400]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101cfc:	4b61      	ldr	r3, [pc, #388]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101d06:	623b      	str	r3, [r7, #32]
 8101d08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d10:	4a5c      	ldr	r2, [pc, #368]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d12:	f043 0304 	orr.w	r3, r3, #4
 8101d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d20:	f003 0304 	and.w	r3, r3, #4
 8101d24:	61fb      	str	r3, [r7, #28]
 8101d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101d28:	4b56      	ldr	r3, [pc, #344]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d2e:	4a55      	ldr	r2, [pc, #340]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d38:	4b52      	ldr	r3, [pc, #328]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101d42:	61bb      	str	r3, [r7, #24]
 8101d44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101d46:	4b4f      	ldr	r3, [pc, #316]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d4e:	f043 0301 	orr.w	r3, r3, #1
 8101d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d56:	4b4b      	ldr	r3, [pc, #300]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d5c:	f003 0301 	and.w	r3, r3, #1
 8101d60:	617b      	str	r3, [r7, #20]
 8101d62:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8101d64:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8101d68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d6c:	2302      	movs	r3, #2
 8101d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d72:	2300      	movs	r3, #0
 8101d74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101d78:	2302      	movs	r3, #2
 8101d7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101d7e:	230a      	movs	r3, #10
 8101d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d84:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101d88:	4619      	mov	r1, r3
 8101d8a:	483f      	ldr	r0, [pc, #252]	@ (8101e88 <HAL_PCD_MspInit+0x228>)
 8101d8c:	f000 fdc4 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8101d90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101d94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d98:	2302      	movs	r3, #2
 8101d9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d9e:	2300      	movs	r3, #0
 8101da0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101da4:	2302      	movs	r3, #2
 8101da6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101daa:	230a      	movs	r3, #10
 8101dac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8101db0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101db4:	4619      	mov	r1, r3
 8101db6:	4835      	ldr	r0, [pc, #212]	@ (8101e8c <HAL_PCD_MspInit+0x22c>)
 8101db8:	f000 fdae 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8101dbc:	2301      	movs	r3, #1
 8101dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dc2:	2302      	movs	r3, #2
 8101dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dc8:	2300      	movs	r3, #0
 8101dca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101dce:	2302      	movs	r3, #2
 8101dd0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101dd4:	230a      	movs	r3, #10
 8101dd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8101dda:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101dde:	4619      	mov	r1, r3
 8101de0:	482b      	ldr	r0, [pc, #172]	@ (8101e90 <HAL_PCD_MspInit+0x230>)
 8101de2:	f000 fd99 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8101de6:	2310      	movs	r3, #16
 8101de8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dec:	2302      	movs	r3, #2
 8101dee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101df2:	2300      	movs	r3, #0
 8101df4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101df8:	2302      	movs	r3, #2
 8101dfa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101dfe:	230a      	movs	r3, #10
 8101e00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101e04:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101e08:	4619      	mov	r1, r3
 8101e0a:	4822      	ldr	r0, [pc, #136]	@ (8101e94 <HAL_PCD_MspInit+0x234>)
 8101e0c:	f000 fd84 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8101e10:	2328      	movs	r3, #40	@ 0x28
 8101e12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e16:	2302      	movs	r3, #2
 8101e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e1c:	2300      	movs	r3, #0
 8101e1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101e22:	2302      	movs	r3, #2
 8101e24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101e28:	230a      	movs	r3, #10
 8101e2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101e2e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101e32:	4619      	mov	r1, r3
 8101e34:	4818      	ldr	r0, [pc, #96]	@ (8101e98 <HAL_PCD_MspInit+0x238>)
 8101e36:	f000 fd6f 	bl	8102918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8101e3a:	4b12      	ldr	r3, [pc, #72]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e40:	4a10      	ldr	r2, [pc, #64]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101e46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101e54:	613b      	str	r3, [r7, #16]
 8101e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8101e58:	4b0a      	ldr	r3, [pc, #40]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e5e:	4a09      	ldr	r2, [pc, #36]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101e60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8101e64:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e68:	4b06      	ldr	r3, [pc, #24]	@ (8101e84 <HAL_PCD_MspInit+0x224>)
 8101e6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8101e72:	60fb      	str	r3, [r7, #12]
 8101e74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8101e76:	bf00      	nop
 8101e78:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8101e7c:	46bd      	mov	sp, r7
 8101e7e:	bd80      	pop	{r7, pc}
 8101e80:	40040000 	.word	0x40040000
 8101e84:	58024400 	.word	0x58024400
 8101e88:	58020400 	.word	0x58020400
 8101e8c:	58022000 	.word	0x58022000
 8101e90:	58020800 	.word	0x58020800
 8101e94:	58021c00 	.word	0x58021c00
 8101e98:	58020000 	.word	0x58020000

08101e9c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101e9c:	b580      	push	{r7, lr}
 8101e9e:	b0bc      	sub	sp, #240	@ 0xf0
 8101ea0:	af00      	add	r7, sp, #0
 8101ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ea4:	f107 0310 	add.w	r3, r7, #16
 8101ea8:	22c8      	movs	r2, #200	@ 0xc8
 8101eaa:	2100      	movs	r1, #0
 8101eac:	4618      	mov	r0, r3
 8101eae:	f006 ff33 	bl	8108d18 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	681b      	ldr	r3, [r3, #0]
 8101eb6:	4a4f      	ldr	r2, [pc, #316]	@ (8101ff4 <HAL_SAI_MspInit+0x158>)
 8101eb8:	4293      	cmp	r3, r2
 8101eba:	d153      	bne.n	8101f64 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101ec0:	f04f 0300 	mov.w	r3, #0
 8101ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101ec8:	2300      	movs	r3, #0
 8101eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ecc:	f107 0310 	add.w	r3, r7, #16
 8101ed0:	4618      	mov	r0, r3
 8101ed2:	f001 fac9 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 8101ed6:	4603      	mov	r3, r0
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	d001      	beq.n	8101ee0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8101edc:	f7ff fb90 	bl	8101600 <Error_Handler>
    }

    if (SAI1_client == 0)
 8101ee0:	4b45      	ldr	r3, [pc, #276]	@ (8101ff8 <HAL_SAI_MspInit+0x15c>)
 8101ee2:	681b      	ldr	r3, [r3, #0]
 8101ee4:	2b00      	cmp	r3, #0
 8101ee6:	d10e      	bne.n	8101f06 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101ee8:	4b44      	ldr	r3, [pc, #272]	@ (8101ffc <HAL_SAI_MspInit+0x160>)
 8101eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101eee:	4a43      	ldr	r2, [pc, #268]	@ (8101ffc <HAL_SAI_MspInit+0x160>)
 8101ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101ef8:	4b40      	ldr	r3, [pc, #256]	@ (8101ffc <HAL_SAI_MspInit+0x160>)
 8101efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101f02:	60fb      	str	r3, [r7, #12]
 8101f04:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8101f06:	4b3c      	ldr	r3, [pc, #240]	@ (8101ff8 <HAL_SAI_MspInit+0x15c>)
 8101f08:	681b      	ldr	r3, [r3, #0]
 8101f0a:	3301      	adds	r3, #1
 8101f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8101ff8 <HAL_SAI_MspInit+0x15c>)
 8101f0e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8101f10:	2370      	movs	r3, #112	@ 0x70
 8101f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f16:	2302      	movs	r3, #2
 8101f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f1c:	2300      	movs	r3, #0
 8101f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f22:	2300      	movs	r3, #0
 8101f24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101f28:	2306      	movs	r3, #6
 8101f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101f2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101f32:	4619      	mov	r1, r3
 8101f34:	4832      	ldr	r0, [pc, #200]	@ (8102000 <HAL_SAI_MspInit+0x164>)
 8101f36:	f000 fcef 	bl	8102918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8101f3a:	2380      	movs	r3, #128	@ 0x80
 8101f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f40:	2302      	movs	r3, #2
 8101f42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f46:	2300      	movs	r3, #0
 8101f48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f4c:	2300      	movs	r3, #0
 8101f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101f52:	2306      	movs	r3, #6
 8101f54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8101f58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101f5c:	4619      	mov	r1, r3
 8101f5e:	4829      	ldr	r0, [pc, #164]	@ (8102004 <HAL_SAI_MspInit+0x168>)
 8101f60:	f000 fcda 	bl	8102918 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	4a27      	ldr	r2, [pc, #156]	@ (8102008 <HAL_SAI_MspInit+0x16c>)
 8101f6a:	4293      	cmp	r3, r2
 8101f6c:	d13e      	bne.n	8101fec <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101f72:	f04f 0300 	mov.w	r3, #0
 8101f76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101f7a:	2300      	movs	r3, #0
 8101f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f7e:	f107 0310 	add.w	r3, r7, #16
 8101f82:	4618      	mov	r0, r3
 8101f84:	f001 fa70 	bl	8103468 <HAL_RCCEx_PeriphCLKConfig>
 8101f88:	4603      	mov	r3, r0
 8101f8a:	2b00      	cmp	r3, #0
 8101f8c:	d001      	beq.n	8101f92 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8101f8e:	f7ff fb37 	bl	8101600 <Error_Handler>
    }

      if (SAI1_client == 0)
 8101f92:	4b19      	ldr	r3, [pc, #100]	@ (8101ff8 <HAL_SAI_MspInit+0x15c>)
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	2b00      	cmp	r3, #0
 8101f98:	d10e      	bne.n	8101fb8 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101f9a:	4b18      	ldr	r3, [pc, #96]	@ (8101ffc <HAL_SAI_MspInit+0x160>)
 8101f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101fa0:	4a16      	ldr	r2, [pc, #88]	@ (8101ffc <HAL_SAI_MspInit+0x160>)
 8101fa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101faa:	4b14      	ldr	r3, [pc, #80]	@ (8101ffc <HAL_SAI_MspInit+0x160>)
 8101fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101fb4:	60bb      	str	r3, [r7, #8]
 8101fb6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8101fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8101ff8 <HAL_SAI_MspInit+0x15c>)
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	3301      	adds	r3, #1
 8101fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8101ff8 <HAL_SAI_MspInit+0x15c>)
 8101fc0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101fc2:	2308      	movs	r3, #8
 8101fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fc8:	2302      	movs	r3, #2
 8101fca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fce:	2300      	movs	r3, #0
 8101fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fd4:	2300      	movs	r3, #0
 8101fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101fda:	2306      	movs	r3, #6
 8101fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101fe0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101fe4:	4619      	mov	r1, r3
 8101fe6:	4806      	ldr	r0, [pc, #24]	@ (8102000 <HAL_SAI_MspInit+0x164>)
 8101fe8:	f000 fc96 	bl	8102918 <HAL_GPIO_Init>

    }
}
 8101fec:	bf00      	nop
 8101fee:	37f0      	adds	r7, #240	@ 0xf0
 8101ff0:	46bd      	mov	sp, r7
 8101ff2:	bd80      	pop	{r7, pc}
 8101ff4:	40015804 	.word	0x40015804
 8101ff8:	10000920 	.word	0x10000920
 8101ffc:	58024400 	.word	0x58024400
 8102000:	58021000 	.word	0x58021000
 8102004:	58021800 	.word	0x58021800
 8102008:	40015824 	.word	0x40015824

0810200c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810200c:	b580      	push	{r7, lr}
 810200e:	b090      	sub	sp, #64	@ 0x40
 8102010:	af00      	add	r7, sp, #0
 8102012:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	2b0f      	cmp	r3, #15
 8102018:	d827      	bhi.n	810206a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 810201a:	2200      	movs	r2, #0
 810201c:	6879      	ldr	r1, [r7, #4]
 810201e:	201d      	movs	r0, #29
 8102020:	f000 fc40 	bl	81028a4 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8102024:	201d      	movs	r0, #29
 8102026:	f000 fc57 	bl	81028d8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810202a:	4a29      	ldr	r2, [pc, #164]	@ (81020d0 <HAL_InitTick+0xc4>)
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8102030:	4b28      	ldr	r3, [pc, #160]	@ (81020d4 <HAL_InitTick+0xc8>)
 8102032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102036:	4a27      	ldr	r2, [pc, #156]	@ (81020d4 <HAL_InitTick+0xc8>)
 8102038:	f043 0302 	orr.w	r3, r3, #2
 810203c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102040:	4b24      	ldr	r3, [pc, #144]	@ (81020d4 <HAL_InitTick+0xc8>)
 8102042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102046:	f003 0302 	and.w	r3, r3, #2
 810204a:	60fb      	str	r3, [r7, #12]
 810204c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810204e:	f107 0210 	add.w	r2, r7, #16
 8102052:	f107 0314 	add.w	r3, r7, #20
 8102056:	4611      	mov	r1, r2
 8102058:	4618      	mov	r0, r3
 810205a:	f001 f9c3 	bl	81033e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102060:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102064:	2b00      	cmp	r3, #0
 8102066:	d106      	bne.n	8102076 <HAL_InitTick+0x6a>
 8102068:	e001      	b.n	810206e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810206a:	2301      	movs	r3, #1
 810206c:	e02b      	b.n	81020c6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810206e:	f001 f9a3 	bl	81033b8 <HAL_RCC_GetPCLK1Freq>
 8102072:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102074:	e004      	b.n	8102080 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102076:	f001 f99f 	bl	81033b8 <HAL_RCC_GetPCLK1Freq>
 810207a:	4603      	mov	r3, r0
 810207c:	005b      	lsls	r3, r3, #1
 810207e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102082:	4a15      	ldr	r2, [pc, #84]	@ (81020d8 <HAL_InitTick+0xcc>)
 8102084:	fba2 2303 	umull	r2, r3, r2, r3
 8102088:	0c9b      	lsrs	r3, r3, #18
 810208a:	3b01      	subs	r3, #1
 810208c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 810208e:	4b13      	ldr	r3, [pc, #76]	@ (81020dc <HAL_InitTick+0xd0>)
 8102090:	4a13      	ldr	r2, [pc, #76]	@ (81020e0 <HAL_InitTick+0xd4>)
 8102092:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8102094:	4b11      	ldr	r3, [pc, #68]	@ (81020dc <HAL_InitTick+0xd0>)
 8102096:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810209a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 810209c:	4a0f      	ldr	r2, [pc, #60]	@ (81020dc <HAL_InitTick+0xd0>)
 810209e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81020a0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 81020a2:	4b0e      	ldr	r3, [pc, #56]	@ (81020dc <HAL_InitTick+0xd0>)
 81020a4:	2200      	movs	r2, #0
 81020a6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81020a8:	4b0c      	ldr	r3, [pc, #48]	@ (81020dc <HAL_InitTick+0xd0>)
 81020aa:	2200      	movs	r2, #0
 81020ac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 81020ae:	480b      	ldr	r0, [pc, #44]	@ (81020dc <HAL_InitTick+0xd0>)
 81020b0:	f004 fda1 	bl	8106bf6 <HAL_TIM_Base_Init>
 81020b4:	4603      	mov	r3, r0
 81020b6:	2b00      	cmp	r3, #0
 81020b8:	d104      	bne.n	81020c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 81020ba:	4808      	ldr	r0, [pc, #32]	@ (81020dc <HAL_InitTick+0xd0>)
 81020bc:	f004 fdf2 	bl	8106ca4 <HAL_TIM_Base_Start_IT>
 81020c0:	4603      	mov	r3, r0
 81020c2:	e000      	b.n	81020c6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81020c4:	2301      	movs	r3, #1
}
 81020c6:	4618      	mov	r0, r3
 81020c8:	3740      	adds	r7, #64	@ 0x40
 81020ca:	46bd      	mov	sp, r7
 81020cc:	bd80      	pop	{r7, pc}
 81020ce:	bf00      	nop
 81020d0:	10000008 	.word	0x10000008
 81020d4:	58024400 	.word	0x58024400
 81020d8:	431bde83 	.word	0x431bde83
 81020dc:	10000924 	.word	0x10000924
 81020e0:	40000400 	.word	0x40000400

081020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81020e4:	b480      	push	{r7}
 81020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81020e8:	bf00      	nop
 81020ea:	e7fd      	b.n	81020e8 <NMI_Handler+0x4>

081020ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81020ec:	b480      	push	{r7}
 81020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81020f0:	bf00      	nop
 81020f2:	e7fd      	b.n	81020f0 <HardFault_Handler+0x4>

081020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81020f4:	b480      	push	{r7}
 81020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81020f8:	bf00      	nop
 81020fa:	e7fd      	b.n	81020f8 <MemManage_Handler+0x4>

081020fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81020fc:	b480      	push	{r7}
 81020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102100:	bf00      	nop
 8102102:	e7fd      	b.n	8102100 <BusFault_Handler+0x4>

08102104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102104:	b480      	push	{r7}
 8102106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102108:	bf00      	nop
 810210a:	e7fd      	b.n	8102108 <UsageFault_Handler+0x4>

0810210c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810210c:	b480      	push	{r7}
 810210e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102110:	bf00      	nop
 8102112:	46bd      	mov	sp, r7
 8102114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102118:	4770      	bx	lr

0810211a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 810211a:	b580      	push	{r7, lr}
 810211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 810211e:	2080      	movs	r0, #128	@ 0x80
 8102120:	f000 fdaa 	bl	8102c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8102124:	bf00      	nop
 8102126:	bd80      	pop	{r7, pc}

08102128 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8102128:	b580      	push	{r7, lr}
 810212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 810212c:	4802      	ldr	r0, [pc, #8]	@ (8102138 <TIM3_IRQHandler+0x10>)
 810212e:	f004 fe88 	bl	8106e42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8102132:	bf00      	nop
 8102134:	bd80      	pop	{r7, pc}
 8102136:	bf00      	nop
 8102138:	10000924 	.word	0x10000924

0810213c <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102140:	4802      	ldr	r0, [pc, #8]	@ (810214c <CEC_IRQHandler+0x10>)
 8102142:	f000 f9fb 	bl	810253c <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8102146:	bf00      	nop
 8102148:	bd80      	pop	{r7, pc}
 810214a:	bf00      	nop
 810214c:	1000009c 	.word	0x1000009c

08102150 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102150:	b580      	push	{r7, lr}
 8102152:	b086      	sub	sp, #24
 8102154:	af00      	add	r7, sp, #0
 8102156:	60f8      	str	r0, [r7, #12]
 8102158:	60b9      	str	r1, [r7, #8]
 810215a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810215c:	2300      	movs	r3, #0
 810215e:	617b      	str	r3, [r7, #20]
 8102160:	e00a      	b.n	8102178 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102162:	f3af 8000 	nop.w
 8102166:	4601      	mov	r1, r0
 8102168:	68bb      	ldr	r3, [r7, #8]
 810216a:	1c5a      	adds	r2, r3, #1
 810216c:	60ba      	str	r2, [r7, #8]
 810216e:	b2ca      	uxtb	r2, r1
 8102170:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102172:	697b      	ldr	r3, [r7, #20]
 8102174:	3301      	adds	r3, #1
 8102176:	617b      	str	r3, [r7, #20]
 8102178:	697a      	ldr	r2, [r7, #20]
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	429a      	cmp	r2, r3
 810217e:	dbf0      	blt.n	8102162 <_read+0x12>
  }

  return len;
 8102180:	687b      	ldr	r3, [r7, #4]
}
 8102182:	4618      	mov	r0, r3
 8102184:	3718      	adds	r7, #24
 8102186:	46bd      	mov	sp, r7
 8102188:	bd80      	pop	{r7, pc}

0810218a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810218a:	b580      	push	{r7, lr}
 810218c:	b086      	sub	sp, #24
 810218e:	af00      	add	r7, sp, #0
 8102190:	60f8      	str	r0, [r7, #12]
 8102192:	60b9      	str	r1, [r7, #8]
 8102194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102196:	2300      	movs	r3, #0
 8102198:	617b      	str	r3, [r7, #20]
 810219a:	e009      	b.n	81021b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810219c:	68bb      	ldr	r3, [r7, #8]
 810219e:	1c5a      	adds	r2, r3, #1
 81021a0:	60ba      	str	r2, [r7, #8]
 81021a2:	781b      	ldrb	r3, [r3, #0]
 81021a4:	4618      	mov	r0, r3
 81021a6:	f7fe f89b 	bl	81002e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81021aa:	697b      	ldr	r3, [r7, #20]
 81021ac:	3301      	adds	r3, #1
 81021ae:	617b      	str	r3, [r7, #20]
 81021b0:	697a      	ldr	r2, [r7, #20]
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	429a      	cmp	r2, r3
 81021b6:	dbf1      	blt.n	810219c <_write+0x12>
  }
  return len;
 81021b8:	687b      	ldr	r3, [r7, #4]
}
 81021ba:	4618      	mov	r0, r3
 81021bc:	3718      	adds	r7, #24
 81021be:	46bd      	mov	sp, r7
 81021c0:	bd80      	pop	{r7, pc}

081021c2 <_close>:

int _close(int file)
{
 81021c2:	b480      	push	{r7}
 81021c4:	b083      	sub	sp, #12
 81021c6:	af00      	add	r7, sp, #0
 81021c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81021ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 81021ce:	4618      	mov	r0, r3
 81021d0:	370c      	adds	r7, #12
 81021d2:	46bd      	mov	sp, r7
 81021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021d8:	4770      	bx	lr

081021da <_fstat>:


int _fstat(int file, struct stat *st)
{
 81021da:	b480      	push	{r7}
 81021dc:	b083      	sub	sp, #12
 81021de:	af00      	add	r7, sp, #0
 81021e0:	6078      	str	r0, [r7, #4]
 81021e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81021e4:	683b      	ldr	r3, [r7, #0]
 81021e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81021ea:	605a      	str	r2, [r3, #4]
  return 0;
 81021ec:	2300      	movs	r3, #0
}
 81021ee:	4618      	mov	r0, r3
 81021f0:	370c      	adds	r7, #12
 81021f2:	46bd      	mov	sp, r7
 81021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f8:	4770      	bx	lr

081021fa <_isatty>:

int _isatty(int file)
{
 81021fa:	b480      	push	{r7}
 81021fc:	b083      	sub	sp, #12
 81021fe:	af00      	add	r7, sp, #0
 8102200:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102202:	2301      	movs	r3, #1
}
 8102204:	4618      	mov	r0, r3
 8102206:	370c      	adds	r7, #12
 8102208:	46bd      	mov	sp, r7
 810220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220e:	4770      	bx	lr

08102210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102210:	b480      	push	{r7}
 8102212:	b085      	sub	sp, #20
 8102214:	af00      	add	r7, sp, #0
 8102216:	60f8      	str	r0, [r7, #12]
 8102218:	60b9      	str	r1, [r7, #8]
 810221a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810221c:	2300      	movs	r3, #0
}
 810221e:	4618      	mov	r0, r3
 8102220:	3714      	adds	r7, #20
 8102222:	46bd      	mov	sp, r7
 8102224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102228:	4770      	bx	lr
	...

0810222c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810222c:	b580      	push	{r7, lr}
 810222e:	b086      	sub	sp, #24
 8102230:	af00      	add	r7, sp, #0
 8102232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102234:	4a14      	ldr	r2, [pc, #80]	@ (8102288 <_sbrk+0x5c>)
 8102236:	4b15      	ldr	r3, [pc, #84]	@ (810228c <_sbrk+0x60>)
 8102238:	1ad3      	subs	r3, r2, r3
 810223a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810223c:	697b      	ldr	r3, [r7, #20]
 810223e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102240:	4b13      	ldr	r3, [pc, #76]	@ (8102290 <_sbrk+0x64>)
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	2b00      	cmp	r3, #0
 8102246:	d102      	bne.n	810224e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102248:	4b11      	ldr	r3, [pc, #68]	@ (8102290 <_sbrk+0x64>)
 810224a:	4a12      	ldr	r2, [pc, #72]	@ (8102294 <_sbrk+0x68>)
 810224c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810224e:	4b10      	ldr	r3, [pc, #64]	@ (8102290 <_sbrk+0x64>)
 8102250:	681a      	ldr	r2, [r3, #0]
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	4413      	add	r3, r2
 8102256:	693a      	ldr	r2, [r7, #16]
 8102258:	429a      	cmp	r2, r3
 810225a:	d207      	bcs.n	810226c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810225c:	f006 fdaa 	bl	8108db4 <__errno>
 8102260:	4603      	mov	r3, r0
 8102262:	220c      	movs	r2, #12
 8102264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102266:	f04f 33ff 	mov.w	r3, #4294967295
 810226a:	e009      	b.n	8102280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810226c:	4b08      	ldr	r3, [pc, #32]	@ (8102290 <_sbrk+0x64>)
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102272:	4b07      	ldr	r3, [pc, #28]	@ (8102290 <_sbrk+0x64>)
 8102274:	681a      	ldr	r2, [r3, #0]
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	4413      	add	r3, r2
 810227a:	4a05      	ldr	r2, [pc, #20]	@ (8102290 <_sbrk+0x64>)
 810227c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810227e:	68fb      	ldr	r3, [r7, #12]
}
 8102280:	4618      	mov	r0, r3
 8102282:	3718      	adds	r7, #24
 8102284:	46bd      	mov	sp, r7
 8102286:	bd80      	pop	{r7, pc}
 8102288:	10048000 	.word	0x10048000
 810228c:	00000400 	.word	0x00000400
 8102290:	10000970 	.word	0x10000970
 8102294:	10000f50 	.word	0x10000f50

08102298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102298:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81022d4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 810229c:	f7fe f8e2 	bl	8100464 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81022a0:	f7fe f8c8 	bl	8100434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81022a4:	480c      	ldr	r0, [pc, #48]	@ (81022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81022a6:	490d      	ldr	r1, [pc, #52]	@ (81022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81022a8:	4a0d      	ldr	r2, [pc, #52]	@ (81022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81022ac:	e002      	b.n	81022b4 <LoopCopyDataInit>

081022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81022b2:	3304      	adds	r3, #4

081022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81022b8:	d3f9      	bcc.n	81022ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81022ba:	4a0a      	ldr	r2, [pc, #40]	@ (81022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81022bc:	4c0a      	ldr	r4, [pc, #40]	@ (81022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 81022c0:	e001      	b.n	81022c6 <LoopFillZerobss>

081022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81022c4:	3204      	adds	r2, #4

081022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81022c8:	d3fb      	bcc.n	81022c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81022ca:	f006 fd79 	bl	8108dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81022ce:	f7fe fbc1 	bl	8100a54 <main>
  bx  lr
 81022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81022d4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81022d8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81022dc:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 81022e0:	081092ec 	.word	0x081092ec
  ldr r2, =_sbss
 81022e4:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 81022e8:	10000f50 	.word	0x10000f50

081022ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81022ec:	e7fe      	b.n	81022ec <ADC3_IRQHandler>
	...

081022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81022f0:	b580      	push	{r7, lr}
 81022f2:	b082      	sub	sp, #8
 81022f4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81022f6:	4b28      	ldr	r3, [pc, #160]	@ (8102398 <HAL_Init+0xa8>)
 81022f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81022fc:	4a26      	ldr	r2, [pc, #152]	@ (8102398 <HAL_Init+0xa8>)
 81022fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102302:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102306:	4b24      	ldr	r3, [pc, #144]	@ (8102398 <HAL_Init+0xa8>)
 8102308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810230c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102310:	603b      	str	r3, [r7, #0]
 8102312:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102314:	4b21      	ldr	r3, [pc, #132]	@ (810239c <HAL_Init+0xac>)
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810231c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102320:	4a1e      	ldr	r2, [pc, #120]	@ (810239c <HAL_Init+0xac>)
 8102322:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102326:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102328:	4b1c      	ldr	r3, [pc, #112]	@ (810239c <HAL_Init+0xac>)
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	4a1b      	ldr	r2, [pc, #108]	@ (810239c <HAL_Init+0xac>)
 810232e:	f043 0301 	orr.w	r3, r3, #1
 8102332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102334:	2003      	movs	r0, #3
 8102336:	f000 faaa 	bl	810288e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810233a:	f000 fe91 	bl	8103060 <HAL_RCC_GetSysClockFreq>
 810233e:	4602      	mov	r2, r0
 8102340:	4b15      	ldr	r3, [pc, #84]	@ (8102398 <HAL_Init+0xa8>)
 8102342:	699b      	ldr	r3, [r3, #24]
 8102344:	0a1b      	lsrs	r3, r3, #8
 8102346:	f003 030f 	and.w	r3, r3, #15
 810234a:	4915      	ldr	r1, [pc, #84]	@ (81023a0 <HAL_Init+0xb0>)
 810234c:	5ccb      	ldrb	r3, [r1, r3]
 810234e:	f003 031f 	and.w	r3, r3, #31
 8102352:	fa22 f303 	lsr.w	r3, r2, r3
 8102356:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102358:	4b0f      	ldr	r3, [pc, #60]	@ (8102398 <HAL_Init+0xa8>)
 810235a:	699b      	ldr	r3, [r3, #24]
 810235c:	f003 030f 	and.w	r3, r3, #15
 8102360:	4a0f      	ldr	r2, [pc, #60]	@ (81023a0 <HAL_Init+0xb0>)
 8102362:	5cd3      	ldrb	r3, [r2, r3]
 8102364:	f003 031f 	and.w	r3, r3, #31
 8102368:	687a      	ldr	r2, [r7, #4]
 810236a:	fa22 f303 	lsr.w	r3, r2, r3
 810236e:	4a0d      	ldr	r2, [pc, #52]	@ (81023a4 <HAL_Init+0xb4>)
 8102370:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102372:	4b0c      	ldr	r3, [pc, #48]	@ (81023a4 <HAL_Init+0xb4>)
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	4a0c      	ldr	r2, [pc, #48]	@ (81023a8 <HAL_Init+0xb8>)
 8102378:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810237a:	200f      	movs	r0, #15
 810237c:	f7ff fe46 	bl	810200c <HAL_InitTick>
 8102380:	4603      	mov	r3, r0
 8102382:	2b00      	cmp	r3, #0
 8102384:	d001      	beq.n	810238a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102386:	2301      	movs	r3, #1
 8102388:	e002      	b.n	8102390 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810238a:	f7ff f93f 	bl	810160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810238e:	2300      	movs	r3, #0
}
 8102390:	4618      	mov	r0, r3
 8102392:	3708      	adds	r7, #8
 8102394:	46bd      	mov	sp, r7
 8102396:	bd80      	pop	{r7, pc}
 8102398:	58024400 	.word	0x58024400
 810239c:	40024400 	.word	0x40024400
 81023a0:	081092d4 	.word	0x081092d4
 81023a4:	10000004 	.word	0x10000004
 81023a8:	10000000 	.word	0x10000000

081023ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81023ac:	b480      	push	{r7}
 81023ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81023b0:	4b06      	ldr	r3, [pc, #24]	@ (81023cc <HAL_IncTick+0x20>)
 81023b2:	781b      	ldrb	r3, [r3, #0]
 81023b4:	461a      	mov	r2, r3
 81023b6:	4b06      	ldr	r3, [pc, #24]	@ (81023d0 <HAL_IncTick+0x24>)
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4413      	add	r3, r2
 81023bc:	4a04      	ldr	r2, [pc, #16]	@ (81023d0 <HAL_IncTick+0x24>)
 81023be:	6013      	str	r3, [r2, #0]
}
 81023c0:	bf00      	nop
 81023c2:	46bd      	mov	sp, r7
 81023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c8:	4770      	bx	lr
 81023ca:	bf00      	nop
 81023cc:	1000000c 	.word	0x1000000c
 81023d0:	10000974 	.word	0x10000974

081023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81023d4:	b480      	push	{r7}
 81023d6:	af00      	add	r7, sp, #0
  return uwTick;
 81023d8:	4b03      	ldr	r3, [pc, #12]	@ (81023e8 <HAL_GetTick+0x14>)
 81023da:	681b      	ldr	r3, [r3, #0]
}
 81023dc:	4618      	mov	r0, r3
 81023de:	46bd      	mov	sp, r7
 81023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e4:	4770      	bx	lr
 81023e6:	bf00      	nop
 81023e8:	10000974 	.word	0x10000974

081023ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81023ec:	b580      	push	{r7, lr}
 81023ee:	b084      	sub	sp, #16
 81023f0:	af00      	add	r7, sp, #0
 81023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81023f4:	f7ff ffee 	bl	81023d4 <HAL_GetTick>
 81023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81023fe:	68fb      	ldr	r3, [r7, #12]
 8102400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102404:	d005      	beq.n	8102412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102406:	4b0a      	ldr	r3, [pc, #40]	@ (8102430 <HAL_Delay+0x44>)
 8102408:	781b      	ldrb	r3, [r3, #0]
 810240a:	461a      	mov	r2, r3
 810240c:	68fb      	ldr	r3, [r7, #12]
 810240e:	4413      	add	r3, r2
 8102410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102412:	bf00      	nop
 8102414:	f7ff ffde 	bl	81023d4 <HAL_GetTick>
 8102418:	4602      	mov	r2, r0
 810241a:	68bb      	ldr	r3, [r7, #8]
 810241c:	1ad3      	subs	r3, r2, r3
 810241e:	68fa      	ldr	r2, [r7, #12]
 8102420:	429a      	cmp	r2, r3
 8102422:	d8f7      	bhi.n	8102414 <HAL_Delay+0x28>
  {
  }
}
 8102424:	bf00      	nop
 8102426:	bf00      	nop
 8102428:	3710      	adds	r7, #16
 810242a:	46bd      	mov	sp, r7
 810242c:	bd80      	pop	{r7, pc}
 810242e:	bf00      	nop
 8102430:	1000000c 	.word	0x1000000c

08102434 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102434:	b480      	push	{r7}
 8102436:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102438:	4b03      	ldr	r3, [pc, #12]	@ (8102448 <HAL_GetREVID+0x14>)
 810243a:	681b      	ldr	r3, [r3, #0]
 810243c:	0c1b      	lsrs	r3, r3, #16
}
 810243e:	4618      	mov	r0, r3
 8102440:	46bd      	mov	sp, r7
 8102442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102446:	4770      	bx	lr
 8102448:	5c001000 	.word	0x5c001000

0810244c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 810244c:	b480      	push	{r7}
 810244e:	b083      	sub	sp, #12
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
 8102454:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102456:	4b07      	ldr	r3, [pc, #28]	@ (8102474 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102458:	685a      	ldr	r2, [r3, #4]
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	43db      	mvns	r3, r3
 810245e:	401a      	ands	r2, r3
 8102460:	4904      	ldr	r1, [pc, #16]	@ (8102474 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102462:	683b      	ldr	r3, [r7, #0]
 8102464:	4313      	orrs	r3, r2
 8102466:	604b      	str	r3, [r1, #4]
}
 8102468:	bf00      	nop
 810246a:	370c      	adds	r7, #12
 810246c:	46bd      	mov	sp, r7
 810246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102472:	4770      	bx	lr
 8102474:	58000400 	.word	0x58000400

08102478 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8102478:	b580      	push	{r7, lr}
 810247a:	b082      	sub	sp, #8
 810247c:	af00      	add	r7, sp, #0
 810247e:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	2b00      	cmp	r3, #0
 8102484:	d003      	beq.n	810248e <HAL_CEC_Init+0x16>
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810248a:	2b00      	cmp	r3, #0
 810248c:	d101      	bne.n	8102492 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 810248e:	2301      	movs	r3, #1
 8102490:	e050      	b.n	8102534 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8102492:	687b      	ldr	r3, [r7, #4]
 8102494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102496:	2b00      	cmp	r3, #0
 8102498:	d106      	bne.n	81024a8 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	2200      	movs	r2, #0
 810249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 81024a2:	6878      	ldr	r0, [r7, #4]
 81024a4:	f7ff f8d8 	bl	8101658 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	2224      	movs	r2, #36	@ 0x24
 81024ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	681b      	ldr	r3, [r3, #0]
 81024b2:	681a      	ldr	r2, [r3, #0]
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	f022 0201 	bic.w	r2, r2, #1
 81024bc:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	685a      	ldr	r2, [r3, #4]
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	689b      	ldr	r3, [r3, #8]
 81024c6:	431a      	orrs	r2, r3
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	68db      	ldr	r3, [r3, #12]
 81024cc:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81024d2:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	695b      	ldr	r3, [r3, #20]
 81024d8:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81024de:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81024e4:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 81024ea:	041b      	lsls	r3, r3, #16
 81024ec:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81024f8:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81024fa:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	681b      	ldr	r3, [r3, #0]
 8102500:	695b      	ldr	r3, [r3, #20]
 8102502:	687a      	ldr	r2, [r7, #4]
 8102504:	6812      	ldr	r2, [r2, #0]
 8102506:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 810250a:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 810250e:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	681a      	ldr	r2, [r3, #0]
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	f042 0201 	orr.w	r2, r2, #1
 810251e:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	2200      	movs	r2, #0
 8102524:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	2220      	movs	r2, #32
 810252a:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	2220      	movs	r2, #32
 8102530:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8102532:	2300      	movs	r3, #0
}
 8102534:	4618      	mov	r0, r3
 8102536:	3708      	adds	r7, #8
 8102538:	46bd      	mov	sp, r7
 810253a:	bd80      	pop	{r7, pc}

0810253c <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 810253c:	b580      	push	{r7, lr}
 810253e:	b084      	sub	sp, #16
 8102540:	af00      	add	r7, sp, #0
 8102542:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	691b      	ldr	r3, [r3, #16]
 810254a:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 810254c:	68fb      	ldr	r3, [r7, #12]
 810254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102552:	2b00      	cmp	r3, #0
 8102554:	d00a      	beq.n	810256c <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	2280      	movs	r2, #128	@ 0x80
 810255a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	691a      	ldr	r2, [r3, #16]
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 810256a:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 810256c:	68fb      	ldr	r3, [r7, #12]
 810256e:	f003 0301 	and.w	r3, r3, #1
 8102572:	2b00      	cmp	r3, #0
 8102574:	d01c      	beq.n	81025b0 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	2222      	movs	r2, #34	@ 0x22
 810257a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102580:	3301      	adds	r3, #1
 8102582:	b29a      	uxth	r2, r3
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	68da      	ldr	r2, [r3, #12]
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102592:	b2d2      	uxtb	r2, r2
 8102594:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810259a:	1c5a      	adds	r2, r3, #1
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	691a      	ldr	r2, [r3, #16]
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	f042 0201 	orr.w	r2, r2, #1
 81025ae:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	f003 0302 	and.w	r3, r3, #2
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d01e      	beq.n	81025f8 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	691a      	ldr	r2, [r3, #16]
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f042 0202 	orr.w	r2, r2, #2
 81025c8:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	2220      	movs	r2, #32
 81025ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	2200      	movs	r2, #0
 81025d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81025de:	425b      	negs	r3, r3
 81025e0:	441a      	add	r2, r3
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81025ea:	4619      	mov	r1, r3
 81025ec:	6878      	ldr	r0, [r7, #4]
 81025ee:	f000 f88c 	bl	810270a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	2200      	movs	r2, #0
 81025f6:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 81025f8:	68fb      	ldr	r3, [r7, #12]
 81025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d024      	beq.n	810264c <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102606:	3b01      	subs	r3, #1
 8102608:	b29a      	uxth	r2, r3
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102612:	2b00      	cmp	r3, #0
 8102614:	d107      	bne.n	8102626 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	681a      	ldr	r2, [r3, #0]
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	681b      	ldr	r3, [r3, #0]
 8102620:	f042 0204 	orr.w	r2, r2, #4
 8102624:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810262a:	781a      	ldrb	r2, [r3, #0]
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102636:	1c5a      	adds	r2, r3, #1
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	691a      	ldr	r2, [r3, #16]
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810264a:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 810264c:	68fb      	ldr	r3, [r7, #12]
 810264e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102652:	2b00      	cmp	r3, #0
 8102654:	d014      	beq.n	8102680 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	691a      	ldr	r2, [r3, #16]
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102664:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	2220      	movs	r2, #32
 810266a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	2200      	movs	r2, #0
 8102670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	2200      	movs	r2, #0
 8102678:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 810267a:	6878      	ldr	r0, [r7, #4]
 810267c:	f000 f83b 	bl	81026f6 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8102680:	68fa      	ldr	r2, [r7, #12]
 8102682:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8102686:	4013      	ands	r3, r2
 8102688:	2b00      	cmp	r3, #0
 810268a:	d030      	beq.n	81026ee <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	68fa      	ldr	r2, [r7, #12]
 8102690:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	691b      	ldr	r3, [r3, #16]
 8102698:	687a      	ldr	r2, [r7, #4]
 810269a:	6812      	ldr	r2, [r2, #0]
 810269c:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 81026a0:	f043 031c 	orr.w	r3, r3, #28
 81026a4:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 81026ac:	2b00      	cmp	r3, #0
 81026ae:	d00e      	beq.n	81026ce <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81026b8:	425b      	negs	r3, r3
 81026ba:	441a      	add	r2, r3
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	2200      	movs	r2, #0
 81026c4:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	2220      	movs	r2, #32
 81026ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 81026cc:	e00c      	b.n	81026e8 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d107      	bne.n	81026e8 <HAL_CEC_IRQHandler+0x1ac>
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d002      	beq.n	81026e8 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	2220      	movs	r2, #32
 81026e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 81026e8:	6878      	ldr	r0, [r7, #4]
 81026ea:	f000 f819 	bl	8102720 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 81026ee:	bf00      	nop
 81026f0:	3710      	adds	r7, #16
 81026f2:	46bd      	mov	sp, r7
 81026f4:	bd80      	pop	{r7, pc}

081026f6 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 81026f6:	b480      	push	{r7}
 81026f8:	b083      	sub	sp, #12
 81026fa:	af00      	add	r7, sp, #0
 81026fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 81026fe:	bf00      	nop
 8102700:	370c      	adds	r7, #12
 8102702:	46bd      	mov	sp, r7
 8102704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102708:	4770      	bx	lr

0810270a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 810270a:	b480      	push	{r7}
 810270c:	b083      	sub	sp, #12
 810270e:	af00      	add	r7, sp, #0
 8102710:	6078      	str	r0, [r7, #4]
 8102712:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102714:	bf00      	nop
 8102716:	370c      	adds	r7, #12
 8102718:	46bd      	mov	sp, r7
 810271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810271e:	4770      	bx	lr

08102720 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102720:	b480      	push	{r7}
 8102722:	b083      	sub	sp, #12
 8102724:	af00      	add	r7, sp, #0
 8102726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8102728:	bf00      	nop
 810272a:	370c      	adds	r7, #12
 810272c:	46bd      	mov	sp, r7
 810272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102732:	4770      	bx	lr

08102734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102734:	b480      	push	{r7}
 8102736:	b085      	sub	sp, #20
 8102738:	af00      	add	r7, sp, #0
 810273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	f003 0307 	and.w	r3, r3, #7
 8102742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102744:	4b0c      	ldr	r3, [pc, #48]	@ (8102778 <__NVIC_SetPriorityGrouping+0x44>)
 8102746:	68db      	ldr	r3, [r3, #12]
 8102748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810274a:	68ba      	ldr	r2, [r7, #8]
 810274c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102750:	4013      	ands	r3, r2
 8102752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102754:	68fb      	ldr	r3, [r7, #12]
 8102756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102758:	68bb      	ldr	r3, [r7, #8]
 810275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810275c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102766:	4a04      	ldr	r2, [pc, #16]	@ (8102778 <__NVIC_SetPriorityGrouping+0x44>)
 8102768:	68bb      	ldr	r3, [r7, #8]
 810276a:	60d3      	str	r3, [r2, #12]
}
 810276c:	bf00      	nop
 810276e:	3714      	adds	r7, #20
 8102770:	46bd      	mov	sp, r7
 8102772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102776:	4770      	bx	lr
 8102778:	e000ed00 	.word	0xe000ed00

0810277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810277c:	b480      	push	{r7}
 810277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102780:	4b04      	ldr	r3, [pc, #16]	@ (8102794 <__NVIC_GetPriorityGrouping+0x18>)
 8102782:	68db      	ldr	r3, [r3, #12]
 8102784:	0a1b      	lsrs	r3, r3, #8
 8102786:	f003 0307 	and.w	r3, r3, #7
}
 810278a:	4618      	mov	r0, r3
 810278c:	46bd      	mov	sp, r7
 810278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102792:	4770      	bx	lr
 8102794:	e000ed00 	.word	0xe000ed00

08102798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102798:	b480      	push	{r7}
 810279a:	b083      	sub	sp, #12
 810279c:	af00      	add	r7, sp, #0
 810279e:	4603      	mov	r3, r0
 81027a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81027a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027a6:	2b00      	cmp	r3, #0
 81027a8:	db0b      	blt.n	81027c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81027aa:	88fb      	ldrh	r3, [r7, #6]
 81027ac:	f003 021f 	and.w	r2, r3, #31
 81027b0:	4907      	ldr	r1, [pc, #28]	@ (81027d0 <__NVIC_EnableIRQ+0x38>)
 81027b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027b6:	095b      	lsrs	r3, r3, #5
 81027b8:	2001      	movs	r0, #1
 81027ba:	fa00 f202 	lsl.w	r2, r0, r2
 81027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81027c2:	bf00      	nop
 81027c4:	370c      	adds	r7, #12
 81027c6:	46bd      	mov	sp, r7
 81027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027cc:	4770      	bx	lr
 81027ce:	bf00      	nop
 81027d0:	e000e100 	.word	0xe000e100

081027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81027d4:	b480      	push	{r7}
 81027d6:	b083      	sub	sp, #12
 81027d8:	af00      	add	r7, sp, #0
 81027da:	4603      	mov	r3, r0
 81027dc:	6039      	str	r1, [r7, #0]
 81027de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81027e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027e4:	2b00      	cmp	r3, #0
 81027e6:	db0a      	blt.n	81027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81027e8:	683b      	ldr	r3, [r7, #0]
 81027ea:	b2da      	uxtb	r2, r3
 81027ec:	490c      	ldr	r1, [pc, #48]	@ (8102820 <__NVIC_SetPriority+0x4c>)
 81027ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027f2:	0112      	lsls	r2, r2, #4
 81027f4:	b2d2      	uxtb	r2, r2
 81027f6:	440b      	add	r3, r1
 81027f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81027fc:	e00a      	b.n	8102814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81027fe:	683b      	ldr	r3, [r7, #0]
 8102800:	b2da      	uxtb	r2, r3
 8102802:	4908      	ldr	r1, [pc, #32]	@ (8102824 <__NVIC_SetPriority+0x50>)
 8102804:	88fb      	ldrh	r3, [r7, #6]
 8102806:	f003 030f 	and.w	r3, r3, #15
 810280a:	3b04      	subs	r3, #4
 810280c:	0112      	lsls	r2, r2, #4
 810280e:	b2d2      	uxtb	r2, r2
 8102810:	440b      	add	r3, r1
 8102812:	761a      	strb	r2, [r3, #24]
}
 8102814:	bf00      	nop
 8102816:	370c      	adds	r7, #12
 8102818:	46bd      	mov	sp, r7
 810281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810281e:	4770      	bx	lr
 8102820:	e000e100 	.word	0xe000e100
 8102824:	e000ed00 	.word	0xe000ed00

08102828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102828:	b480      	push	{r7}
 810282a:	b089      	sub	sp, #36	@ 0x24
 810282c:	af00      	add	r7, sp, #0
 810282e:	60f8      	str	r0, [r7, #12]
 8102830:	60b9      	str	r1, [r7, #8]
 8102832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	f003 0307 	and.w	r3, r3, #7
 810283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810283c:	69fb      	ldr	r3, [r7, #28]
 810283e:	f1c3 0307 	rsb	r3, r3, #7
 8102842:	2b04      	cmp	r3, #4
 8102844:	bf28      	it	cs
 8102846:	2304      	movcs	r3, #4
 8102848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810284a:	69fb      	ldr	r3, [r7, #28]
 810284c:	3304      	adds	r3, #4
 810284e:	2b06      	cmp	r3, #6
 8102850:	d902      	bls.n	8102858 <NVIC_EncodePriority+0x30>
 8102852:	69fb      	ldr	r3, [r7, #28]
 8102854:	3b03      	subs	r3, #3
 8102856:	e000      	b.n	810285a <NVIC_EncodePriority+0x32>
 8102858:	2300      	movs	r3, #0
 810285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810285c:	f04f 32ff 	mov.w	r2, #4294967295
 8102860:	69bb      	ldr	r3, [r7, #24]
 8102862:	fa02 f303 	lsl.w	r3, r2, r3
 8102866:	43da      	mvns	r2, r3
 8102868:	68bb      	ldr	r3, [r7, #8]
 810286a:	401a      	ands	r2, r3
 810286c:	697b      	ldr	r3, [r7, #20]
 810286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102870:	f04f 31ff 	mov.w	r1, #4294967295
 8102874:	697b      	ldr	r3, [r7, #20]
 8102876:	fa01 f303 	lsl.w	r3, r1, r3
 810287a:	43d9      	mvns	r1, r3
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102880:	4313      	orrs	r3, r2
         );
}
 8102882:	4618      	mov	r0, r3
 8102884:	3724      	adds	r7, #36	@ 0x24
 8102886:	46bd      	mov	sp, r7
 8102888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810288c:	4770      	bx	lr

0810288e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810288e:	b580      	push	{r7, lr}
 8102890:	b082      	sub	sp, #8
 8102892:	af00      	add	r7, sp, #0
 8102894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102896:	6878      	ldr	r0, [r7, #4]
 8102898:	f7ff ff4c 	bl	8102734 <__NVIC_SetPriorityGrouping>
}
 810289c:	bf00      	nop
 810289e:	3708      	adds	r7, #8
 81028a0:	46bd      	mov	sp, r7
 81028a2:	bd80      	pop	{r7, pc}

081028a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81028a4:	b580      	push	{r7, lr}
 81028a6:	b086      	sub	sp, #24
 81028a8:	af00      	add	r7, sp, #0
 81028aa:	4603      	mov	r3, r0
 81028ac:	60b9      	str	r1, [r7, #8]
 81028ae:	607a      	str	r2, [r7, #4]
 81028b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81028b2:	f7ff ff63 	bl	810277c <__NVIC_GetPriorityGrouping>
 81028b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81028b8:	687a      	ldr	r2, [r7, #4]
 81028ba:	68b9      	ldr	r1, [r7, #8]
 81028bc:	6978      	ldr	r0, [r7, #20]
 81028be:	f7ff ffb3 	bl	8102828 <NVIC_EncodePriority>
 81028c2:	4602      	mov	r2, r0
 81028c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81028c8:	4611      	mov	r1, r2
 81028ca:	4618      	mov	r0, r3
 81028cc:	f7ff ff82 	bl	81027d4 <__NVIC_SetPriority>
}
 81028d0:	bf00      	nop
 81028d2:	3718      	adds	r7, #24
 81028d4:	46bd      	mov	sp, r7
 81028d6:	bd80      	pop	{r7, pc}

081028d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b082      	sub	sp, #8
 81028dc:	af00      	add	r7, sp, #0
 81028de:	4603      	mov	r3, r0
 81028e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81028e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81028e6:	4618      	mov	r0, r3
 81028e8:	f7ff ff56 	bl	8102798 <__NVIC_EnableIRQ>
}
 81028ec:	bf00      	nop
 81028ee:	3708      	adds	r7, #8
 81028f0:	46bd      	mov	sp, r7
 81028f2:	bd80      	pop	{r7, pc}

081028f4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81028f4:	b480      	push	{r7}
 81028f6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81028f8:	4b06      	ldr	r3, [pc, #24]	@ (8102914 <HAL_GetCurrentCPUID+0x20>)
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102900:	2b70      	cmp	r3, #112	@ 0x70
 8102902:	d101      	bne.n	8102908 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102904:	2303      	movs	r3, #3
 8102906:	e000      	b.n	810290a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8102908:	2301      	movs	r3, #1
  }
}
 810290a:	4618      	mov	r0, r3
 810290c:	46bd      	mov	sp, r7
 810290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102912:	4770      	bx	lr
 8102914:	e000ed00 	.word	0xe000ed00

08102918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102918:	b480      	push	{r7}
 810291a:	b089      	sub	sp, #36	@ 0x24
 810291c:	af00      	add	r7, sp, #0
 810291e:	6078      	str	r0, [r7, #4]
 8102920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102922:	2300      	movs	r3, #0
 8102924:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102926:	4b89      	ldr	r3, [pc, #548]	@ (8102b4c <HAL_GPIO_Init+0x234>)
 8102928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810292a:	e194      	b.n	8102c56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810292c:	683b      	ldr	r3, [r7, #0]
 810292e:	681a      	ldr	r2, [r3, #0]
 8102930:	2101      	movs	r1, #1
 8102932:	69fb      	ldr	r3, [r7, #28]
 8102934:	fa01 f303 	lsl.w	r3, r1, r3
 8102938:	4013      	ands	r3, r2
 810293a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810293c:	693b      	ldr	r3, [r7, #16]
 810293e:	2b00      	cmp	r3, #0
 8102940:	f000 8186 	beq.w	8102c50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102944:	683b      	ldr	r3, [r7, #0]
 8102946:	685b      	ldr	r3, [r3, #4]
 8102948:	f003 0303 	and.w	r3, r3, #3
 810294c:	2b01      	cmp	r3, #1
 810294e:	d005      	beq.n	810295c <HAL_GPIO_Init+0x44>
 8102950:	683b      	ldr	r3, [r7, #0]
 8102952:	685b      	ldr	r3, [r3, #4]
 8102954:	f003 0303 	and.w	r3, r3, #3
 8102958:	2b02      	cmp	r3, #2
 810295a:	d130      	bne.n	81029be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	689b      	ldr	r3, [r3, #8]
 8102960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102962:	69fb      	ldr	r3, [r7, #28]
 8102964:	005b      	lsls	r3, r3, #1
 8102966:	2203      	movs	r2, #3
 8102968:	fa02 f303 	lsl.w	r3, r2, r3
 810296c:	43db      	mvns	r3, r3
 810296e:	69ba      	ldr	r2, [r7, #24]
 8102970:	4013      	ands	r3, r2
 8102972:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102974:	683b      	ldr	r3, [r7, #0]
 8102976:	68da      	ldr	r2, [r3, #12]
 8102978:	69fb      	ldr	r3, [r7, #28]
 810297a:	005b      	lsls	r3, r3, #1
 810297c:	fa02 f303 	lsl.w	r3, r2, r3
 8102980:	69ba      	ldr	r2, [r7, #24]
 8102982:	4313      	orrs	r3, r2
 8102984:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	69ba      	ldr	r2, [r7, #24]
 810298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	685b      	ldr	r3, [r3, #4]
 8102990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102992:	2201      	movs	r2, #1
 8102994:	69fb      	ldr	r3, [r7, #28]
 8102996:	fa02 f303 	lsl.w	r3, r2, r3
 810299a:	43db      	mvns	r3, r3
 810299c:	69ba      	ldr	r2, [r7, #24]
 810299e:	4013      	ands	r3, r2
 81029a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81029a2:	683b      	ldr	r3, [r7, #0]
 81029a4:	685b      	ldr	r3, [r3, #4]
 81029a6:	091b      	lsrs	r3, r3, #4
 81029a8:	f003 0201 	and.w	r2, r3, #1
 81029ac:	69fb      	ldr	r3, [r7, #28]
 81029ae:	fa02 f303 	lsl.w	r3, r2, r3
 81029b2:	69ba      	ldr	r2, [r7, #24]
 81029b4:	4313      	orrs	r3, r2
 81029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	69ba      	ldr	r2, [r7, #24]
 81029bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81029be:	683b      	ldr	r3, [r7, #0]
 81029c0:	685b      	ldr	r3, [r3, #4]
 81029c2:	f003 0303 	and.w	r3, r3, #3
 81029c6:	2b03      	cmp	r3, #3
 81029c8:	d017      	beq.n	81029fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	68db      	ldr	r3, [r3, #12]
 81029ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81029d0:	69fb      	ldr	r3, [r7, #28]
 81029d2:	005b      	lsls	r3, r3, #1
 81029d4:	2203      	movs	r2, #3
 81029d6:	fa02 f303 	lsl.w	r3, r2, r3
 81029da:	43db      	mvns	r3, r3
 81029dc:	69ba      	ldr	r2, [r7, #24]
 81029de:	4013      	ands	r3, r2
 81029e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81029e2:	683b      	ldr	r3, [r7, #0]
 81029e4:	689a      	ldr	r2, [r3, #8]
 81029e6:	69fb      	ldr	r3, [r7, #28]
 81029e8:	005b      	lsls	r3, r3, #1
 81029ea:	fa02 f303 	lsl.w	r3, r2, r3
 81029ee:	69ba      	ldr	r2, [r7, #24]
 81029f0:	4313      	orrs	r3, r2
 81029f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	69ba      	ldr	r2, [r7, #24]
 81029f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81029fa:	683b      	ldr	r3, [r7, #0]
 81029fc:	685b      	ldr	r3, [r3, #4]
 81029fe:	f003 0303 	and.w	r3, r3, #3
 8102a02:	2b02      	cmp	r3, #2
 8102a04:	d123      	bne.n	8102a4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102a06:	69fb      	ldr	r3, [r7, #28]
 8102a08:	08da      	lsrs	r2, r3, #3
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	3208      	adds	r2, #8
 8102a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102a14:	69fb      	ldr	r3, [r7, #28]
 8102a16:	f003 0307 	and.w	r3, r3, #7
 8102a1a:	009b      	lsls	r3, r3, #2
 8102a1c:	220f      	movs	r2, #15
 8102a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102a22:	43db      	mvns	r3, r3
 8102a24:	69ba      	ldr	r2, [r7, #24]
 8102a26:	4013      	ands	r3, r2
 8102a28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102a2a:	683b      	ldr	r3, [r7, #0]
 8102a2c:	691a      	ldr	r2, [r3, #16]
 8102a2e:	69fb      	ldr	r3, [r7, #28]
 8102a30:	f003 0307 	and.w	r3, r3, #7
 8102a34:	009b      	lsls	r3, r3, #2
 8102a36:	fa02 f303 	lsl.w	r3, r2, r3
 8102a3a:	69ba      	ldr	r2, [r7, #24]
 8102a3c:	4313      	orrs	r3, r2
 8102a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102a40:	69fb      	ldr	r3, [r7, #28]
 8102a42:	08da      	lsrs	r2, r3, #3
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	3208      	adds	r2, #8
 8102a48:	69b9      	ldr	r1, [r7, #24]
 8102a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102a54:	69fb      	ldr	r3, [r7, #28]
 8102a56:	005b      	lsls	r3, r3, #1
 8102a58:	2203      	movs	r2, #3
 8102a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8102a5e:	43db      	mvns	r3, r3
 8102a60:	69ba      	ldr	r2, [r7, #24]
 8102a62:	4013      	ands	r3, r2
 8102a64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102a66:	683b      	ldr	r3, [r7, #0]
 8102a68:	685b      	ldr	r3, [r3, #4]
 8102a6a:	f003 0203 	and.w	r2, r3, #3
 8102a6e:	69fb      	ldr	r3, [r7, #28]
 8102a70:	005b      	lsls	r3, r3, #1
 8102a72:	fa02 f303 	lsl.w	r3, r2, r3
 8102a76:	69ba      	ldr	r2, [r7, #24]
 8102a78:	4313      	orrs	r3, r2
 8102a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	69ba      	ldr	r2, [r7, #24]
 8102a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102a82:	683b      	ldr	r3, [r7, #0]
 8102a84:	685b      	ldr	r3, [r3, #4]
 8102a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	f000 80e0 	beq.w	8102c50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102a90:	4b2f      	ldr	r3, [pc, #188]	@ (8102b50 <HAL_GPIO_Init+0x238>)
 8102a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102a96:	4a2e      	ldr	r2, [pc, #184]	@ (8102b50 <HAL_GPIO_Init+0x238>)
 8102a98:	f043 0302 	orr.w	r3, r3, #2
 8102a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8102b50 <HAL_GPIO_Init+0x238>)
 8102aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102aa6:	f003 0302 	and.w	r3, r3, #2
 8102aaa:	60fb      	str	r3, [r7, #12]
 8102aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102aae:	4a29      	ldr	r2, [pc, #164]	@ (8102b54 <HAL_GPIO_Init+0x23c>)
 8102ab0:	69fb      	ldr	r3, [r7, #28]
 8102ab2:	089b      	lsrs	r3, r3, #2
 8102ab4:	3302      	adds	r3, #2
 8102ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102abc:	69fb      	ldr	r3, [r7, #28]
 8102abe:	f003 0303 	and.w	r3, r3, #3
 8102ac2:	009b      	lsls	r3, r3, #2
 8102ac4:	220f      	movs	r2, #15
 8102ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8102aca:	43db      	mvns	r3, r3
 8102acc:	69ba      	ldr	r2, [r7, #24]
 8102ace:	4013      	ands	r3, r2
 8102ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	4a20      	ldr	r2, [pc, #128]	@ (8102b58 <HAL_GPIO_Init+0x240>)
 8102ad6:	4293      	cmp	r3, r2
 8102ad8:	d052      	beq.n	8102b80 <HAL_GPIO_Init+0x268>
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	4a1f      	ldr	r2, [pc, #124]	@ (8102b5c <HAL_GPIO_Init+0x244>)
 8102ade:	4293      	cmp	r3, r2
 8102ae0:	d031      	beq.n	8102b46 <HAL_GPIO_Init+0x22e>
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8102b60 <HAL_GPIO_Init+0x248>)
 8102ae6:	4293      	cmp	r3, r2
 8102ae8:	d02b      	beq.n	8102b42 <HAL_GPIO_Init+0x22a>
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	4a1d      	ldr	r2, [pc, #116]	@ (8102b64 <HAL_GPIO_Init+0x24c>)
 8102aee:	4293      	cmp	r3, r2
 8102af0:	d025      	beq.n	8102b3e <HAL_GPIO_Init+0x226>
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	4a1c      	ldr	r2, [pc, #112]	@ (8102b68 <HAL_GPIO_Init+0x250>)
 8102af6:	4293      	cmp	r3, r2
 8102af8:	d01f      	beq.n	8102b3a <HAL_GPIO_Init+0x222>
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	4a1b      	ldr	r2, [pc, #108]	@ (8102b6c <HAL_GPIO_Init+0x254>)
 8102afe:	4293      	cmp	r3, r2
 8102b00:	d019      	beq.n	8102b36 <HAL_GPIO_Init+0x21e>
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	4a1a      	ldr	r2, [pc, #104]	@ (8102b70 <HAL_GPIO_Init+0x258>)
 8102b06:	4293      	cmp	r3, r2
 8102b08:	d013      	beq.n	8102b32 <HAL_GPIO_Init+0x21a>
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	4a19      	ldr	r2, [pc, #100]	@ (8102b74 <HAL_GPIO_Init+0x25c>)
 8102b0e:	4293      	cmp	r3, r2
 8102b10:	d00d      	beq.n	8102b2e <HAL_GPIO_Init+0x216>
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	4a18      	ldr	r2, [pc, #96]	@ (8102b78 <HAL_GPIO_Init+0x260>)
 8102b16:	4293      	cmp	r3, r2
 8102b18:	d007      	beq.n	8102b2a <HAL_GPIO_Init+0x212>
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	4a17      	ldr	r2, [pc, #92]	@ (8102b7c <HAL_GPIO_Init+0x264>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d101      	bne.n	8102b26 <HAL_GPIO_Init+0x20e>
 8102b22:	2309      	movs	r3, #9
 8102b24:	e02d      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b26:	230a      	movs	r3, #10
 8102b28:	e02b      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b2a:	2308      	movs	r3, #8
 8102b2c:	e029      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b2e:	2307      	movs	r3, #7
 8102b30:	e027      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b32:	2306      	movs	r3, #6
 8102b34:	e025      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b36:	2305      	movs	r3, #5
 8102b38:	e023      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b3a:	2304      	movs	r3, #4
 8102b3c:	e021      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b3e:	2303      	movs	r3, #3
 8102b40:	e01f      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b42:	2302      	movs	r3, #2
 8102b44:	e01d      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b46:	2301      	movs	r3, #1
 8102b48:	e01b      	b.n	8102b82 <HAL_GPIO_Init+0x26a>
 8102b4a:	bf00      	nop
 8102b4c:	580000c0 	.word	0x580000c0
 8102b50:	58024400 	.word	0x58024400
 8102b54:	58000400 	.word	0x58000400
 8102b58:	58020000 	.word	0x58020000
 8102b5c:	58020400 	.word	0x58020400
 8102b60:	58020800 	.word	0x58020800
 8102b64:	58020c00 	.word	0x58020c00
 8102b68:	58021000 	.word	0x58021000
 8102b6c:	58021400 	.word	0x58021400
 8102b70:	58021800 	.word	0x58021800
 8102b74:	58021c00 	.word	0x58021c00
 8102b78:	58022000 	.word	0x58022000
 8102b7c:	58022400 	.word	0x58022400
 8102b80:	2300      	movs	r3, #0
 8102b82:	69fa      	ldr	r2, [r7, #28]
 8102b84:	f002 0203 	and.w	r2, r2, #3
 8102b88:	0092      	lsls	r2, r2, #2
 8102b8a:	4093      	lsls	r3, r2
 8102b8c:	69ba      	ldr	r2, [r7, #24]
 8102b8e:	4313      	orrs	r3, r2
 8102b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102b92:	4938      	ldr	r1, [pc, #224]	@ (8102c74 <HAL_GPIO_Init+0x35c>)
 8102b94:	69fb      	ldr	r3, [r7, #28]
 8102b96:	089b      	lsrs	r3, r3, #2
 8102b98:	3302      	adds	r3, #2
 8102b9a:	69ba      	ldr	r2, [r7, #24]
 8102b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ba8:	693b      	ldr	r3, [r7, #16]
 8102baa:	43db      	mvns	r3, r3
 8102bac:	69ba      	ldr	r2, [r7, #24]
 8102bae:	4013      	ands	r3, r2
 8102bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102bb2:	683b      	ldr	r3, [r7, #0]
 8102bb4:	685b      	ldr	r3, [r3, #4]
 8102bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	d003      	beq.n	8102bc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102bbe:	69ba      	ldr	r2, [r7, #24]
 8102bc0:	693b      	ldr	r3, [r7, #16]
 8102bc2:	4313      	orrs	r3, r2
 8102bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102bca:	69bb      	ldr	r3, [r7, #24]
 8102bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102bd2:	685b      	ldr	r3, [r3, #4]
 8102bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102bd6:	693b      	ldr	r3, [r7, #16]
 8102bd8:	43db      	mvns	r3, r3
 8102bda:	69ba      	ldr	r2, [r7, #24]
 8102bdc:	4013      	ands	r3, r2
 8102bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102be0:	683b      	ldr	r3, [r7, #0]
 8102be2:	685b      	ldr	r3, [r3, #4]
 8102be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d003      	beq.n	8102bf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102bec:	69ba      	ldr	r2, [r7, #24]
 8102bee:	693b      	ldr	r3, [r7, #16]
 8102bf0:	4313      	orrs	r3, r2
 8102bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102bf8:	69bb      	ldr	r3, [r7, #24]
 8102bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102bfc:	697b      	ldr	r3, [r7, #20]
 8102bfe:	685b      	ldr	r3, [r3, #4]
 8102c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102c02:	693b      	ldr	r3, [r7, #16]
 8102c04:	43db      	mvns	r3, r3
 8102c06:	69ba      	ldr	r2, [r7, #24]
 8102c08:	4013      	ands	r3, r2
 8102c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102c0c:	683b      	ldr	r3, [r7, #0]
 8102c0e:	685b      	ldr	r3, [r3, #4]
 8102c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102c14:	2b00      	cmp	r3, #0
 8102c16:	d003      	beq.n	8102c20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102c18:	69ba      	ldr	r2, [r7, #24]
 8102c1a:	693b      	ldr	r3, [r7, #16]
 8102c1c:	4313      	orrs	r3, r2
 8102c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102c20:	697b      	ldr	r3, [r7, #20]
 8102c22:	69ba      	ldr	r2, [r7, #24]
 8102c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102c26:	697b      	ldr	r3, [r7, #20]
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102c2c:	693b      	ldr	r3, [r7, #16]
 8102c2e:	43db      	mvns	r3, r3
 8102c30:	69ba      	ldr	r2, [r7, #24]
 8102c32:	4013      	ands	r3, r2
 8102c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102c36:	683b      	ldr	r3, [r7, #0]
 8102c38:	685b      	ldr	r3, [r3, #4]
 8102c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102c3e:	2b00      	cmp	r3, #0
 8102c40:	d003      	beq.n	8102c4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102c42:	69ba      	ldr	r2, [r7, #24]
 8102c44:	693b      	ldr	r3, [r7, #16]
 8102c46:	4313      	orrs	r3, r2
 8102c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102c4a:	697b      	ldr	r3, [r7, #20]
 8102c4c:	69ba      	ldr	r2, [r7, #24]
 8102c4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102c50:	69fb      	ldr	r3, [r7, #28]
 8102c52:	3301      	adds	r3, #1
 8102c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102c56:	683b      	ldr	r3, [r7, #0]
 8102c58:	681a      	ldr	r2, [r3, #0]
 8102c5a:	69fb      	ldr	r3, [r7, #28]
 8102c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	f47f ae63 	bne.w	810292c <HAL_GPIO_Init+0x14>
  }
}
 8102c66:	bf00      	nop
 8102c68:	bf00      	nop
 8102c6a:	3724      	adds	r7, #36	@ 0x24
 8102c6c:	46bd      	mov	sp, r7
 8102c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c72:	4770      	bx	lr
 8102c74:	58000400 	.word	0x58000400

08102c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102c78:	b580      	push	{r7, lr}
 8102c7a:	b082      	sub	sp, #8
 8102c7c:	af00      	add	r7, sp, #0
 8102c7e:	4603      	mov	r3, r0
 8102c80:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102c86:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8102c8a:	88fb      	ldrh	r3, [r7, #6]
 8102c8c:	4013      	ands	r3, r2
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d008      	beq.n	8102ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102c92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102c96:	88fb      	ldrh	r3, [r7, #6]
 8102c98:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102c9c:	88fb      	ldrh	r3, [r7, #6]
 8102c9e:	4618      	mov	r0, r3
 8102ca0:	f7fd fecc 	bl	8100a3c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102ca4:	bf00      	nop
 8102ca6:	3708      	adds	r7, #8
 8102ca8:	46bd      	mov	sp, r7
 8102caa:	bd80      	pop	{r7, pc}

08102cac <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102cac:	b480      	push	{r7}
 8102cae:	b083      	sub	sp, #12
 8102cb0:	af00      	add	r7, sp, #0
 8102cb2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102cb4:	4b05      	ldr	r3, [pc, #20]	@ (8102ccc <HAL_HSEM_ActivateNotification+0x20>)
 8102cb6:	681a      	ldr	r2, [r3, #0]
 8102cb8:	4904      	ldr	r1, [pc, #16]	@ (8102ccc <HAL_HSEM_ActivateNotification+0x20>)
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	4313      	orrs	r3, r2
 8102cbe:	600b      	str	r3, [r1, #0]
#endif
}
 8102cc0:	bf00      	nop
 8102cc2:	370c      	adds	r7, #12
 8102cc4:	46bd      	mov	sp, r7
 8102cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cca:	4770      	bx	lr
 8102ccc:	58026510 	.word	0x58026510

08102cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8102cd0:	b580      	push	{r7, lr}
 8102cd2:	b086      	sub	sp, #24
 8102cd4:	af02      	add	r7, sp, #8
 8102cd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d101      	bne.n	8102ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8102cde:	2301      	movs	r3, #1
 8102ce0:	e0fe      	b.n	8102ee0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8102ce8:	b2db      	uxtb	r3, r3
 8102cea:	2b00      	cmp	r3, #0
 8102cec:	d106      	bne.n	8102cfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	2200      	movs	r2, #0
 8102cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8102cf6:	6878      	ldr	r0, [r7, #4]
 8102cf8:	f7fe ffb2 	bl	8101c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	2203      	movs	r2, #3
 8102d00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4618      	mov	r0, r3
 8102d0a:	f005 f94f 	bl	8107fac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	6818      	ldr	r0, [r3, #0]
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	7c1a      	ldrb	r2, [r3, #16]
 8102d16:	f88d 2000 	strb.w	r2, [sp]
 8102d1a:	3304      	adds	r3, #4
 8102d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8102d1e:	f005 f8d4 	bl	8107eca <USB_CoreInit>
 8102d22:	4603      	mov	r3, r0
 8102d24:	2b00      	cmp	r3, #0
 8102d26:	d005      	beq.n	8102d34 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	2202      	movs	r2, #2
 8102d2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102d30:	2301      	movs	r3, #1
 8102d32:	e0d5      	b.n	8102ee0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	2100      	movs	r1, #0
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	f005 f947 	bl	8107fce <USB_SetCurrentMode>
 8102d40:	4603      	mov	r3, r0
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d005      	beq.n	8102d52 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	2202      	movs	r2, #2
 8102d4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102d4e:	2301      	movs	r3, #1
 8102d50:	e0c6      	b.n	8102ee0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102d52:	2300      	movs	r3, #0
 8102d54:	73fb      	strb	r3, [r7, #15]
 8102d56:	e04a      	b.n	8102dee <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8102d58:	7bfa      	ldrb	r2, [r7, #15]
 8102d5a:	6879      	ldr	r1, [r7, #4]
 8102d5c:	4613      	mov	r3, r2
 8102d5e:	00db      	lsls	r3, r3, #3
 8102d60:	4413      	add	r3, r2
 8102d62:	009b      	lsls	r3, r3, #2
 8102d64:	440b      	add	r3, r1
 8102d66:	3315      	adds	r3, #21
 8102d68:	2201      	movs	r2, #1
 8102d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8102d6c:	7bfa      	ldrb	r2, [r7, #15]
 8102d6e:	6879      	ldr	r1, [r7, #4]
 8102d70:	4613      	mov	r3, r2
 8102d72:	00db      	lsls	r3, r3, #3
 8102d74:	4413      	add	r3, r2
 8102d76:	009b      	lsls	r3, r3, #2
 8102d78:	440b      	add	r3, r1
 8102d7a:	3314      	adds	r3, #20
 8102d7c:	7bfa      	ldrb	r2, [r7, #15]
 8102d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8102d80:	7bfa      	ldrb	r2, [r7, #15]
 8102d82:	7bfb      	ldrb	r3, [r7, #15]
 8102d84:	b298      	uxth	r0, r3
 8102d86:	6879      	ldr	r1, [r7, #4]
 8102d88:	4613      	mov	r3, r2
 8102d8a:	00db      	lsls	r3, r3, #3
 8102d8c:	4413      	add	r3, r2
 8102d8e:	009b      	lsls	r3, r3, #2
 8102d90:	440b      	add	r3, r1
 8102d92:	332e      	adds	r3, #46	@ 0x2e
 8102d94:	4602      	mov	r2, r0
 8102d96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8102d98:	7bfa      	ldrb	r2, [r7, #15]
 8102d9a:	6879      	ldr	r1, [r7, #4]
 8102d9c:	4613      	mov	r3, r2
 8102d9e:	00db      	lsls	r3, r3, #3
 8102da0:	4413      	add	r3, r2
 8102da2:	009b      	lsls	r3, r3, #2
 8102da4:	440b      	add	r3, r1
 8102da6:	3318      	adds	r3, #24
 8102da8:	2200      	movs	r2, #0
 8102daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8102dac:	7bfa      	ldrb	r2, [r7, #15]
 8102dae:	6879      	ldr	r1, [r7, #4]
 8102db0:	4613      	mov	r3, r2
 8102db2:	00db      	lsls	r3, r3, #3
 8102db4:	4413      	add	r3, r2
 8102db6:	009b      	lsls	r3, r3, #2
 8102db8:	440b      	add	r3, r1
 8102dba:	331c      	adds	r3, #28
 8102dbc:	2200      	movs	r2, #0
 8102dbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8102dc0:	7bfa      	ldrb	r2, [r7, #15]
 8102dc2:	6879      	ldr	r1, [r7, #4]
 8102dc4:	4613      	mov	r3, r2
 8102dc6:	00db      	lsls	r3, r3, #3
 8102dc8:	4413      	add	r3, r2
 8102dca:	009b      	lsls	r3, r3, #2
 8102dcc:	440b      	add	r3, r1
 8102dce:	3320      	adds	r3, #32
 8102dd0:	2200      	movs	r2, #0
 8102dd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8102dd4:	7bfa      	ldrb	r2, [r7, #15]
 8102dd6:	6879      	ldr	r1, [r7, #4]
 8102dd8:	4613      	mov	r3, r2
 8102dda:	00db      	lsls	r3, r3, #3
 8102ddc:	4413      	add	r3, r2
 8102dde:	009b      	lsls	r3, r3, #2
 8102de0:	440b      	add	r3, r1
 8102de2:	3324      	adds	r3, #36	@ 0x24
 8102de4:	2200      	movs	r2, #0
 8102de6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102de8:	7bfb      	ldrb	r3, [r7, #15]
 8102dea:	3301      	adds	r3, #1
 8102dec:	73fb      	strb	r3, [r7, #15]
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	791b      	ldrb	r3, [r3, #4]
 8102df2:	7bfa      	ldrb	r2, [r7, #15]
 8102df4:	429a      	cmp	r2, r3
 8102df6:	d3af      	bcc.n	8102d58 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102df8:	2300      	movs	r3, #0
 8102dfa:	73fb      	strb	r3, [r7, #15]
 8102dfc:	e044      	b.n	8102e88 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8102dfe:	7bfa      	ldrb	r2, [r7, #15]
 8102e00:	6879      	ldr	r1, [r7, #4]
 8102e02:	4613      	mov	r3, r2
 8102e04:	00db      	lsls	r3, r3, #3
 8102e06:	4413      	add	r3, r2
 8102e08:	009b      	lsls	r3, r3, #2
 8102e0a:	440b      	add	r3, r1
 8102e0c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8102e10:	2200      	movs	r2, #0
 8102e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8102e14:	7bfa      	ldrb	r2, [r7, #15]
 8102e16:	6879      	ldr	r1, [r7, #4]
 8102e18:	4613      	mov	r3, r2
 8102e1a:	00db      	lsls	r3, r3, #3
 8102e1c:	4413      	add	r3, r2
 8102e1e:	009b      	lsls	r3, r3, #2
 8102e20:	440b      	add	r3, r1
 8102e22:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8102e26:	7bfa      	ldrb	r2, [r7, #15]
 8102e28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8102e2a:	7bfa      	ldrb	r2, [r7, #15]
 8102e2c:	6879      	ldr	r1, [r7, #4]
 8102e2e:	4613      	mov	r3, r2
 8102e30:	00db      	lsls	r3, r3, #3
 8102e32:	4413      	add	r3, r2
 8102e34:	009b      	lsls	r3, r3, #2
 8102e36:	440b      	add	r3, r1
 8102e38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8102e3c:	2200      	movs	r2, #0
 8102e3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8102e40:	7bfa      	ldrb	r2, [r7, #15]
 8102e42:	6879      	ldr	r1, [r7, #4]
 8102e44:	4613      	mov	r3, r2
 8102e46:	00db      	lsls	r3, r3, #3
 8102e48:	4413      	add	r3, r2
 8102e4a:	009b      	lsls	r3, r3, #2
 8102e4c:	440b      	add	r3, r1
 8102e4e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8102e52:	2200      	movs	r2, #0
 8102e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8102e56:	7bfa      	ldrb	r2, [r7, #15]
 8102e58:	6879      	ldr	r1, [r7, #4]
 8102e5a:	4613      	mov	r3, r2
 8102e5c:	00db      	lsls	r3, r3, #3
 8102e5e:	4413      	add	r3, r2
 8102e60:	009b      	lsls	r3, r3, #2
 8102e62:	440b      	add	r3, r1
 8102e64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8102e68:	2200      	movs	r2, #0
 8102e6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8102e6c:	7bfa      	ldrb	r2, [r7, #15]
 8102e6e:	6879      	ldr	r1, [r7, #4]
 8102e70:	4613      	mov	r3, r2
 8102e72:	00db      	lsls	r3, r3, #3
 8102e74:	4413      	add	r3, r2
 8102e76:	009b      	lsls	r3, r3, #2
 8102e78:	440b      	add	r3, r1
 8102e7a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8102e7e:	2200      	movs	r2, #0
 8102e80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102e82:	7bfb      	ldrb	r3, [r7, #15]
 8102e84:	3301      	adds	r3, #1
 8102e86:	73fb      	strb	r3, [r7, #15]
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	791b      	ldrb	r3, [r3, #4]
 8102e8c:	7bfa      	ldrb	r2, [r7, #15]
 8102e8e:	429a      	cmp	r2, r3
 8102e90:	d3b5      	bcc.n	8102dfe <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	6818      	ldr	r0, [r3, #0]
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	7c1a      	ldrb	r2, [r3, #16]
 8102e9a:	f88d 2000 	strb.w	r2, [sp]
 8102e9e:	3304      	adds	r3, #4
 8102ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8102ea2:	f005 f8e1 	bl	8108068 <USB_DevInit>
 8102ea6:	4603      	mov	r3, r0
 8102ea8:	2b00      	cmp	r3, #0
 8102eaa:	d005      	beq.n	8102eb8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	2202      	movs	r2, #2
 8102eb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102eb4:	2301      	movs	r3, #1
 8102eb6:	e013      	b.n	8102ee0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	2200      	movs	r2, #0
 8102ebc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	2201      	movs	r2, #1
 8102ec2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	7b1b      	ldrb	r3, [r3, #12]
 8102eca:	2b01      	cmp	r3, #1
 8102ecc:	d102      	bne.n	8102ed4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8102ece:	6878      	ldr	r0, [r7, #4]
 8102ed0:	f000 f80a 	bl	8102ee8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	4618      	mov	r0, r3
 8102eda:	f005 fa9c 	bl	8108416 <USB_DevDisconnect>

  return HAL_OK;
 8102ede:	2300      	movs	r3, #0
}
 8102ee0:	4618      	mov	r0, r3
 8102ee2:	3710      	adds	r7, #16
 8102ee4:	46bd      	mov	sp, r7
 8102ee6:	bd80      	pop	{r7, pc}

08102ee8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8102ee8:	b480      	push	{r7}
 8102eea:	b085      	sub	sp, #20
 8102eec:	af00      	add	r7, sp, #0
 8102eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	2201      	movs	r2, #1
 8102efa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	2200      	movs	r2, #0
 8102f02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	699b      	ldr	r3, [r3, #24]
 8102f0a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8102f0e:	68fb      	ldr	r3, [r7, #12]
 8102f10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8102f12:	68fb      	ldr	r3, [r7, #12]
 8102f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102f1a:	f043 0303 	orr.w	r3, r3, #3
 8102f1e:	68fa      	ldr	r2, [r7, #12]
 8102f20:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8102f22:	2300      	movs	r3, #0
}
 8102f24:	4618      	mov	r0, r3
 8102f26:	3714      	adds	r7, #20
 8102f28:	46bd      	mov	sp, r7
 8102f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f2e:	4770      	bx	lr

08102f30 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102f30:	b580      	push	{r7, lr}
 8102f32:	b084      	sub	sp, #16
 8102f34:	af00      	add	r7, sp, #0
 8102f36:	60f8      	str	r0, [r7, #12]
 8102f38:	460b      	mov	r3, r1
 8102f3a:	607a      	str	r2, [r7, #4]
 8102f3c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102f3e:	4b37      	ldr	r3, [pc, #220]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	f023 0201 	bic.w	r2, r3, #1
 8102f46:	4935      	ldr	r1, [pc, #212]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f48:	68fb      	ldr	r3, [r7, #12]
 8102f4a:	4313      	orrs	r3, r2
 8102f4c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d123      	bne.n	8102f9c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102f54:	f7ff fcce 	bl	81028f4 <HAL_GetCurrentCPUID>
 8102f58:	4603      	mov	r3, r0
 8102f5a:	2b03      	cmp	r3, #3
 8102f5c:	d158      	bne.n	8103010 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102f5e:	4b2f      	ldr	r3, [pc, #188]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f60:	691b      	ldr	r3, [r3, #16]
 8102f62:	4a2e      	ldr	r2, [pc, #184]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f64:	f023 0301 	bic.w	r3, r3, #1
 8102f68:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f6c:	691b      	ldr	r3, [r3, #16]
 8102f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f70:	f043 0304 	orr.w	r3, r3, #4
 8102f74:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102f76:	f3bf 8f4f 	dsb	sy
}
 8102f7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f7c:	f3bf 8f6f 	isb	sy
}
 8102f80:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f82:	7afb      	ldrb	r3, [r7, #11]
 8102f84:	2b01      	cmp	r3, #1
 8102f86:	d101      	bne.n	8102f8c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f88:	bf30      	wfi
 8102f8a:	e000      	b.n	8102f8e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f8c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f8e:	4b24      	ldr	r3, [pc, #144]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f90:	691b      	ldr	r3, [r3, #16]
 8102f92:	4a23      	ldr	r2, [pc, #140]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f94:	f023 0304 	bic.w	r3, r3, #4
 8102f98:	6113      	str	r3, [r2, #16]
 8102f9a:	e03c      	b.n	8103016 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	2b01      	cmp	r3, #1
 8102fa0:	d123      	bne.n	8102fea <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102fa2:	f7ff fca7 	bl	81028f4 <HAL_GetCurrentCPUID>
 8102fa6:	4603      	mov	r3, r0
 8102fa8:	2b01      	cmp	r3, #1
 8102faa:	d133      	bne.n	8103014 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102fac:	4b1b      	ldr	r3, [pc, #108]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fae:	695b      	ldr	r3, [r3, #20]
 8102fb0:	4a1a      	ldr	r2, [pc, #104]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fb2:	f023 0302 	bic.w	r3, r3, #2
 8102fb6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fb8:	4b19      	ldr	r3, [pc, #100]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fba:	691b      	ldr	r3, [r3, #16]
 8102fbc:	4a18      	ldr	r2, [pc, #96]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fbe:	f043 0304 	orr.w	r3, r3, #4
 8102fc2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102fc4:	f3bf 8f4f 	dsb	sy
}
 8102fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102fca:	f3bf 8f6f 	isb	sy
}
 8102fce:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102fd0:	7afb      	ldrb	r3, [r7, #11]
 8102fd2:	2b01      	cmp	r3, #1
 8102fd4:	d101      	bne.n	8102fda <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102fd6:	bf30      	wfi
 8102fd8:	e000      	b.n	8102fdc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102fda:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fdc:	4b10      	ldr	r3, [pc, #64]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fde:	691b      	ldr	r3, [r3, #16]
 8102fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8103020 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fe2:	f023 0304 	bic.w	r3, r3, #4
 8102fe6:	6113      	str	r3, [r2, #16]
 8102fe8:	e015      	b.n	8103016 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102fea:	f7ff fc83 	bl	81028f4 <HAL_GetCurrentCPUID>
 8102fee:	4603      	mov	r3, r0
 8102ff0:	2b03      	cmp	r3, #3
 8102ff2:	d106      	bne.n	8103002 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102ff4:	4b09      	ldr	r3, [pc, #36]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ff6:	691b      	ldr	r3, [r3, #16]
 8102ff8:	4a08      	ldr	r2, [pc, #32]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ffa:	f023 0304 	bic.w	r3, r3, #4
 8102ffe:	6113      	str	r3, [r2, #16]
 8103000:	e009      	b.n	8103016 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103002:	4b06      	ldr	r3, [pc, #24]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103004:	695b      	ldr	r3, [r3, #20]
 8103006:	4a05      	ldr	r2, [pc, #20]	@ (810301c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103008:	f023 0304 	bic.w	r3, r3, #4
 810300c:	6153      	str	r3, [r2, #20]
 810300e:	e002      	b.n	8103016 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103010:	bf00      	nop
 8103012:	e000      	b.n	8103016 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103014:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103016:	3710      	adds	r7, #16
 8103018:	46bd      	mov	sp, r7
 810301a:	bd80      	pop	{r7, pc}
 810301c:	58024800 	.word	0x58024800
 8103020:	e000ed00 	.word	0xe000ed00

08103024 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103024:	b580      	push	{r7, lr}
 8103026:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103028:	f7ff fc64 	bl	81028f4 <HAL_GetCurrentCPUID>
 810302c:	4603      	mov	r3, r0
 810302e:	2b03      	cmp	r3, #3
 8103030:	d101      	bne.n	8103036 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103032:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103034:	e001      	b.n	810303a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103036:	bf40      	sev
    __WFE ();
 8103038:	bf20      	wfe
}
 810303a:	bf00      	nop
 810303c:	bd80      	pop	{r7, pc}
	...

08103040 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8103040:	b480      	push	{r7}
 8103042:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8103044:	4b05      	ldr	r3, [pc, #20]	@ (810305c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8103046:	68db      	ldr	r3, [r3, #12]
 8103048:	4a04      	ldr	r2, [pc, #16]	@ (810305c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810304a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810304e:	60d3      	str	r3, [r2, #12]
}
 8103050:	bf00      	nop
 8103052:	46bd      	mov	sp, r7
 8103054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103058:	4770      	bx	lr
 810305a:	bf00      	nop
 810305c:	58024800 	.word	0x58024800

08103060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103060:	b480      	push	{r7}
 8103062:	b089      	sub	sp, #36	@ 0x24
 8103064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103066:	4bb3      	ldr	r3, [pc, #716]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103068:	691b      	ldr	r3, [r3, #16]
 810306a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810306e:	2b18      	cmp	r3, #24
 8103070:	f200 8155 	bhi.w	810331e <HAL_RCC_GetSysClockFreq+0x2be>
 8103074:	a201      	add	r2, pc, #4	@ (adr r2, 810307c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810307a:	bf00      	nop
 810307c:	081030e1 	.word	0x081030e1
 8103080:	0810331f 	.word	0x0810331f
 8103084:	0810331f 	.word	0x0810331f
 8103088:	0810331f 	.word	0x0810331f
 810308c:	0810331f 	.word	0x0810331f
 8103090:	0810331f 	.word	0x0810331f
 8103094:	0810331f 	.word	0x0810331f
 8103098:	0810331f 	.word	0x0810331f
 810309c:	08103107 	.word	0x08103107
 81030a0:	0810331f 	.word	0x0810331f
 81030a4:	0810331f 	.word	0x0810331f
 81030a8:	0810331f 	.word	0x0810331f
 81030ac:	0810331f 	.word	0x0810331f
 81030b0:	0810331f 	.word	0x0810331f
 81030b4:	0810331f 	.word	0x0810331f
 81030b8:	0810331f 	.word	0x0810331f
 81030bc:	0810310d 	.word	0x0810310d
 81030c0:	0810331f 	.word	0x0810331f
 81030c4:	0810331f 	.word	0x0810331f
 81030c8:	0810331f 	.word	0x0810331f
 81030cc:	0810331f 	.word	0x0810331f
 81030d0:	0810331f 	.word	0x0810331f
 81030d4:	0810331f 	.word	0x0810331f
 81030d8:	0810331f 	.word	0x0810331f
 81030dc:	08103113 	.word	0x08103113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81030e0:	4b94      	ldr	r3, [pc, #592]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	f003 0320 	and.w	r3, r3, #32
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	d009      	beq.n	8103100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81030ec:	4b91      	ldr	r3, [pc, #580]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	08db      	lsrs	r3, r3, #3
 81030f2:	f003 0303 	and.w	r3, r3, #3
 81030f6:	4a90      	ldr	r2, [pc, #576]	@ (8103338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030f8:	fa22 f303 	lsr.w	r3, r2, r3
 81030fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81030fe:	e111      	b.n	8103324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103100:	4b8d      	ldr	r3, [pc, #564]	@ (8103338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103102:	61bb      	str	r3, [r7, #24]
      break;
 8103104:	e10e      	b.n	8103324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103106:	4b8d      	ldr	r3, [pc, #564]	@ (810333c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103108:	61bb      	str	r3, [r7, #24]
      break;
 810310a:	e10b      	b.n	8103324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810310c:	4b8c      	ldr	r3, [pc, #560]	@ (8103340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810310e:	61bb      	str	r3, [r7, #24]
      break;
 8103110:	e108      	b.n	8103324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103112:	4b88      	ldr	r3, [pc, #544]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103116:	f003 0303 	and.w	r3, r3, #3
 810311a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810311c:	4b85      	ldr	r3, [pc, #532]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103120:	091b      	lsrs	r3, r3, #4
 8103122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103128:	4b82      	ldr	r3, [pc, #520]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810312c:	f003 0301 	and.w	r3, r3, #1
 8103130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103132:	4b80      	ldr	r3, [pc, #512]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103136:	08db      	lsrs	r3, r3, #3
 8103138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810313c:	68fa      	ldr	r2, [r7, #12]
 810313e:	fb02 f303 	mul.w	r3, r2, r3
 8103142:	ee07 3a90 	vmov	s15, r3
 8103146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810314a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810314e:	693b      	ldr	r3, [r7, #16]
 8103150:	2b00      	cmp	r3, #0
 8103152:	f000 80e1 	beq.w	8103318 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8103156:	697b      	ldr	r3, [r7, #20]
 8103158:	2b02      	cmp	r3, #2
 810315a:	f000 8083 	beq.w	8103264 <HAL_RCC_GetSysClockFreq+0x204>
 810315e:	697b      	ldr	r3, [r7, #20]
 8103160:	2b02      	cmp	r3, #2
 8103162:	f200 80a1 	bhi.w	81032a8 <HAL_RCC_GetSysClockFreq+0x248>
 8103166:	697b      	ldr	r3, [r7, #20]
 8103168:	2b00      	cmp	r3, #0
 810316a:	d003      	beq.n	8103174 <HAL_RCC_GetSysClockFreq+0x114>
 810316c:	697b      	ldr	r3, [r7, #20]
 810316e:	2b01      	cmp	r3, #1
 8103170:	d056      	beq.n	8103220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103172:	e099      	b.n	81032a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103174:	4b6f      	ldr	r3, [pc, #444]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	f003 0320 	and.w	r3, r3, #32
 810317c:	2b00      	cmp	r3, #0
 810317e:	d02d      	beq.n	81031dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103180:	4b6c      	ldr	r3, [pc, #432]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	08db      	lsrs	r3, r3, #3
 8103186:	f003 0303 	and.w	r3, r3, #3
 810318a:	4a6b      	ldr	r2, [pc, #428]	@ (8103338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810318c:	fa22 f303 	lsr.w	r3, r2, r3
 8103190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	ee07 3a90 	vmov	s15, r3
 8103198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810319c:	693b      	ldr	r3, [r7, #16]
 810319e:	ee07 3a90 	vmov	s15, r3
 81031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031aa:	4b62      	ldr	r3, [pc, #392]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81031ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031b2:	ee07 3a90 	vmov	s15, r3
 81031b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81031be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103344 <HAL_RCC_GetSysClockFreq+0x2e4>
 81031c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81031ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81031da:	e087      	b.n	81032ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81031dc:	693b      	ldr	r3, [r7, #16]
 81031de:	ee07 3a90 	vmov	s15, r3
 81031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103348 <HAL_RCC_GetSysClockFreq+0x2e8>
 81031ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031ee:	4b51      	ldr	r3, [pc, #324]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031f6:	ee07 3a90 	vmov	s15, r3
 81031fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103202:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810320e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103216:	ee67 7a27 	vmul.f32	s15, s14, s15
 810321a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810321e:	e065      	b.n	81032ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103220:	693b      	ldr	r3, [r7, #16]
 8103222:	ee07 3a90 	vmov	s15, r3
 8103226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810322a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810334c <HAL_RCC_GetSysClockFreq+0x2ec>
 810322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103232:	4b40      	ldr	r3, [pc, #256]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810323a:	ee07 3a90 	vmov	s15, r3
 810323e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103242:	ed97 6a02 	vldr	s12, [r7, #8]
 8103246:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103344 <HAL_RCC_GetSysClockFreq+0x2e4>
 810324a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810324e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810325e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103262:	e043      	b.n	81032ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103264:	693b      	ldr	r3, [r7, #16]
 8103266:	ee07 3a90 	vmov	s15, r3
 810326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810326e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103276:	4b2f      	ldr	r3, [pc, #188]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810327a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810327e:	ee07 3a90 	vmov	s15, r3
 8103282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103286:	ed97 6a02 	vldr	s12, [r7, #8]
 810328a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103344 <HAL_RCC_GetSysClockFreq+0x2e4>
 810328e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810329a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81032a6:	e021      	b.n	81032ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81032a8:	693b      	ldr	r3, [r7, #16]
 81032aa:	ee07 3a90 	vmov	s15, r3
 81032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810334c <HAL_RCC_GetSysClockFreq+0x2ec>
 81032b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032ba:	4b1e      	ldr	r3, [pc, #120]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81032be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032c2:	ee07 3a90 	vmov	s15, r3
 81032c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81032ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103344 <HAL_RCC_GetSysClockFreq+0x2e4>
 81032d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81032de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81032ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81032ec:	4b11      	ldr	r3, [pc, #68]	@ (8103334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81032f0:	0a5b      	lsrs	r3, r3, #9
 81032f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81032f6:	3301      	adds	r3, #1
 81032f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81032fa:	683b      	ldr	r3, [r7, #0]
 81032fc:	ee07 3a90 	vmov	s15, r3
 8103300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103304:	edd7 6a07 	vldr	s13, [r7, #28]
 8103308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810330c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103310:	ee17 3a90 	vmov	r3, s15
 8103314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103316:	e005      	b.n	8103324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103318:	2300      	movs	r3, #0
 810331a:	61bb      	str	r3, [r7, #24]
      break;
 810331c:	e002      	b.n	8103324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810331e:	4b07      	ldr	r3, [pc, #28]	@ (810333c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103320:	61bb      	str	r3, [r7, #24]
      break;
 8103322:	bf00      	nop
  }

  return sysclockfreq;
 8103324:	69bb      	ldr	r3, [r7, #24]
}
 8103326:	4618      	mov	r0, r3
 8103328:	3724      	adds	r7, #36	@ 0x24
 810332a:	46bd      	mov	sp, r7
 810332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103330:	4770      	bx	lr
 8103332:	bf00      	nop
 8103334:	58024400 	.word	0x58024400
 8103338:	03d09000 	.word	0x03d09000
 810333c:	003d0900 	.word	0x003d0900
 8103340:	017d7840 	.word	0x017d7840
 8103344:	46000000 	.word	0x46000000
 8103348:	4c742400 	.word	0x4c742400
 810334c:	4a742400 	.word	0x4a742400
 8103350:	4bbebc20 	.word	0x4bbebc20

08103354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103354:	b580      	push	{r7, lr}
 8103356:	b082      	sub	sp, #8
 8103358:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810335a:	f7ff fe81 	bl	8103060 <HAL_RCC_GetSysClockFreq>
 810335e:	4602      	mov	r2, r0
 8103360:	4b11      	ldr	r3, [pc, #68]	@ (81033a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103362:	699b      	ldr	r3, [r3, #24]
 8103364:	0a1b      	lsrs	r3, r3, #8
 8103366:	f003 030f 	and.w	r3, r3, #15
 810336a:	4910      	ldr	r1, [pc, #64]	@ (81033ac <HAL_RCC_GetHCLKFreq+0x58>)
 810336c:	5ccb      	ldrb	r3, [r1, r3]
 810336e:	f003 031f 	and.w	r3, r3, #31
 8103372:	fa22 f303 	lsr.w	r3, r2, r3
 8103376:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103378:	4b0b      	ldr	r3, [pc, #44]	@ (81033a8 <HAL_RCC_GetHCLKFreq+0x54>)
 810337a:	699b      	ldr	r3, [r3, #24]
 810337c:	f003 030f 	and.w	r3, r3, #15
 8103380:	4a0a      	ldr	r2, [pc, #40]	@ (81033ac <HAL_RCC_GetHCLKFreq+0x58>)
 8103382:	5cd3      	ldrb	r3, [r2, r3]
 8103384:	f003 031f 	and.w	r3, r3, #31
 8103388:	687a      	ldr	r2, [r7, #4]
 810338a:	fa22 f303 	lsr.w	r3, r2, r3
 810338e:	4a08      	ldr	r2, [pc, #32]	@ (81033b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103390:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103392:	4b07      	ldr	r3, [pc, #28]	@ (81033b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	4a07      	ldr	r2, [pc, #28]	@ (81033b4 <HAL_RCC_GetHCLKFreq+0x60>)
 8103398:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810339a:	4b05      	ldr	r3, [pc, #20]	@ (81033b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 810339c:	681b      	ldr	r3, [r3, #0]
}
 810339e:	4618      	mov	r0, r3
 81033a0:	3708      	adds	r7, #8
 81033a2:	46bd      	mov	sp, r7
 81033a4:	bd80      	pop	{r7, pc}
 81033a6:	bf00      	nop
 81033a8:	58024400 	.word	0x58024400
 81033ac:	081092d4 	.word	0x081092d4
 81033b0:	10000004 	.word	0x10000004
 81033b4:	10000000 	.word	0x10000000

081033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81033b8:	b580      	push	{r7, lr}
 81033ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81033bc:	f7ff ffca 	bl	8103354 <HAL_RCC_GetHCLKFreq>
 81033c0:	4602      	mov	r2, r0
 81033c2:	4b06      	ldr	r3, [pc, #24]	@ (81033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 81033c4:	69db      	ldr	r3, [r3, #28]
 81033c6:	091b      	lsrs	r3, r3, #4
 81033c8:	f003 0307 	and.w	r3, r3, #7
 81033cc:	4904      	ldr	r1, [pc, #16]	@ (81033e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81033ce:	5ccb      	ldrb	r3, [r1, r3]
 81033d0:	f003 031f 	and.w	r3, r3, #31
 81033d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81033d8:	4618      	mov	r0, r3
 81033da:	bd80      	pop	{r7, pc}
 81033dc:	58024400 	.word	0x58024400
 81033e0:	081092d4 	.word	0x081092d4

081033e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81033e4:	b480      	push	{r7}
 81033e6:	b083      	sub	sp, #12
 81033e8:	af00      	add	r7, sp, #0
 81033ea:	6078      	str	r0, [r7, #4]
 81033ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	223f      	movs	r2, #63	@ 0x3f
 81033f2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81033f4:	4b1a      	ldr	r3, [pc, #104]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 81033f6:	691b      	ldr	r3, [r3, #16]
 81033f8:	f003 0207 	and.w	r2, r3, #7
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103400:	4b17      	ldr	r3, [pc, #92]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 8103402:	699b      	ldr	r3, [r3, #24]
 8103404:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810340c:	4b14      	ldr	r3, [pc, #80]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 810340e:	699b      	ldr	r3, [r3, #24]
 8103410:	f003 020f 	and.w	r2, r3, #15
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103418:	4b11      	ldr	r3, [pc, #68]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 810341a:	699b      	ldr	r3, [r3, #24]
 810341c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103424:	4b0e      	ldr	r3, [pc, #56]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 8103426:	69db      	ldr	r3, [r3, #28]
 8103428:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103430:	4b0b      	ldr	r3, [pc, #44]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 8103432:	69db      	ldr	r3, [r3, #28]
 8103434:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810343c:	4b08      	ldr	r3, [pc, #32]	@ (8103460 <HAL_RCC_GetClockConfig+0x7c>)
 810343e:	6a1b      	ldr	r3, [r3, #32]
 8103440:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103448:	4b06      	ldr	r3, [pc, #24]	@ (8103464 <HAL_RCC_GetClockConfig+0x80>)
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f003 020f 	and.w	r2, r3, #15
 8103450:	683b      	ldr	r3, [r7, #0]
 8103452:	601a      	str	r2, [r3, #0]
}
 8103454:	bf00      	nop
 8103456:	370c      	adds	r7, #12
 8103458:	46bd      	mov	sp, r7
 810345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810345e:	4770      	bx	lr
 8103460:	58024400 	.word	0x58024400
 8103464:	52002000 	.word	0x52002000

08103468 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810346c:	b0cc      	sub	sp, #304	@ 0x130
 810346e:	af00      	add	r7, sp, #0
 8103470:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103474:	2300      	movs	r3, #0
 8103476:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810347a:	2300      	movs	r3, #0
 810347c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103480:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103488:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810348c:	2500      	movs	r5, #0
 810348e:	ea54 0305 	orrs.w	r3, r4, r5
 8103492:	d049      	beq.n	8103528 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810349a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810349e:	d02f      	beq.n	8103500 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81034a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81034a4:	d828      	bhi.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81034a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81034aa:	d01a      	beq.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81034ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81034b0:	d822      	bhi.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81034b2:	2b00      	cmp	r3, #0
 81034b4:	d003      	beq.n	81034be <HAL_RCCEx_PeriphCLKConfig+0x56>
 81034b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81034ba:	d007      	beq.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 81034bc:	e01c      	b.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034be:	4bb8      	ldr	r3, [pc, #736]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034c2:	4ab7      	ldr	r2, [pc, #732]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81034c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81034c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81034ca:	e01a      	b.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034d0:	3308      	adds	r3, #8
 81034d2:	2102      	movs	r1, #2
 81034d4:	4618      	mov	r0, r3
 81034d6:	f002 fba1 	bl	8105c1c <RCCEx_PLL2_Config>
 81034da:	4603      	mov	r3, r0
 81034dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81034e0:	e00f      	b.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034e6:	3328      	adds	r3, #40	@ 0x28
 81034e8:	2102      	movs	r1, #2
 81034ea:	4618      	mov	r0, r3
 81034ec:	f002 fc48 	bl	8105d80 <RCCEx_PLL3_Config>
 81034f0:	4603      	mov	r3, r0
 81034f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81034f6:	e004      	b.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034f8:	2301      	movs	r3, #1
 81034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81034fe:	e000      	b.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103506:	2b00      	cmp	r3, #0
 8103508:	d10a      	bne.n	8103520 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810350a:	4ba5      	ldr	r3, [pc, #660]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810350e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103518:	4aa1      	ldr	r2, [pc, #644]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810351a:	430b      	orrs	r3, r1
 810351c:	6513      	str	r3, [r2, #80]	@ 0x50
 810351e:	e003      	b.n	8103528 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103520:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103524:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103530:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8103534:	f04f 0900 	mov.w	r9, #0
 8103538:	ea58 0309 	orrs.w	r3, r8, r9
 810353c:	d047      	beq.n	81035ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810353e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103544:	2b04      	cmp	r3, #4
 8103546:	d82a      	bhi.n	810359e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103548:	a201      	add	r2, pc, #4	@ (adr r2, 8103550 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810354e:	bf00      	nop
 8103550:	08103565 	.word	0x08103565
 8103554:	08103573 	.word	0x08103573
 8103558:	08103589 	.word	0x08103589
 810355c:	081035a7 	.word	0x081035a7
 8103560:	081035a7 	.word	0x081035a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103564:	4b8e      	ldr	r3, [pc, #568]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103568:	4a8d      	ldr	r2, [pc, #564]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810356a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810356e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103570:	e01a      	b.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103576:	3308      	adds	r3, #8
 8103578:	2100      	movs	r1, #0
 810357a:	4618      	mov	r0, r3
 810357c:	f002 fb4e 	bl	8105c1c <RCCEx_PLL2_Config>
 8103580:	4603      	mov	r3, r0
 8103582:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103586:	e00f      	b.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810358c:	3328      	adds	r3, #40	@ 0x28
 810358e:	2100      	movs	r1, #0
 8103590:	4618      	mov	r0, r3
 8103592:	f002 fbf5 	bl	8105d80 <RCCEx_PLL3_Config>
 8103596:	4603      	mov	r3, r0
 8103598:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810359c:	e004      	b.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810359e:	2301      	movs	r3, #1
 81035a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81035a4:	e000      	b.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81035ac:	2b00      	cmp	r3, #0
 81035ae:	d10a      	bne.n	81035c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81035b0:	4b7b      	ldr	r3, [pc, #492]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81035b4:	f023 0107 	bic.w	r1, r3, #7
 81035b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81035be:	4a78      	ldr	r2, [pc, #480]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81035c0:	430b      	orrs	r3, r1
 81035c2:	6513      	str	r3, [r2, #80]	@ 0x50
 81035c4:	e003      	b.n	81035ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81035ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81035ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81035da:	f04f 0b00 	mov.w	fp, #0
 81035de:	ea5a 030b 	orrs.w	r3, sl, fp
 81035e2:	d04c      	beq.n	810367e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81035e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81035ee:	d030      	beq.n	8103652 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81035f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81035f4:	d829      	bhi.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81035f6:	2bc0      	cmp	r3, #192	@ 0xc0
 81035f8:	d02d      	beq.n	8103656 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81035fa:	2bc0      	cmp	r3, #192	@ 0xc0
 81035fc:	d825      	bhi.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81035fe:	2b80      	cmp	r3, #128	@ 0x80
 8103600:	d018      	beq.n	8103634 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103602:	2b80      	cmp	r3, #128	@ 0x80
 8103604:	d821      	bhi.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103606:	2b00      	cmp	r3, #0
 8103608:	d002      	beq.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810360a:	2b40      	cmp	r3, #64	@ 0x40
 810360c:	d007      	beq.n	810361e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810360e:	e01c      	b.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103610:	4b63      	ldr	r3, [pc, #396]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103614:	4a62      	ldr	r2, [pc, #392]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810361a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810361c:	e01c      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810361e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103622:	3308      	adds	r3, #8
 8103624:	2100      	movs	r1, #0
 8103626:	4618      	mov	r0, r3
 8103628:	f002 faf8 	bl	8105c1c <RCCEx_PLL2_Config>
 810362c:	4603      	mov	r3, r0
 810362e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103632:	e011      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103638:	3328      	adds	r3, #40	@ 0x28
 810363a:	2100      	movs	r1, #0
 810363c:	4618      	mov	r0, r3
 810363e:	f002 fb9f 	bl	8105d80 <RCCEx_PLL3_Config>
 8103642:	4603      	mov	r3, r0
 8103644:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103648:	e006      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810364a:	2301      	movs	r3, #1
 810364c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103650:	e002      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103652:	bf00      	nop
 8103654:	e000      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810365c:	2b00      	cmp	r3, #0
 810365e:	d10a      	bne.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103660:	4b4f      	ldr	r3, [pc, #316]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103664:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810366c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810366e:	4a4c      	ldr	r2, [pc, #304]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103670:	430b      	orrs	r3, r1
 8103672:	6513      	str	r3, [r2, #80]	@ 0x50
 8103674:	e003      	b.n	810367e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103676:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810367a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810367e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103686:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810368a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810368e:	2300      	movs	r3, #0
 8103690:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8103694:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8103698:	460b      	mov	r3, r1
 810369a:	4313      	orrs	r3, r2
 810369c:	d053      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81036a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81036aa:	d035      	beq.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81036ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81036b0:	d82e      	bhi.n	8103710 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81036b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81036b6:	d031      	beq.n	810371c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81036b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81036bc:	d828      	bhi.n	8103710 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81036be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81036c2:	d01a      	beq.n	81036fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 81036c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81036c8:	d822      	bhi.n	8103710 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	d003      	beq.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81036ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81036d2:	d007      	beq.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81036d4:	e01c      	b.n	8103710 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036d6:	4b32      	ldr	r3, [pc, #200]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036da:	4a31      	ldr	r2, [pc, #196]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81036e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81036e2:	e01c      	b.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81036e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036e8:	3308      	adds	r3, #8
 81036ea:	2100      	movs	r1, #0
 81036ec:	4618      	mov	r0, r3
 81036ee:	f002 fa95 	bl	8105c1c <RCCEx_PLL2_Config>
 81036f2:	4603      	mov	r3, r0
 81036f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81036f8:	e011      	b.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81036fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036fe:	3328      	adds	r3, #40	@ 0x28
 8103700:	2100      	movs	r1, #0
 8103702:	4618      	mov	r0, r3
 8103704:	f002 fb3c 	bl	8105d80 <RCCEx_PLL3_Config>
 8103708:	4603      	mov	r3, r0
 810370a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810370e:	e006      	b.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103710:	2301      	movs	r3, #1
 8103712:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103716:	e002      	b.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103718:	bf00      	nop
 810371a:	e000      	b.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810371e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103722:	2b00      	cmp	r3, #0
 8103724:	d10b      	bne.n	810373e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103726:	4b1e      	ldr	r3, [pc, #120]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810372a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810372e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103736:	4a1a      	ldr	r2, [pc, #104]	@ (81037a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103738:	430b      	orrs	r3, r1
 810373a:	6593      	str	r3, [r2, #88]	@ 0x58
 810373c:	e003      	b.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810373e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103742:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810374e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103752:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103756:	2300      	movs	r3, #0
 8103758:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810375c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103760:	460b      	mov	r3, r1
 8103762:	4313      	orrs	r3, r2
 8103764:	d056      	beq.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810376a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810376e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103772:	d038      	beq.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103778:	d831      	bhi.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x376>
 810377a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810377e:	d034      	beq.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103780:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103784:	d82b      	bhi.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810378a:	d01d      	beq.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810378c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103790:	d825      	bhi.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103792:	2b00      	cmp	r3, #0
 8103794:	d006      	beq.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810379a:	d00a      	beq.n	81037b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810379c:	e01f      	b.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x376>
 810379e:	bf00      	nop
 81037a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81037a4:	4ba2      	ldr	r3, [pc, #648]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037a8:	4aa1      	ldr	r2, [pc, #644]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81037aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81037ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81037b0:	e01c      	b.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81037b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037b6:	3308      	adds	r3, #8
 81037b8:	2100      	movs	r1, #0
 81037ba:	4618      	mov	r0, r3
 81037bc:	f002 fa2e 	bl	8105c1c <RCCEx_PLL2_Config>
 81037c0:	4603      	mov	r3, r0
 81037c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81037c6:	e011      	b.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81037c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037cc:	3328      	adds	r3, #40	@ 0x28
 81037ce:	2100      	movs	r1, #0
 81037d0:	4618      	mov	r0, r3
 81037d2:	f002 fad5 	bl	8105d80 <RCCEx_PLL3_Config>
 81037d6:	4603      	mov	r3, r0
 81037d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81037dc:	e006      	b.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81037de:	2301      	movs	r3, #1
 81037e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81037e4:	e002      	b.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81037e6:	bf00      	nop
 81037e8:	e000      	b.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81037ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037f0:	2b00      	cmp	r3, #0
 81037f2:	d10b      	bne.n	810380c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81037f4:	4b8e      	ldr	r3, [pc, #568]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81037f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81037fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103804:	4a8a      	ldr	r2, [pc, #552]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103806:	430b      	orrs	r3, r1
 8103808:	6593      	str	r3, [r2, #88]	@ 0x58
 810380a:	e003      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810380c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103810:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103814:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103818:	e9d3 2300 	ldrd	r2, r3, [r3]
 810381c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103820:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103824:	2300      	movs	r3, #0
 8103826:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810382a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810382e:	460b      	mov	r3, r1
 8103830:	4313      	orrs	r3, r2
 8103832:	d03a      	beq.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103834:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810383a:	2b30      	cmp	r3, #48	@ 0x30
 810383c:	d01f      	beq.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x416>
 810383e:	2b30      	cmp	r3, #48	@ 0x30
 8103840:	d819      	bhi.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103842:	2b20      	cmp	r3, #32
 8103844:	d00c      	beq.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103846:	2b20      	cmp	r3, #32
 8103848:	d815      	bhi.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810384a:	2b00      	cmp	r3, #0
 810384c:	d019      	beq.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810384e:	2b10      	cmp	r3, #16
 8103850:	d111      	bne.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103852:	4b77      	ldr	r3, [pc, #476]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103856:	4a76      	ldr	r2, [pc, #472]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810385c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810385e:	e011      	b.n	8103884 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103864:	3308      	adds	r3, #8
 8103866:	2102      	movs	r1, #2
 8103868:	4618      	mov	r0, r3
 810386a:	f002 f9d7 	bl	8105c1c <RCCEx_PLL2_Config>
 810386e:	4603      	mov	r3, r0
 8103870:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103874:	e006      	b.n	8103884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103876:	2301      	movs	r3, #1
 8103878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810387c:	e002      	b.n	8103884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810387e:	bf00      	nop
 8103880:	e000      	b.n	8103884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103884:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103888:	2b00      	cmp	r3, #0
 810388a:	d10a      	bne.n	81038a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810388c:	4b68      	ldr	r3, [pc, #416]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810388e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103890:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810389a:	4a65      	ldr	r2, [pc, #404]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810389c:	430b      	orrs	r3, r1
 810389e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81038a0:	e003      	b.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81038a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81038aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81038b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81038ba:	2300      	movs	r3, #0
 81038bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81038c0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81038c4:	460b      	mov	r3, r1
 81038c6:	4313      	orrs	r3, r2
 81038c8:	d051      	beq.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81038ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81038d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81038d4:	d035      	beq.n	8103942 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81038d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81038da:	d82e      	bhi.n	810393a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81038dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81038e0:	d031      	beq.n	8103946 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81038e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81038e6:	d828      	bhi.n	810393a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81038e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81038ec:	d01a      	beq.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81038ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81038f2:	d822      	bhi.n	810393a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d003      	beq.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81038f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81038fc:	d007      	beq.n	810390e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81038fe:	e01c      	b.n	810393a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103900:	4b4b      	ldr	r3, [pc, #300]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103904:	4a4a      	ldr	r2, [pc, #296]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810390a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810390c:	e01c      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810390e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103912:	3308      	adds	r3, #8
 8103914:	2100      	movs	r1, #0
 8103916:	4618      	mov	r0, r3
 8103918:	f002 f980 	bl	8105c1c <RCCEx_PLL2_Config>
 810391c:	4603      	mov	r3, r0
 810391e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103922:	e011      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103928:	3328      	adds	r3, #40	@ 0x28
 810392a:	2100      	movs	r1, #0
 810392c:	4618      	mov	r0, r3
 810392e:	f002 fa27 	bl	8105d80 <RCCEx_PLL3_Config>
 8103932:	4603      	mov	r3, r0
 8103934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103938:	e006      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810393a:	2301      	movs	r3, #1
 810393c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103940:	e002      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103942:	bf00      	nop
 8103944:	e000      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103948:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810394c:	2b00      	cmp	r3, #0
 810394e:	d10a      	bne.n	8103966 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103950:	4b37      	ldr	r3, [pc, #220]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103954:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810395c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810395e:	4a34      	ldr	r2, [pc, #208]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103960:	430b      	orrs	r3, r1
 8103962:	6513      	str	r3, [r2, #80]	@ 0x50
 8103964:	e003      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103966:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810396a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810396e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103976:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810397a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810397e:	2300      	movs	r3, #0
 8103980:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103984:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103988:	460b      	mov	r3, r1
 810398a:	4313      	orrs	r3, r2
 810398c:	d056      	beq.n	8103a3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810398e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103998:	d033      	beq.n	8103a02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810399a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810399e:	d82c      	bhi.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81039a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81039a4:	d02f      	beq.n	8103a06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81039a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81039aa:	d826      	bhi.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81039ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81039b0:	d02b      	beq.n	8103a0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81039b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81039b6:	d820      	bhi.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81039b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81039bc:	d012      	beq.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81039be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81039c2:	d81a      	bhi.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81039c4:	2b00      	cmp	r3, #0
 81039c6:	d022      	beq.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81039c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81039cc:	d115      	bne.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81039ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039d2:	3308      	adds	r3, #8
 81039d4:	2101      	movs	r1, #1
 81039d6:	4618      	mov	r0, r3
 81039d8:	f002 f920 	bl	8105c1c <RCCEx_PLL2_Config>
 81039dc:	4603      	mov	r3, r0
 81039de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81039e2:	e015      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81039e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039e8:	3328      	adds	r3, #40	@ 0x28
 81039ea:	2101      	movs	r1, #1
 81039ec:	4618      	mov	r0, r3
 81039ee:	f002 f9c7 	bl	8105d80 <RCCEx_PLL3_Config>
 81039f2:	4603      	mov	r3, r0
 81039f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81039f8:	e00a      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039fa:	2301      	movs	r3, #1
 81039fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103a00:	e006      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103a02:	bf00      	nop
 8103a04:	e004      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103a06:	bf00      	nop
 8103a08:	e002      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103a0a:	bf00      	nop
 8103a0c:	e000      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d10d      	bne.n	8103a34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103a18:	4b05      	ldr	r3, [pc, #20]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103a1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103a26:	4a02      	ldr	r2, [pc, #8]	@ (8103a30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a28:	430b      	orrs	r3, r1
 8103a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8103a2c:	e006      	b.n	8103a3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103a2e:	bf00      	nop
 8103a30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a44:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103a48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103a4c:	2300      	movs	r3, #0
 8103a4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103a52:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103a56:	460b      	mov	r3, r1
 8103a58:	4313      	orrs	r3, r2
 8103a5a:	d055      	beq.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103a68:	d033      	beq.n	8103ad2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103a6e:	d82c      	bhi.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103a74:	d02f      	beq.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103a7a:	d826      	bhi.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103a7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103a80:	d02b      	beq.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103a82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103a86:	d820      	bhi.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103a8c:	d012      	beq.n	8103ab4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103a92:	d81a      	bhi.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103a94:	2b00      	cmp	r3, #0
 8103a96:	d022      	beq.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103a9c:	d115      	bne.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aa2:	3308      	adds	r3, #8
 8103aa4:	2101      	movs	r1, #1
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	f002 f8b8 	bl	8105c1c <RCCEx_PLL2_Config>
 8103aac:	4603      	mov	r3, r0
 8103aae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103ab2:	e015      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ab8:	3328      	adds	r3, #40	@ 0x28
 8103aba:	2101      	movs	r1, #1
 8103abc:	4618      	mov	r0, r3
 8103abe:	f002 f95f 	bl	8105d80 <RCCEx_PLL3_Config>
 8103ac2:	4603      	mov	r3, r0
 8103ac4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103ac8:	e00a      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103aca:	2301      	movs	r3, #1
 8103acc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103ad0:	e006      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103ad2:	bf00      	nop
 8103ad4:	e004      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103ad6:	bf00      	nop
 8103ad8:	e002      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103ada:	bf00      	nop
 8103adc:	e000      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ae0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d10b      	bne.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103ae8:	4bb7      	ldr	r3, [pc, #732]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103aec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103af8:	4ab3      	ldr	r2, [pc, #716]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103afa:	430b      	orrs	r3, r1
 8103afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8103afe:	e003      	b.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b10:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8103b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103b18:	2300      	movs	r3, #0
 8103b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103b1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103b22:	460b      	mov	r3, r1
 8103b24:	4313      	orrs	r3, r2
 8103b26:	d02a      	beq.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b2e:	2b00      	cmp	r3, #0
 8103b30:	d011      	beq.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8103b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103b36:	d10a      	bne.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b3c:	3308      	adds	r3, #8
 8103b3e:	2101      	movs	r1, #1
 8103b40:	4618      	mov	r0, r3
 8103b42:	f002 f86b 	bl	8105c1c <RCCEx_PLL2_Config>
 8103b46:	4603      	mov	r3, r0
 8103b48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8103b4c:	e004      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b4e:	2301      	movs	r3, #1
 8103b50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b54:	e000      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8103b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	d10a      	bne.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103b60:	4b99      	ldr	r3, [pc, #612]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b64:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b6e:	4a96      	ldr	r2, [pc, #600]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b70:	430b      	orrs	r3, r1
 8103b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103b74:	e003      	b.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b86:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103b8e:	2300      	movs	r3, #0
 8103b90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103b94:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103b98:	460b      	mov	r3, r1
 8103b9a:	4313      	orrs	r3, r2
 8103b9c:	d037      	beq.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103ba8:	d00e      	beq.n	8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8103baa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bae:	d816      	bhi.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0x776>
 8103bb0:	2b00      	cmp	r3, #0
 8103bb2:	d018      	beq.n	8103be6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103bb8:	d111      	bne.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bba:	4b83      	ldr	r3, [pc, #524]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bbe:	4a82      	ldr	r2, [pc, #520]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103bc6:	e00f      	b.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bcc:	3308      	adds	r3, #8
 8103bce:	2101      	movs	r1, #1
 8103bd0:	4618      	mov	r0, r3
 8103bd2:	f002 f823 	bl	8105c1c <RCCEx_PLL2_Config>
 8103bd6:	4603      	mov	r3, r0
 8103bd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103bdc:	e004      	b.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bde:	2301      	movs	r3, #1
 8103be0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103be4:	e000      	b.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8103be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103be8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103bec:	2b00      	cmp	r3, #0
 8103bee:	d10a      	bne.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103bf0:	4b75      	ldr	r3, [pc, #468]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103bf4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103bfe:	4a72      	ldr	r2, [pc, #456]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103c00:	430b      	orrs	r3, r1
 8103c02:	6513      	str	r3, [r2, #80]	@ 0x50
 8103c04:	e003      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c16:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103c1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103c1e:	2300      	movs	r3, #0
 8103c20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103c24:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103c28:	460b      	mov	r3, r1
 8103c2a:	4313      	orrs	r3, r2
 8103c2c:	d03a      	beq.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103c34:	2b03      	cmp	r3, #3
 8103c36:	d81d      	bhi.n	8103c74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8103c38:	a201      	add	r2, pc, #4	@ (adr r2, 8103c40 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8103c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c3e:	bf00      	nop
 8103c40:	08103c7d 	.word	0x08103c7d
 8103c44:	08103c51 	.word	0x08103c51
 8103c48:	08103c5f 	.word	0x08103c5f
 8103c4c:	08103c7d 	.word	0x08103c7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c50:	4b5d      	ldr	r3, [pc, #372]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103c54:	4a5c      	ldr	r2, [pc, #368]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103c5c:	e00f      	b.n	8103c7e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c62:	3308      	adds	r3, #8
 8103c64:	2102      	movs	r1, #2
 8103c66:	4618      	mov	r0, r3
 8103c68:	f001 ffd8 	bl	8105c1c <RCCEx_PLL2_Config>
 8103c6c:	4603      	mov	r3, r0
 8103c6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103c72:	e004      	b.n	8103c7e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103c74:	2301      	movs	r3, #1
 8103c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103c7a:	e000      	b.n	8103c7e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8103c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c82:	2b00      	cmp	r3, #0
 8103c84:	d10a      	bne.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103c86:	4b50      	ldr	r3, [pc, #320]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103c8a:	f023 0103 	bic.w	r1, r3, #3
 8103c8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103c94:	4a4c      	ldr	r2, [pc, #304]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103c96:	430b      	orrs	r3, r1
 8103c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103c9a:	e003      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ca0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103cb4:	2300      	movs	r3, #0
 8103cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103cba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8103cbe:	460b      	mov	r3, r1
 8103cc0:	4313      	orrs	r3, r2
 8103cc2:	f000 80a0 	beq.w	8103e06 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103cc6:	4b41      	ldr	r3, [pc, #260]	@ (8103dcc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	4a40      	ldr	r2, [pc, #256]	@ (8103dcc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103cd2:	f7fe fb7f 	bl	81023d4 <HAL_GetTick>
 8103cd6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103cda:	e00b      	b.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103cdc:	f7fe fb7a 	bl	81023d4 <HAL_GetTick>
 8103ce0:	4602      	mov	r2, r0
 8103ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8103ce6:	1ad3      	subs	r3, r2, r3
 8103ce8:	2b64      	cmp	r3, #100	@ 0x64
 8103cea:	d903      	bls.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103cec:	2303      	movs	r3, #3
 8103cee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103cf2:	e005      	b.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103cf4:	4b35      	ldr	r3, [pc, #212]	@ (8103dcc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103cfc:	2b00      	cmp	r3, #0
 8103cfe:	d0ed      	beq.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103d00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d17a      	bne.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103d08:	4b2f      	ldr	r3, [pc, #188]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103d14:	4053      	eors	r3, r2
 8103d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103d1a:	2b00      	cmp	r3, #0
 8103d1c:	d015      	beq.n	8103d4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103d26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103d2a:	4b27      	ldr	r3, [pc, #156]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103d2e:	4a26      	ldr	r2, [pc, #152]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103d34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103d36:	4b24      	ldr	r3, [pc, #144]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103d3a:	4a23      	ldr	r2, [pc, #140]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103d40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103d42:	4a21      	ldr	r2, [pc, #132]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8103d48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103d56:	d118      	bne.n	8103d8a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103d58:	f7fe fb3c 	bl	81023d4 <HAL_GetTick>
 8103d5c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103d60:	e00d      	b.n	8103d7e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103d62:	f7fe fb37 	bl	81023d4 <HAL_GetTick>
 8103d66:	4602      	mov	r2, r0
 8103d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8103d6c:	1ad2      	subs	r2, r2, r3
 8103d6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103d72:	429a      	cmp	r2, r3
 8103d74:	d903      	bls.n	8103d7e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103d76:	2303      	movs	r3, #3
 8103d78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8103d7c:	e005      	b.n	8103d8a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103d7e:	4b12      	ldr	r3, [pc, #72]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103d82:	f003 0302 	and.w	r3, r3, #2
 8103d86:	2b00      	cmp	r3, #0
 8103d88:	d0eb      	beq.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8103d8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d8e:	2b00      	cmp	r3, #0
 8103d90:	d130      	bne.n	8103df4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103da2:	d115      	bne.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8103da4:	4b08      	ldr	r3, [pc, #32]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103da6:	691b      	ldr	r3, [r3, #16]
 8103da8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8103dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103db0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103db4:	091b      	lsrs	r3, r3, #4
 8103db6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8103dba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8103dbe:	4a02      	ldr	r2, [pc, #8]	@ (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103dc0:	430b      	orrs	r3, r1
 8103dc2:	6113      	str	r3, [r2, #16]
 8103dc4:	e00a      	b.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103dc6:	bf00      	nop
 8103dc8:	58024400 	.word	0x58024400
 8103dcc:	58024800 	.word	0x58024800
 8103dd0:	4bd4      	ldr	r3, [pc, #848]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103dd2:	691b      	ldr	r3, [r3, #16]
 8103dd4:	4ad3      	ldr	r2, [pc, #844]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103dd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103dda:	6113      	str	r3, [r2, #16]
 8103ddc:	4bd1      	ldr	r3, [pc, #836]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103dde:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8103de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103de4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103dec:	4acd      	ldr	r2, [pc, #820]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103dee:	430b      	orrs	r3, r1
 8103df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8103df2:	e008      	b.n	8103e06 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103df4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103df8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8103dfc:	e003      	b.n	8103e06 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e0e:	f002 0301 	and.w	r3, r2, #1
 8103e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103e16:	2300      	movs	r3, #0
 8103e18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8103e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8103e20:	460b      	mov	r3, r1
 8103e22:	4313      	orrs	r3, r2
 8103e24:	f000 808b 	beq.w	8103f3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103e30:	2b28      	cmp	r3, #40	@ 0x28
 8103e32:	d86b      	bhi.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103e34:	a201      	add	r2, pc, #4	@ (adr r2, 8103e3c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e3a:	bf00      	nop
 8103e3c:	08103f15 	.word	0x08103f15
 8103e40:	08103f0d 	.word	0x08103f0d
 8103e44:	08103f0d 	.word	0x08103f0d
 8103e48:	08103f0d 	.word	0x08103f0d
 8103e4c:	08103f0d 	.word	0x08103f0d
 8103e50:	08103f0d 	.word	0x08103f0d
 8103e54:	08103f0d 	.word	0x08103f0d
 8103e58:	08103f0d 	.word	0x08103f0d
 8103e5c:	08103ee1 	.word	0x08103ee1
 8103e60:	08103f0d 	.word	0x08103f0d
 8103e64:	08103f0d 	.word	0x08103f0d
 8103e68:	08103f0d 	.word	0x08103f0d
 8103e6c:	08103f0d 	.word	0x08103f0d
 8103e70:	08103f0d 	.word	0x08103f0d
 8103e74:	08103f0d 	.word	0x08103f0d
 8103e78:	08103f0d 	.word	0x08103f0d
 8103e7c:	08103ef7 	.word	0x08103ef7
 8103e80:	08103f0d 	.word	0x08103f0d
 8103e84:	08103f0d 	.word	0x08103f0d
 8103e88:	08103f0d 	.word	0x08103f0d
 8103e8c:	08103f0d 	.word	0x08103f0d
 8103e90:	08103f0d 	.word	0x08103f0d
 8103e94:	08103f0d 	.word	0x08103f0d
 8103e98:	08103f0d 	.word	0x08103f0d
 8103e9c:	08103f15 	.word	0x08103f15
 8103ea0:	08103f0d 	.word	0x08103f0d
 8103ea4:	08103f0d 	.word	0x08103f0d
 8103ea8:	08103f0d 	.word	0x08103f0d
 8103eac:	08103f0d 	.word	0x08103f0d
 8103eb0:	08103f0d 	.word	0x08103f0d
 8103eb4:	08103f0d 	.word	0x08103f0d
 8103eb8:	08103f0d 	.word	0x08103f0d
 8103ebc:	08103f15 	.word	0x08103f15
 8103ec0:	08103f0d 	.word	0x08103f0d
 8103ec4:	08103f0d 	.word	0x08103f0d
 8103ec8:	08103f0d 	.word	0x08103f0d
 8103ecc:	08103f0d 	.word	0x08103f0d
 8103ed0:	08103f0d 	.word	0x08103f0d
 8103ed4:	08103f0d 	.word	0x08103f0d
 8103ed8:	08103f0d 	.word	0x08103f0d
 8103edc:	08103f15 	.word	0x08103f15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ee4:	3308      	adds	r3, #8
 8103ee6:	2101      	movs	r1, #1
 8103ee8:	4618      	mov	r0, r3
 8103eea:	f001 fe97 	bl	8105c1c <RCCEx_PLL2_Config>
 8103eee:	4603      	mov	r3, r0
 8103ef0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103ef4:	e00f      	b.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103efa:	3328      	adds	r3, #40	@ 0x28
 8103efc:	2101      	movs	r1, #1
 8103efe:	4618      	mov	r0, r3
 8103f00:	f001 ff3e 	bl	8105d80 <RCCEx_PLL3_Config>
 8103f04:	4603      	mov	r3, r0
 8103f06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103f0a:	e004      	b.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f0c:	2301      	movs	r3, #1
 8103f0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103f12:	e000      	b.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f1a:	2b00      	cmp	r3, #0
 8103f1c:	d10b      	bne.n	8103f36 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103f1e:	4b81      	ldr	r3, [pc, #516]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103f30:	430b      	orrs	r3, r1
 8103f32:	6553      	str	r3, [r2, #84]	@ 0x54
 8103f34:	e003      	b.n	8103f3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f46:	f002 0302 	and.w	r3, r2, #2
 8103f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103f4e:	2300      	movs	r3, #0
 8103f50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103f54:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103f58:	460b      	mov	r3, r1
 8103f5a:	4313      	orrs	r3, r2
 8103f5c:	d042      	beq.n	8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103f5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103f64:	2b05      	cmp	r3, #5
 8103f66:	d825      	bhi.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8103f68:	a201      	add	r2, pc, #4	@ (adr r2, 8103f70 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8103f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f6e:	bf00      	nop
 8103f70:	08103fbd 	.word	0x08103fbd
 8103f74:	08103f89 	.word	0x08103f89
 8103f78:	08103f9f 	.word	0x08103f9f
 8103f7c:	08103fbd 	.word	0x08103fbd
 8103f80:	08103fbd 	.word	0x08103fbd
 8103f84:	08103fbd 	.word	0x08103fbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f8c:	3308      	adds	r3, #8
 8103f8e:	2101      	movs	r1, #1
 8103f90:	4618      	mov	r0, r3
 8103f92:	f001 fe43 	bl	8105c1c <RCCEx_PLL2_Config>
 8103f96:	4603      	mov	r3, r0
 8103f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103f9c:	e00f      	b.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fa2:	3328      	adds	r3, #40	@ 0x28
 8103fa4:	2101      	movs	r1, #1
 8103fa6:	4618      	mov	r0, r3
 8103fa8:	f001 feea 	bl	8105d80 <RCCEx_PLL3_Config>
 8103fac:	4603      	mov	r3, r0
 8103fae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103fb2:	e004      	b.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103fb4:	2301      	movs	r3, #1
 8103fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103fba:	e000      	b.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fc2:	2b00      	cmp	r3, #0
 8103fc4:	d10a      	bne.n	8103fdc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103fc6:	4b57      	ldr	r3, [pc, #348]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fca:	f023 0107 	bic.w	r1, r3, #7
 8103fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103fd4:	4a53      	ldr	r2, [pc, #332]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103fd6:	430b      	orrs	r3, r1
 8103fd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8103fda:	e003      	b.n	8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fe0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fec:	f002 0304 	and.w	r3, r2, #4
 8103ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103ff4:	2300      	movs	r3, #0
 8103ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103ffa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103ffe:	460b      	mov	r3, r1
 8104000:	4313      	orrs	r3, r2
 8104002:	d044      	beq.n	810408e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810400c:	2b05      	cmp	r3, #5
 810400e:	d825      	bhi.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8104010:	a201      	add	r2, pc, #4	@ (adr r2, 8104018 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8104012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104016:	bf00      	nop
 8104018:	08104065 	.word	0x08104065
 810401c:	08104031 	.word	0x08104031
 8104020:	08104047 	.word	0x08104047
 8104024:	08104065 	.word	0x08104065
 8104028:	08104065 	.word	0x08104065
 810402c:	08104065 	.word	0x08104065
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104034:	3308      	adds	r3, #8
 8104036:	2101      	movs	r1, #1
 8104038:	4618      	mov	r0, r3
 810403a:	f001 fdef 	bl	8105c1c <RCCEx_PLL2_Config>
 810403e:	4603      	mov	r3, r0
 8104040:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104044:	e00f      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810404a:	3328      	adds	r3, #40	@ 0x28
 810404c:	2101      	movs	r1, #1
 810404e:	4618      	mov	r0, r3
 8104050:	f001 fe96 	bl	8105d80 <RCCEx_PLL3_Config>
 8104054:	4603      	mov	r3, r0
 8104056:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810405a:	e004      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810405c:	2301      	movs	r3, #1
 810405e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104062:	e000      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8104064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104066:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810406a:	2b00      	cmp	r3, #0
 810406c:	d10b      	bne.n	8104086 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810406e:	4b2d      	ldr	r3, [pc, #180]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104072:	f023 0107 	bic.w	r1, r3, #7
 8104076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810407a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810407e:	4a29      	ldr	r2, [pc, #164]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104080:	430b      	orrs	r3, r1
 8104082:	6593      	str	r3, [r2, #88]	@ 0x58
 8104084:	e003      	b.n	810408e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810408a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810408e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104096:	f002 0320 	and.w	r3, r2, #32
 810409a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810409e:	2300      	movs	r3, #0
 81040a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81040a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81040a8:	460b      	mov	r3, r1
 81040aa:	4313      	orrs	r3, r2
 81040ac:	d057      	beq.n	810415e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81040ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81040b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81040ba:	d035      	beq.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 81040bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81040c0:	d82c      	bhi.n	810411c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81040c6:	d031      	beq.n	810412c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 81040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81040cc:	d826      	bhi.n	810411c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81040ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81040d2:	d02d      	beq.n	8104130 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 81040d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81040d8:	d820      	bhi.n	810411c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81040da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81040de:	d012      	beq.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 81040e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81040e4:	d81a      	bhi.n	810411c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	d024      	beq.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 81040ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81040ee:	d115      	bne.n	810411c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81040f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040f4:	3308      	adds	r3, #8
 81040f6:	2100      	movs	r1, #0
 81040f8:	4618      	mov	r0, r3
 81040fa:	f001 fd8f 	bl	8105c1c <RCCEx_PLL2_Config>
 81040fe:	4603      	mov	r3, r0
 8104100:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104104:	e017      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810410a:	3328      	adds	r3, #40	@ 0x28
 810410c:	2102      	movs	r1, #2
 810410e:	4618      	mov	r0, r3
 8104110:	f001 fe36 	bl	8105d80 <RCCEx_PLL3_Config>
 8104114:	4603      	mov	r3, r0
 8104116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810411a:	e00c      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810411c:	2301      	movs	r3, #1
 810411e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104122:	e008      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8104124:	58024400 	.word	0x58024400
        break;
 8104128:	bf00      	nop
 810412a:	e004      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810412c:	bf00      	nop
 810412e:	e002      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104130:	bf00      	nop
 8104132:	e000      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104136:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810413a:	2b00      	cmp	r3, #0
 810413c:	d10b      	bne.n	8104156 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810413e:	4bc2      	ldr	r3, [pc, #776]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104142:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810414e:	4abe      	ldr	r2, [pc, #760]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104150:	430b      	orrs	r3, r1
 8104152:	6553      	str	r3, [r2, #84]	@ 0x54
 8104154:	e003      	b.n	810415e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810415a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104166:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810416a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810416e:	2300      	movs	r3, #0
 8104170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8104174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8104178:	460b      	mov	r3, r1
 810417a:	4313      	orrs	r3, r2
 810417c:	d055      	beq.n	810422a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810417e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104186:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810418a:	d033      	beq.n	81041f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810418c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8104190:	d82c      	bhi.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104196:	d02f      	beq.n	81041f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8104198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810419c:	d826      	bhi.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810419e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81041a2:	d02b      	beq.n	81041fc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 81041a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81041a8:	d820      	bhi.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81041aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81041ae:	d012      	beq.n	81041d6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 81041b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81041b4:	d81a      	bhi.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81041b6:	2b00      	cmp	r3, #0
 81041b8:	d022      	beq.n	8104200 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 81041ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81041be:	d115      	bne.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81041c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041c4:	3308      	adds	r3, #8
 81041c6:	2100      	movs	r1, #0
 81041c8:	4618      	mov	r0, r3
 81041ca:	f001 fd27 	bl	8105c1c <RCCEx_PLL2_Config>
 81041ce:	4603      	mov	r3, r0
 81041d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81041d4:	e015      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81041d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041da:	3328      	adds	r3, #40	@ 0x28
 81041dc:	2102      	movs	r1, #2
 81041de:	4618      	mov	r0, r3
 81041e0:	f001 fdce 	bl	8105d80 <RCCEx_PLL3_Config>
 81041e4:	4603      	mov	r3, r0
 81041e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81041ea:	e00a      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041ec:	2301      	movs	r3, #1
 81041ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81041f2:	e006      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81041f4:	bf00      	nop
 81041f6:	e004      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81041f8:	bf00      	nop
 81041fa:	e002      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81041fc:	bf00      	nop
 81041fe:	e000      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104202:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104206:	2b00      	cmp	r3, #0
 8104208:	d10b      	bne.n	8104222 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810420a:	4b8f      	ldr	r3, [pc, #572]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810420c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810420e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8104212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810421a:	4a8b      	ldr	r2, [pc, #556]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810421c:	430b      	orrs	r3, r1
 810421e:	6593      	str	r3, [r2, #88]	@ 0x58
 8104220:	e003      	b.n	810422a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104222:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104226:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810422a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104232:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104236:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810423a:	2300      	movs	r3, #0
 810423c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8104240:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8104244:	460b      	mov	r3, r1
 8104246:	4313      	orrs	r3, r2
 8104248:	d055      	beq.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810424a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810424e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104252:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104256:	d033      	beq.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8104258:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810425c:	d82c      	bhi.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810425e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104262:	d02f      	beq.n	81042c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8104264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104268:	d826      	bhi.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810426a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810426e:	d02b      	beq.n	81042c8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8104270:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104274:	d820      	bhi.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810427a:	d012      	beq.n	81042a2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810427c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104280:	d81a      	bhi.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104282:	2b00      	cmp	r3, #0
 8104284:	d022      	beq.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8104286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810428a:	d115      	bne.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810428c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104290:	3308      	adds	r3, #8
 8104292:	2100      	movs	r1, #0
 8104294:	4618      	mov	r0, r3
 8104296:	f001 fcc1 	bl	8105c1c <RCCEx_PLL2_Config>
 810429a:	4603      	mov	r3, r0
 810429c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81042a0:	e015      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81042a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042a6:	3328      	adds	r3, #40	@ 0x28
 81042a8:	2102      	movs	r1, #2
 81042aa:	4618      	mov	r0, r3
 81042ac:	f001 fd68 	bl	8105d80 <RCCEx_PLL3_Config>
 81042b0:	4603      	mov	r3, r0
 81042b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81042b6:	e00a      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042b8:	2301      	movs	r3, #1
 81042ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81042be:	e006      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81042c0:	bf00      	nop
 81042c2:	e004      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81042c4:	bf00      	nop
 81042c6:	e002      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81042c8:	bf00      	nop
 81042ca:	e000      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d10b      	bne.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81042d6:	4b5c      	ldr	r3, [pc, #368]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81042da:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81042de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81042e6:	4a58      	ldr	r2, [pc, #352]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81042e8:	430b      	orrs	r3, r1
 81042ea:	6593      	str	r3, [r2, #88]	@ 0x58
 81042ec:	e003      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81042f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042fe:	f002 0308 	and.w	r3, r2, #8
 8104302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8104306:	2300      	movs	r3, #0
 8104308:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810430c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8104310:	460b      	mov	r3, r1
 8104312:	4313      	orrs	r3, r2
 8104314:	d01e      	beq.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104322:	d10c      	bne.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104328:	3328      	adds	r3, #40	@ 0x28
 810432a:	2102      	movs	r1, #2
 810432c:	4618      	mov	r0, r3
 810432e:	f001 fd27 	bl	8105d80 <RCCEx_PLL3_Config>
 8104332:	4603      	mov	r3, r0
 8104334:	2b00      	cmp	r3, #0
 8104336:	d002      	beq.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8104338:	2301      	movs	r3, #1
 810433a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810433e:	4b42      	ldr	r3, [pc, #264]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810434e:	4a3e      	ldr	r2, [pc, #248]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104350:	430b      	orrs	r3, r1
 8104352:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104358:	e9d3 2300 	ldrd	r2, r3, [r3]
 810435c:	f002 0310 	and.w	r3, r2, #16
 8104360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8104364:	2300      	movs	r3, #0
 8104366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810436a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810436e:	460b      	mov	r3, r1
 8104370:	4313      	orrs	r3, r2
 8104372:	d01e      	beq.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104378:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810437c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104380:	d10c      	bne.n	810439c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104386:	3328      	adds	r3, #40	@ 0x28
 8104388:	2102      	movs	r1, #2
 810438a:	4618      	mov	r0, r3
 810438c:	f001 fcf8 	bl	8105d80 <RCCEx_PLL3_Config>
 8104390:	4603      	mov	r3, r0
 8104392:	2b00      	cmp	r3, #0
 8104394:	d002      	beq.n	810439c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8104396:	2301      	movs	r3, #1
 8104398:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810439c:	4b2a      	ldr	r3, [pc, #168]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81043a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81043a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81043ac:	4a26      	ldr	r2, [pc, #152]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81043ae:	430b      	orrs	r3, r1
 81043b0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81043b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81043be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81043c2:	2300      	movs	r3, #0
 81043c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81043c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81043cc:	460b      	mov	r3, r1
 81043ce:	4313      	orrs	r3, r2
 81043d0:	d040      	beq.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81043d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81043da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81043de:	d022      	beq.n	8104426 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 81043e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81043e4:	d81b      	bhi.n	810441e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81043e6:	2b00      	cmp	r3, #0
 81043e8:	d003      	beq.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81043ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81043ee:	d00b      	beq.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81043f0:	e015      	b.n	810441e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81043f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043f6:	3308      	adds	r3, #8
 81043f8:	2100      	movs	r1, #0
 81043fa:	4618      	mov	r0, r3
 81043fc:	f001 fc0e 	bl	8105c1c <RCCEx_PLL2_Config>
 8104400:	4603      	mov	r3, r0
 8104402:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104406:	e00f      	b.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810440c:	3328      	adds	r3, #40	@ 0x28
 810440e:	2102      	movs	r1, #2
 8104410:	4618      	mov	r0, r3
 8104412:	f001 fcb5 	bl	8105d80 <RCCEx_PLL3_Config>
 8104416:	4603      	mov	r3, r0
 8104418:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810441c:	e004      	b.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810441e:	2301      	movs	r3, #1
 8104420:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104424:	e000      	b.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8104426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104428:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810442c:	2b00      	cmp	r3, #0
 810442e:	d10d      	bne.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104430:	4b05      	ldr	r3, [pc, #20]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104434:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8104438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810443c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104440:	4a01      	ldr	r2, [pc, #4]	@ (8104448 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104442:	430b      	orrs	r3, r1
 8104444:	6593      	str	r3, [r2, #88]	@ 0x58
 8104446:	e005      	b.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8104448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810444c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104450:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104454:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810445c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8104460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104462:	2300      	movs	r3, #0
 8104464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104466:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810446a:	460b      	mov	r3, r1
 810446c:	4313      	orrs	r3, r2
 810446e:	d03b      	beq.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104478:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810447c:	d01f      	beq.n	81044be <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810447e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104482:	d818      	bhi.n	81044b6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8104484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104488:	d003      	beq.n	8104492 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810448a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810448e:	d007      	beq.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8104490:	e011      	b.n	81044b6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104492:	4b64      	ldr	r3, [pc, #400]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104496:	4a63      	ldr	r2, [pc, #396]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810449c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810449e:	e00f      	b.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044a4:	3328      	adds	r3, #40	@ 0x28
 81044a6:	2101      	movs	r1, #1
 81044a8:	4618      	mov	r0, r3
 81044aa:	f001 fc69 	bl	8105d80 <RCCEx_PLL3_Config>
 81044ae:	4603      	mov	r3, r0
 81044b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 81044b4:	e004      	b.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81044b6:	2301      	movs	r3, #1
 81044b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81044bc:	e000      	b.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 81044be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81044c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81044c4:	2b00      	cmp	r3, #0
 81044c6:	d10b      	bne.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81044c8:	4b56      	ldr	r3, [pc, #344]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81044d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81044d8:	4a52      	ldr	r2, [pc, #328]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81044da:	430b      	orrs	r3, r1
 81044dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81044de:	e003      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81044e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81044e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044f0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81044f4:	673b      	str	r3, [r7, #112]	@ 0x70
 81044f6:	2300      	movs	r3, #0
 81044f8:	677b      	str	r3, [r7, #116]	@ 0x74
 81044fa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81044fe:	460b      	mov	r3, r1
 8104500:	4313      	orrs	r3, r2
 8104502:	d031      	beq.n	8104568 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104504:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810450a:	2b00      	cmp	r3, #0
 810450c:	d003      	beq.n	8104516 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810450e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104512:	d007      	beq.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8104514:	e011      	b.n	810453a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104516:	4b43      	ldr	r3, [pc, #268]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810451a:	4a42      	ldr	r2, [pc, #264]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810451c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104522:	e00e      	b.n	8104542 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104528:	3308      	adds	r3, #8
 810452a:	2102      	movs	r1, #2
 810452c:	4618      	mov	r0, r3
 810452e:	f001 fb75 	bl	8105c1c <RCCEx_PLL2_Config>
 8104532:	4603      	mov	r3, r0
 8104534:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104538:	e003      	b.n	8104542 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810453a:	2301      	movs	r3, #1
 810453c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104542:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104546:	2b00      	cmp	r3, #0
 8104548:	d10a      	bne.n	8104560 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810454a:	4b36      	ldr	r3, [pc, #216]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810454e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104558:	4a32      	ldr	r2, [pc, #200]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810455a:	430b      	orrs	r3, r1
 810455c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810455e:	e003      	b.n	8104568 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104560:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104564:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104570:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104576:	2300      	movs	r3, #0
 8104578:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810457a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810457e:	460b      	mov	r3, r1
 8104580:	4313      	orrs	r3, r2
 8104582:	d00c      	beq.n	810459e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104588:	3328      	adds	r3, #40	@ 0x28
 810458a:	2102      	movs	r1, #2
 810458c:	4618      	mov	r0, r3
 810458e:	f001 fbf7 	bl	8105d80 <RCCEx_PLL3_Config>
 8104592:	4603      	mov	r3, r0
 8104594:	2b00      	cmp	r3, #0
 8104596:	d002      	beq.n	810459e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8104598:	2301      	movs	r3, #1
 810459a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810459e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81045aa:	663b      	str	r3, [r7, #96]	@ 0x60
 81045ac:	2300      	movs	r3, #0
 81045ae:	667b      	str	r3, [r7, #100]	@ 0x64
 81045b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81045b4:	460b      	mov	r3, r1
 81045b6:	4313      	orrs	r3, r2
 81045b8:	d03a      	beq.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81045ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81045c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81045c6:	d018      	beq.n	81045fa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 81045c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81045cc:	d811      	bhi.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81045ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81045d2:	d014      	beq.n	81045fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81045d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81045d8:	d80b      	bhi.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d011      	beq.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 81045de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81045e2:	d106      	bne.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045e4:	4b0f      	ldr	r3, [pc, #60]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045e8:	4a0e      	ldr	r2, [pc, #56]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81045ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81045ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81045f0:	e008      	b.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81045f2:	2301      	movs	r3, #1
 81045f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81045f8:	e004      	b.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81045fa:	bf00      	nop
 81045fc:	e002      	b.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81045fe:	bf00      	nop
 8104600:	e000      	b.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104604:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104608:	2b00      	cmp	r3, #0
 810460a:	d10d      	bne.n	8104628 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810460c:	4b05      	ldr	r3, [pc, #20]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104610:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810461c:	4a01      	ldr	r2, [pc, #4]	@ (8104624 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810461e:	430b      	orrs	r3, r1
 8104620:	6553      	str	r3, [r2, #84]	@ 0x54
 8104622:	e005      	b.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8104624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104628:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810462c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104638:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810463c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810463e:	2300      	movs	r3, #0
 8104640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104642:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104646:	460b      	mov	r3, r1
 8104648:	4313      	orrs	r3, r2
 810464a:	d009      	beq.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810464c:	4baa      	ldr	r3, [pc, #680]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810464e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104650:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810465a:	4aa7      	ldr	r2, [pc, #668]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810465c:	430b      	orrs	r3, r1
 810465e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104668:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810466c:	653b      	str	r3, [r7, #80]	@ 0x50
 810466e:	2300      	movs	r3, #0
 8104670:	657b      	str	r3, [r7, #84]	@ 0x54
 8104672:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104676:	460b      	mov	r3, r1
 8104678:	4313      	orrs	r3, r2
 810467a:	d00a      	beq.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810467c:	4b9e      	ldr	r3, [pc, #632]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810467e:	691b      	ldr	r3, [r3, #16]
 8104680:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8104684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104688:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810468c:	4a9a      	ldr	r2, [pc, #616]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810468e:	430b      	orrs	r3, r1
 8104690:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104696:	e9d3 2300 	ldrd	r2, r3, [r3]
 810469a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810469e:	64bb      	str	r3, [r7, #72]	@ 0x48
 81046a0:	2300      	movs	r3, #0
 81046a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81046a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81046a8:	460b      	mov	r3, r1
 81046aa:	4313      	orrs	r3, r2
 81046ac:	d009      	beq.n	81046c2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81046ae:	4b92      	ldr	r3, [pc, #584]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81046b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81046b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81046bc:	4a8e      	ldr	r2, [pc, #568]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81046be:	430b      	orrs	r3, r1
 81046c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81046c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81046ce:	643b      	str	r3, [r7, #64]	@ 0x40
 81046d0:	2300      	movs	r3, #0
 81046d2:	647b      	str	r3, [r7, #68]	@ 0x44
 81046d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81046d8:	460b      	mov	r3, r1
 81046da:	4313      	orrs	r3, r2
 81046dc:	d00e      	beq.n	81046fc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81046de:	4b86      	ldr	r3, [pc, #536]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81046e0:	691b      	ldr	r3, [r3, #16]
 81046e2:	4a85      	ldr	r2, [pc, #532]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81046e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81046e8:	6113      	str	r3, [r2, #16]
 81046ea:	4b83      	ldr	r3, [pc, #524]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81046ec:	6919      	ldr	r1, [r3, #16]
 81046ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81046f6:	4a80      	ldr	r2, [pc, #512]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81046f8:	430b      	orrs	r3, r1
 81046fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81046fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104704:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104708:	63bb      	str	r3, [r7, #56]	@ 0x38
 810470a:	2300      	movs	r3, #0
 810470c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810470e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8104712:	460b      	mov	r3, r1
 8104714:	4313      	orrs	r3, r2
 8104716:	d009      	beq.n	810472c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104718:	4b77      	ldr	r3, [pc, #476]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810471a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810471c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104720:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104726:	4a74      	ldr	r2, [pc, #464]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104728:	430b      	orrs	r3, r1
 810472a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810472c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104734:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104738:	633b      	str	r3, [r7, #48]	@ 0x30
 810473a:	2300      	movs	r3, #0
 810473c:	637b      	str	r3, [r7, #52]	@ 0x34
 810473e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104742:	460b      	mov	r3, r1
 8104744:	4313      	orrs	r3, r2
 8104746:	d00a      	beq.n	810475e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104748:	4b6b      	ldr	r3, [pc, #428]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810474c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104758:	4a67      	ldr	r2, [pc, #412]	@ (81048f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810475a:	430b      	orrs	r3, r1
 810475c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810475e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104766:	2100      	movs	r1, #0
 8104768:	62b9      	str	r1, [r7, #40]	@ 0x28
 810476a:	f003 0301 	and.w	r3, r3, #1
 810476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104770:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104774:	460b      	mov	r3, r1
 8104776:	4313      	orrs	r3, r2
 8104778:	d011      	beq.n	810479e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810477a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810477e:	3308      	adds	r3, #8
 8104780:	2100      	movs	r1, #0
 8104782:	4618      	mov	r0, r3
 8104784:	f001 fa4a 	bl	8105c1c <RCCEx_PLL2_Config>
 8104788:	4603      	mov	r3, r0
 810478a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810478e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104792:	2b00      	cmp	r3, #0
 8104794:	d003      	beq.n	810479e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104796:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810479a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810479e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047a6:	2100      	movs	r1, #0
 81047a8:	6239      	str	r1, [r7, #32]
 81047aa:	f003 0302 	and.w	r3, r3, #2
 81047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 81047b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81047b4:	460b      	mov	r3, r1
 81047b6:	4313      	orrs	r3, r2
 81047b8:	d011      	beq.n	81047de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81047ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047be:	3308      	adds	r3, #8
 81047c0:	2101      	movs	r1, #1
 81047c2:	4618      	mov	r0, r3
 81047c4:	f001 fa2a 	bl	8105c1c <RCCEx_PLL2_Config>
 81047c8:	4603      	mov	r3, r0
 81047ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81047ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d003      	beq.n	81047de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81047da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81047de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047e6:	2100      	movs	r1, #0
 81047e8:	61b9      	str	r1, [r7, #24]
 81047ea:	f003 0304 	and.w	r3, r3, #4
 81047ee:	61fb      	str	r3, [r7, #28]
 81047f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81047f4:	460b      	mov	r3, r1
 81047f6:	4313      	orrs	r3, r2
 81047f8:	d011      	beq.n	810481e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81047fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047fe:	3308      	adds	r3, #8
 8104800:	2102      	movs	r1, #2
 8104802:	4618      	mov	r0, r3
 8104804:	f001 fa0a 	bl	8105c1c <RCCEx_PLL2_Config>
 8104808:	4603      	mov	r3, r0
 810480a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810480e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104812:	2b00      	cmp	r3, #0
 8104814:	d003      	beq.n	810481e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104816:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810481a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810481e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104826:	2100      	movs	r1, #0
 8104828:	6139      	str	r1, [r7, #16]
 810482a:	f003 0308 	and.w	r3, r3, #8
 810482e:	617b      	str	r3, [r7, #20]
 8104830:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104834:	460b      	mov	r3, r1
 8104836:	4313      	orrs	r3, r2
 8104838:	d011      	beq.n	810485e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810483a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810483e:	3328      	adds	r3, #40	@ 0x28
 8104840:	2100      	movs	r1, #0
 8104842:	4618      	mov	r0, r3
 8104844:	f001 fa9c 	bl	8105d80 <RCCEx_PLL3_Config>
 8104848:	4603      	mov	r3, r0
 810484a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810484e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104852:	2b00      	cmp	r3, #0
 8104854:	d003      	beq.n	810485e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104856:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810485a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810485e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104866:	2100      	movs	r1, #0
 8104868:	60b9      	str	r1, [r7, #8]
 810486a:	f003 0310 	and.w	r3, r3, #16
 810486e:	60fb      	str	r3, [r7, #12]
 8104870:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104874:	460b      	mov	r3, r1
 8104876:	4313      	orrs	r3, r2
 8104878:	d011      	beq.n	810489e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810487a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810487e:	3328      	adds	r3, #40	@ 0x28
 8104880:	2101      	movs	r1, #1
 8104882:	4618      	mov	r0, r3
 8104884:	f001 fa7c 	bl	8105d80 <RCCEx_PLL3_Config>
 8104888:	4603      	mov	r3, r0
 810488a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810488e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104892:	2b00      	cmp	r3, #0
 8104894:	d003      	beq.n	810489e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104896:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810489a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810489e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048a6:	2100      	movs	r1, #0
 81048a8:	6039      	str	r1, [r7, #0]
 81048aa:	f003 0320 	and.w	r3, r3, #32
 81048ae:	607b      	str	r3, [r7, #4]
 81048b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 81048b4:	460b      	mov	r3, r1
 81048b6:	4313      	orrs	r3, r2
 81048b8:	d011      	beq.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81048ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048be:	3328      	adds	r3, #40	@ 0x28
 81048c0:	2102      	movs	r1, #2
 81048c2:	4618      	mov	r0, r3
 81048c4:	f001 fa5c 	bl	8105d80 <RCCEx_PLL3_Config>
 81048c8:	4603      	mov	r3, r0
 81048ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81048ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81048d2:	2b00      	cmp	r3, #0
 81048d4:	d003      	beq.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81048da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81048de:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81048e2:	2b00      	cmp	r3, #0
 81048e4:	d101      	bne.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81048e6:	2300      	movs	r3, #0
 81048e8:	e000      	b.n	81048ec <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81048ea:	2301      	movs	r3, #1
}
 81048ec:	4618      	mov	r0, r3
 81048ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81048f2:	46bd      	mov	sp, r7
 81048f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81048f8:	58024400 	.word	0x58024400

081048fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81048fc:	b580      	push	{r7, lr}
 81048fe:	b090      	sub	sp, #64	@ 0x40
 8104900:	af00      	add	r7, sp, #0
 8104902:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104906:	e9d7 2300 	ldrd	r2, r3, [r7]
 810490a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810490e:	430b      	orrs	r3, r1
 8104910:	f040 8094 	bne.w	8104a3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104914:	4b9e      	ldr	r3, [pc, #632]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104918:	f003 0307 	and.w	r3, r3, #7
 810491c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104920:	2b04      	cmp	r3, #4
 8104922:	f200 8087 	bhi.w	8104a34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104926:	a201      	add	r2, pc, #4	@ (adr r2, 810492c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810492c:	08104941 	.word	0x08104941
 8104930:	08104969 	.word	0x08104969
 8104934:	08104991 	.word	0x08104991
 8104938:	08104a2d 	.word	0x08104a2d
 810493c:	081049b9 	.word	0x081049b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104940:	4b93      	ldr	r3, [pc, #588]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810494c:	d108      	bne.n	8104960 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810494e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104952:	4618      	mov	r0, r3
 8104954:	f001 f810 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810495c:	f000 bd45 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104960:	2300      	movs	r3, #0
 8104962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104964:	f000 bd41 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104968:	4b89      	ldr	r3, [pc, #548]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104974:	d108      	bne.n	8104988 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104976:	f107 0318 	add.w	r3, r7, #24
 810497a:	4618      	mov	r0, r3
 810497c:	f000 fd54 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104980:	69bb      	ldr	r3, [r7, #24]
 8104982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104984:	f000 bd31 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104988:	2300      	movs	r3, #0
 810498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810498c:	f000 bd2d 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104990:	4b7f      	ldr	r3, [pc, #508]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810499c:	d108      	bne.n	81049b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810499e:	f107 030c 	add.w	r3, r7, #12
 81049a2:	4618      	mov	r0, r3
 81049a4:	f000 fe94 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049ac:	f000 bd1d 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049b0:	2300      	movs	r3, #0
 81049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049b4:	f000 bd19 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81049b8:	4b75      	ldr	r3, [pc, #468]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81049bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81049c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81049c2:	4b73      	ldr	r3, [pc, #460]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81049c4:	681b      	ldr	r3, [r3, #0]
 81049c6:	f003 0304 	and.w	r3, r3, #4
 81049ca:	2b04      	cmp	r3, #4
 81049cc:	d10c      	bne.n	81049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81049d0:	2b00      	cmp	r3, #0
 81049d2:	d109      	bne.n	81049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81049d4:	4b6e      	ldr	r3, [pc, #440]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	08db      	lsrs	r3, r3, #3
 81049da:	f003 0303 	and.w	r3, r3, #3
 81049de:	4a6d      	ldr	r2, [pc, #436]	@ (8104b94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81049e0:	fa22 f303 	lsr.w	r3, r2, r3
 81049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81049e6:	e01f      	b.n	8104a28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81049e8:	4b69      	ldr	r3, [pc, #420]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81049f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81049f4:	d106      	bne.n	8104a04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81049f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81049fc:	d102      	bne.n	8104a04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81049fe:	4b66      	ldr	r3, [pc, #408]	@ (8104b98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a02:	e011      	b.n	8104a28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104a04:	4b62      	ldr	r3, [pc, #392]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104a10:	d106      	bne.n	8104a20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104a18:	d102      	bne.n	8104a20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104a1a:	4b60      	ldr	r3, [pc, #384]	@ (8104b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a1e:	e003      	b.n	8104a28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104a20:	2300      	movs	r3, #0
 8104a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104a24:	f000 bce1 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104a28:	f000 bcdf 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a30:	f000 bcdb 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104a34:	2300      	movs	r3, #0
 8104a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a38:	f000 bcd7 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104a40:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104a44:	430b      	orrs	r3, r1
 8104a46:	f040 80ad 	bne.w	8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8104a4a:	4b51      	ldr	r3, [pc, #324]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a4e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8104a52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a5a:	d056      	beq.n	8104b0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8104a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a62:	f200 8090 	bhi.w	8104b86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a68:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a6a:	f000 8088 	beq.w	8104b7e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8104a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a70:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a72:	f200 8088 	bhi.w	8104b86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a78:	2b80      	cmp	r3, #128	@ 0x80
 8104a7a:	d032      	beq.n	8104ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a7e:	2b80      	cmp	r3, #128	@ 0x80
 8104a80:	f200 8081 	bhi.w	8104b86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	d003      	beq.n	8104a92 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8104a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104a8c:	2b40      	cmp	r3, #64	@ 0x40
 8104a8e:	d014      	beq.n	8104aba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104a90:	e079      	b.n	8104b86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104a92:	4b3f      	ldr	r3, [pc, #252]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104a9e:	d108      	bne.n	8104ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104aa4:	4618      	mov	r0, r3
 8104aa6:	f000 ff67 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104aae:	f000 bc9c 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ab2:	2300      	movs	r3, #0
 8104ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ab6:	f000 bc98 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104aba:	4b35      	ldr	r3, [pc, #212]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104ac6:	d108      	bne.n	8104ada <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ac8:	f107 0318 	add.w	r3, r7, #24
 8104acc:	4618      	mov	r0, r3
 8104ace:	f000 fcab 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104ad2:	69bb      	ldr	r3, [r7, #24]
 8104ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ad6:	f000 bc88 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ada:	2300      	movs	r3, #0
 8104adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ade:	f000 bc84 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104aee:	d108      	bne.n	8104b02 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104af0:	f107 030c 	add.w	r3, r7, #12
 8104af4:	4618      	mov	r0, r3
 8104af6:	f000 fdeb 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104afe:	f000 bc74 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b02:	2300      	movs	r3, #0
 8104b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b06:	f000 bc70 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104b0a:	4b21      	ldr	r3, [pc, #132]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104b12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104b14:	4b1e      	ldr	r3, [pc, #120]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	f003 0304 	and.w	r3, r3, #4
 8104b1c:	2b04      	cmp	r3, #4
 8104b1e:	d10c      	bne.n	8104b3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b22:	2b00      	cmp	r3, #0
 8104b24:	d109      	bne.n	8104b3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b26:	4b1a      	ldr	r3, [pc, #104]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	08db      	lsrs	r3, r3, #3
 8104b2c:	f003 0303 	and.w	r3, r3, #3
 8104b30:	4a18      	ldr	r2, [pc, #96]	@ (8104b94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104b32:	fa22 f303 	lsr.w	r3, r2, r3
 8104b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104b38:	e01f      	b.n	8104b7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104b3a:	4b15      	ldr	r3, [pc, #84]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104b46:	d106      	bne.n	8104b56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104b4e:	d102      	bne.n	8104b56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104b50:	4b11      	ldr	r3, [pc, #68]	@ (8104b98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104b54:	e011      	b.n	8104b7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104b56:	4b0e      	ldr	r3, [pc, #56]	@ (8104b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104b62:	d106      	bne.n	8104b72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b6a:	d102      	bne.n	8104b72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8104b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104b70:	e003      	b.n	8104b7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104b72:	2300      	movs	r3, #0
 8104b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104b76:	f000 bc38 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104b7a:	f000 bc36 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104b7e:	4b08      	ldr	r3, [pc, #32]	@ (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b82:	f000 bc32 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104b86:	2300      	movs	r3, #0
 8104b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b8a:	f000 bc2e 	b.w	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104b8e:	bf00      	nop
 8104b90:	58024400 	.word	0x58024400
 8104b94:	03d09000 	.word	0x03d09000
 8104b98:	003d0900 	.word	0x003d0900
 8104b9c:	017d7840 	.word	0x017d7840
 8104ba0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104ba8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8104bac:	430b      	orrs	r3, r1
 8104bae:	f040 809c 	bne.w	8104cea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8104bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104bb6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8104bba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104bc2:	d054      	beq.n	8104c6e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104bca:	f200 808b 	bhi.w	8104ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104bd4:	f000 8083 	beq.w	8104cde <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104bde:	f200 8081 	bhi.w	8104ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104be8:	d02f      	beq.n	8104c4a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104bf0:	d878      	bhi.n	8104ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bf4:	2b00      	cmp	r3, #0
 8104bf6:	d004      	beq.n	8104c02 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104bfe:	d012      	beq.n	8104c26 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104c00:	e070      	b.n	8104ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104c02:	4b8a      	ldr	r3, [pc, #552]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104c0e:	d107      	bne.n	8104c20 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104c14:	4618      	mov	r0, r3
 8104c16:	f000 feaf 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c1e:	e3e4      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c20:	2300      	movs	r3, #0
 8104c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c24:	e3e1      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104c26:	4b81      	ldr	r3, [pc, #516]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104c32:	d107      	bne.n	8104c44 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104c34:	f107 0318 	add.w	r3, r7, #24
 8104c38:	4618      	mov	r0, r3
 8104c3a:	f000 fbf5 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104c3e:	69bb      	ldr	r3, [r7, #24]
 8104c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c42:	e3d2      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c44:	2300      	movs	r3, #0
 8104c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c48:	e3cf      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104c4a:	4b78      	ldr	r3, [pc, #480]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104c4c:	681b      	ldr	r3, [r3, #0]
 8104c4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c56:	d107      	bne.n	8104c68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104c58:	f107 030c 	add.w	r3, r7, #12
 8104c5c:	4618      	mov	r0, r3
 8104c5e:	f000 fd37 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104c62:	68fb      	ldr	r3, [r7, #12]
 8104c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c66:	e3c0      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c68:	2300      	movs	r3, #0
 8104c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c6c:	e3bd      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104c6e:	4b6f      	ldr	r3, [pc, #444]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104c76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c78:	4b6c      	ldr	r3, [pc, #432]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	f003 0304 	and.w	r3, r3, #4
 8104c80:	2b04      	cmp	r3, #4
 8104c82:	d10c      	bne.n	8104c9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c86:	2b00      	cmp	r3, #0
 8104c88:	d109      	bne.n	8104c9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c8a:	4b68      	ldr	r3, [pc, #416]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	08db      	lsrs	r3, r3, #3
 8104c90:	f003 0303 	and.w	r3, r3, #3
 8104c94:	4a66      	ldr	r2, [pc, #408]	@ (8104e30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104c96:	fa22 f303 	lsr.w	r3, r2, r3
 8104c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c9c:	e01e      	b.n	8104cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104c9e:	4b63      	ldr	r3, [pc, #396]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104caa:	d106      	bne.n	8104cba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8104cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104cb2:	d102      	bne.n	8104cba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8104e34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104cb8:	e010      	b.n	8104cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104cba:	4b5c      	ldr	r3, [pc, #368]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104cc6:	d106      	bne.n	8104cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104cce:	d102      	bne.n	8104cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104cd0:	4b59      	ldr	r3, [pc, #356]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104cd4:	e002      	b.n	8104cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104cd6:	2300      	movs	r3, #0
 8104cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104cda:	e386      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104cdc:	e385      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104cde:	4b57      	ldr	r3, [pc, #348]	@ (8104e3c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ce2:	e382      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104ce4:	2300      	movs	r3, #0
 8104ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ce8:	e37f      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104cee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8104cf2:	430b      	orrs	r3, r1
 8104cf4:	f040 80a7 	bne.w	8104e46 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104cfc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8104d00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104d08:	d055      	beq.n	8104db6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104d10:	f200 8096 	bhi.w	8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104d1a:	f000 8084 	beq.w	8104e26 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104d24:	f200 808c 	bhi.w	8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d2e:	d030      	beq.n	8104d92 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d36:	f200 8083 	bhi.w	8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d004      	beq.n	8104d4a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104d46:	d012      	beq.n	8104d6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104d48:	e07a      	b.n	8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104d4a:	4b38      	ldr	r3, [pc, #224]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104d52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d56:	d107      	bne.n	8104d68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104d5c:	4618      	mov	r0, r3
 8104d5e:	f000 fe0b 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d66:	e340      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d68:	2300      	movs	r3, #0
 8104d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d6c:	e33d      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104d70:	681b      	ldr	r3, [r3, #0]
 8104d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104d7a:	d107      	bne.n	8104d8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d7c:	f107 0318 	add.w	r3, r7, #24
 8104d80:	4618      	mov	r0, r3
 8104d82:	f000 fb51 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104d86:	69bb      	ldr	r3, [r7, #24]
 8104d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d8a:	e32e      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d8c:	2300      	movs	r3, #0
 8104d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d90:	e32b      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104d92:	4b26      	ldr	r3, [pc, #152]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104d94:	681b      	ldr	r3, [r3, #0]
 8104d96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d9e:	d107      	bne.n	8104db0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104da0:	f107 030c 	add.w	r3, r7, #12
 8104da4:	4618      	mov	r0, r3
 8104da6:	f000 fc93 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104daa:	68fb      	ldr	r3, [r7, #12]
 8104dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dae:	e31c      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104db0:	2300      	movs	r3, #0
 8104db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104db4:	e319      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104db6:	4b1d      	ldr	r3, [pc, #116]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104dba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104dbe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	f003 0304 	and.w	r3, r3, #4
 8104dc8:	2b04      	cmp	r3, #4
 8104dca:	d10c      	bne.n	8104de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8104dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104dce:	2b00      	cmp	r3, #0
 8104dd0:	d109      	bne.n	8104de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104dd2:	4b16      	ldr	r3, [pc, #88]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104dd4:	681b      	ldr	r3, [r3, #0]
 8104dd6:	08db      	lsrs	r3, r3, #3
 8104dd8:	f003 0303 	and.w	r3, r3, #3
 8104ddc:	4a14      	ldr	r2, [pc, #80]	@ (8104e30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104dde:	fa22 f303 	lsr.w	r3, r2, r3
 8104de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104de4:	e01e      	b.n	8104e24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104de6:	4b11      	ldr	r3, [pc, #68]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104de8:	681b      	ldr	r3, [r3, #0]
 8104dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104df2:	d106      	bne.n	8104e02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104dfa:	d102      	bne.n	8104e02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8104e34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104e00:	e010      	b.n	8104e24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104e02:	4b0a      	ldr	r3, [pc, #40]	@ (8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e04:	681b      	ldr	r3, [r3, #0]
 8104e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104e0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e0e:	d106      	bne.n	8104e1e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e16:	d102      	bne.n	8104e1e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104e18:	4b07      	ldr	r3, [pc, #28]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104e1c:	e002      	b.n	8104e24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104e1e:	2300      	movs	r3, #0
 8104e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104e22:	e2e2      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e24:	e2e1      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104e26:	4b05      	ldr	r3, [pc, #20]	@ (8104e3c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e2a:	e2de      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e2c:	58024400 	.word	0x58024400
 8104e30:	03d09000 	.word	0x03d09000
 8104e34:	003d0900 	.word	0x003d0900
 8104e38:	017d7840 	.word	0x017d7840
 8104e3c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104e40:	2300      	movs	r3, #0
 8104e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e44:	e2d1      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104e4a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8104e4e:	430b      	orrs	r3, r1
 8104e50:	f040 809c 	bne.w	8104f8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104e54:	4b93      	ldr	r3, [pc, #588]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e58:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8104e5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104e64:	d054      	beq.n	8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104e6c:	f200 808b 	bhi.w	8104f86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104e76:	f000 8083 	beq.w	8104f80 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8104e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104e80:	f200 8081 	bhi.w	8104f86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104e8a:	d02f      	beq.n	8104eec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8104e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104e92:	d878      	bhi.n	8104f86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d004      	beq.n	8104ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8104e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104ea0:	d012      	beq.n	8104ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8104ea2:	e070      	b.n	8104f86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ea4:	4b7f      	ldr	r3, [pc, #508]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104eb0:	d107      	bne.n	8104ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104eb6:	4618      	mov	r0, r3
 8104eb8:	f000 fd5e 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ec0:	e293      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ec2:	2300      	movs	r3, #0
 8104ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ec6:	e290      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ec8:	4b76      	ldr	r3, [pc, #472]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104ed4:	d107      	bne.n	8104ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ed6:	f107 0318 	add.w	r3, r7, #24
 8104eda:	4618      	mov	r0, r3
 8104edc:	f000 faa4 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104ee0:	69bb      	ldr	r3, [r7, #24]
 8104ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ee4:	e281      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ee6:	2300      	movs	r3, #0
 8104ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104eea:	e27e      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104eec:	4b6d      	ldr	r3, [pc, #436]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ef8:	d107      	bne.n	8104f0a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104efa:	f107 030c 	add.w	r3, r7, #12
 8104efe:	4618      	mov	r0, r3
 8104f00:	f000 fbe6 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f08:	e26f      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f0a:	2300      	movs	r3, #0
 8104f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f0e:	e26c      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104f10:	4b64      	ldr	r3, [pc, #400]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104f18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104f1a:	4b62      	ldr	r3, [pc, #392]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104f1c:	681b      	ldr	r3, [r3, #0]
 8104f1e:	f003 0304 	and.w	r3, r3, #4
 8104f22:	2b04      	cmp	r3, #4
 8104f24:	d10c      	bne.n	8104f40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d109      	bne.n	8104f40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104f2c:	4b5d      	ldr	r3, [pc, #372]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	08db      	lsrs	r3, r3, #3
 8104f32:	f003 0303 	and.w	r3, r3, #3
 8104f36:	4a5c      	ldr	r2, [pc, #368]	@ (81050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104f38:	fa22 f303 	lsr.w	r3, r2, r3
 8104f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f3e:	e01e      	b.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104f40:	4b58      	ldr	r3, [pc, #352]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104f4c:	d106      	bne.n	8104f5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104f54:	d102      	bne.n	8104f5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104f56:	4b55      	ldr	r3, [pc, #340]	@ (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f5a:	e010      	b.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104f5c:	4b51      	ldr	r3, [pc, #324]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f68:	d106      	bne.n	8104f78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8104f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f70:	d102      	bne.n	8104f78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104f72:	4b4f      	ldr	r3, [pc, #316]	@ (81050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f76:	e002      	b.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104f78:	2300      	movs	r3, #0
 8104f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104f7c:	e235      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104f7e:	e234      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104f80:	4b4c      	ldr	r3, [pc, #304]	@ (81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f84:	e231      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104f86:	2300      	movs	r3, #0
 8104f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f8a:	e22e      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8104f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f90:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8104f94:	430b      	orrs	r3, r1
 8104f96:	f040 808f 	bne.w	81050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8104f9a:	4b42      	ldr	r3, [pc, #264]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104f9e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8104fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8104fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104faa:	d06b      	beq.n	8105084 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104fb2:	d874      	bhi.n	810509e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104fba:	d056      	beq.n	810506a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104fc2:	d86c      	bhi.n	810509e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104fca:	d03b      	beq.n	8105044 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104fd2:	d864      	bhi.n	810509e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104fda:	d021      	beq.n	8105020 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104fe2:	d85c      	bhi.n	810509e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fe6:	2b00      	cmp	r3, #0
 8104fe8:	d004      	beq.n	8104ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104ff0:	d004      	beq.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104ff2:	e054      	b.n	810509e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104ff4:	f7fe f9e0 	bl	81033b8 <HAL_RCC_GetPCLK1Freq>
 8104ff8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104ffa:	e1f6      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ffc:	4b29      	ldr	r3, [pc, #164]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105008:	d107      	bne.n	810501a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810500a:	f107 0318 	add.w	r3, r7, #24
 810500e:	4618      	mov	r0, r3
 8105010:	f000 fa0a 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105014:	69fb      	ldr	r3, [r7, #28]
 8105016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105018:	e1e7      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810501a:	2300      	movs	r3, #0
 810501c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810501e:	e1e4      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105020:	4b20      	ldr	r3, [pc, #128]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810502c:	d107      	bne.n	810503e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810502e:	f107 030c 	add.w	r3, r7, #12
 8105032:	4618      	mov	r0, r3
 8105034:	f000 fb4c 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105038:	693b      	ldr	r3, [r7, #16]
 810503a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810503c:	e1d5      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810503e:	2300      	movs	r3, #0
 8105040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105042:	e1d2      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105044:	4b17      	ldr	r3, [pc, #92]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	f003 0304 	and.w	r3, r3, #4
 810504c:	2b04      	cmp	r3, #4
 810504e:	d109      	bne.n	8105064 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105050:	4b14      	ldr	r3, [pc, #80]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	08db      	lsrs	r3, r3, #3
 8105056:	f003 0303 	and.w	r3, r3, #3
 810505a:	4a13      	ldr	r2, [pc, #76]	@ (81050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810505c:	fa22 f303 	lsr.w	r3, r2, r3
 8105060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105062:	e1c2      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105064:	2300      	movs	r3, #0
 8105066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105068:	e1bf      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810506a:	4b0e      	ldr	r3, [pc, #56]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105076:	d102      	bne.n	810507e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8105078:	4b0c      	ldr	r3, [pc, #48]	@ (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810507c:	e1b5      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810507e:	2300      	movs	r3, #0
 8105080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105082:	e1b2      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105084:	4b07      	ldr	r3, [pc, #28]	@ (81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810508c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105090:	d102      	bne.n	8105098 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8105092:	4b07      	ldr	r3, [pc, #28]	@ (81050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105096:	e1a8      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105098:	2300      	movs	r3, #0
 810509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810509c:	e1a5      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810509e:	2300      	movs	r3, #0
 81050a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81050a2:	e1a2      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81050a4:	58024400 	.word	0x58024400
 81050a8:	03d09000 	.word	0x03d09000
 81050ac:	003d0900 	.word	0x003d0900
 81050b0:	017d7840 	.word	0x017d7840
 81050b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81050b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81050bc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81050c0:	430b      	orrs	r3, r1
 81050c2:	d173      	bne.n	81051ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81050c4:	4b9c      	ldr	r3, [pc, #624]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81050c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81050cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81050d4:	d02f      	beq.n	8105136 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81050dc:	d863      	bhi.n	81051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050e0:	2b00      	cmp	r3, #0
 81050e2:	d004      	beq.n	81050ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81050ea:	d012      	beq.n	8105112 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81050ec:	e05b      	b.n	81051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81050ee:	4b92      	ldr	r3, [pc, #584]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81050f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81050fa:	d107      	bne.n	810510c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81050fc:	f107 0318 	add.w	r3, r7, #24
 8105100:	4618      	mov	r0, r3
 8105102:	f000 f991 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105106:	69bb      	ldr	r3, [r7, #24]
 8105108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810510a:	e16e      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810510c:	2300      	movs	r3, #0
 810510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105110:	e16b      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105112:	4b89      	ldr	r3, [pc, #548]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105114:	681b      	ldr	r3, [r3, #0]
 8105116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810511a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810511e:	d107      	bne.n	8105130 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105120:	f107 030c 	add.w	r3, r7, #12
 8105124:	4618      	mov	r0, r3
 8105126:	f000 fad3 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810512a:	697b      	ldr	r3, [r7, #20]
 810512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810512e:	e15c      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105130:	2300      	movs	r3, #0
 8105132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105134:	e159      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105136:	4b80      	ldr	r3, [pc, #512]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810513a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810513e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105140:	4b7d      	ldr	r3, [pc, #500]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105142:	681b      	ldr	r3, [r3, #0]
 8105144:	f003 0304 	and.w	r3, r3, #4
 8105148:	2b04      	cmp	r3, #4
 810514a:	d10c      	bne.n	8105166 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810514c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810514e:	2b00      	cmp	r3, #0
 8105150:	d109      	bne.n	8105166 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105152:	4b79      	ldr	r3, [pc, #484]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105154:	681b      	ldr	r3, [r3, #0]
 8105156:	08db      	lsrs	r3, r3, #3
 8105158:	f003 0303 	and.w	r3, r3, #3
 810515c:	4a77      	ldr	r2, [pc, #476]	@ (810533c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810515e:	fa22 f303 	lsr.w	r3, r2, r3
 8105162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105164:	e01e      	b.n	81051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105166:	4b74      	ldr	r3, [pc, #464]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810516e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105172:	d106      	bne.n	8105182 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8105174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810517a:	d102      	bne.n	8105182 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810517c:	4b70      	ldr	r3, [pc, #448]	@ (8105340 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105180:	e010      	b.n	81051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105182:	4b6d      	ldr	r3, [pc, #436]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810518a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810518e:	d106      	bne.n	810519e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8105190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105196:	d102      	bne.n	810519e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105198:	4b6a      	ldr	r3, [pc, #424]	@ (8105344 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810519c:	e002      	b.n	81051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810519e:	2300      	movs	r3, #0
 81051a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81051a2:	e122      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81051a4:	e121      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81051a6:	2300      	movs	r3, #0
 81051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051aa:	e11e      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81051ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 81051b0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 81051b4:	430b      	orrs	r3, r1
 81051b6:	d133      	bne.n	8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81051b8:	4b5f      	ldr	r3, [pc, #380]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81051bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81051c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051c4:	2b00      	cmp	r3, #0
 81051c6:	d004      	beq.n	81051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81051ce:	d012      	beq.n	81051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81051d0:	e023      	b.n	810521a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81051d2:	4b59      	ldr	r3, [pc, #356]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81051da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81051de:	d107      	bne.n	81051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81051e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81051e4:	4618      	mov	r0, r3
 81051e6:	f000 fbc7 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81051ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051ee:	e0fc      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051f0:	2300      	movs	r3, #0
 81051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051f4:	e0f9      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81051f6:	4b50      	ldr	r3, [pc, #320]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81051fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105202:	d107      	bne.n	8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105204:	f107 0318 	add.w	r3, r7, #24
 8105208:	4618      	mov	r0, r3
 810520a:	f000 f90d 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810520e:	6a3b      	ldr	r3, [r7, #32]
 8105210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105212:	e0ea      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105214:	2300      	movs	r3, #0
 8105216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105218:	e0e7      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810521a:	2300      	movs	r3, #0
 810521c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810521e:	e0e4      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105224:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8105228:	430b      	orrs	r3, r1
 810522a:	f040 808d 	bne.w	8105348 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810522e:	4b42      	ldr	r3, [pc, #264]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105232:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8105236:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810523a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810523e:	d06b      	beq.n	8105318 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8105240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105242:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105246:	d874      	bhi.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810524a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810524e:	d056      	beq.n	81052fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8105250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105256:	d86c      	bhi.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810525a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810525e:	d03b      	beq.n	81052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8105260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105266:	d864      	bhi.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810526a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810526e:	d021      	beq.n	81052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8105270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105276:	d85c      	bhi.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810527a:	2b00      	cmp	r3, #0
 810527c:	d004      	beq.n	8105288 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105284:	d004      	beq.n	8105290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8105286:	e054      	b.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105288:	f000 f8b8 	bl	81053fc <HAL_RCCEx_GetD3PCLK1Freq>
 810528c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810528e:	e0ac      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105290:	4b29      	ldr	r3, [pc, #164]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105292:	681b      	ldr	r3, [r3, #0]
 8105294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810529c:	d107      	bne.n	81052ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810529e:	f107 0318 	add.w	r3, r7, #24
 81052a2:	4618      	mov	r0, r3
 81052a4:	f000 f8c0 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81052a8:	69fb      	ldr	r3, [r7, #28]
 81052aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052ac:	e09d      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052ae:	2300      	movs	r3, #0
 81052b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052b2:	e09a      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81052b4:	4b20      	ldr	r3, [pc, #128]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81052bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81052c0:	d107      	bne.n	81052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052c2:	f107 030c 	add.w	r3, r7, #12
 81052c6:	4618      	mov	r0, r3
 81052c8:	f000 fa02 	bl	81056d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81052cc:	693b      	ldr	r3, [r7, #16]
 81052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052d0:	e08b      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052d2:	2300      	movs	r3, #0
 81052d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052d6:	e088      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81052d8:	4b17      	ldr	r3, [pc, #92]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81052da:	681b      	ldr	r3, [r3, #0]
 81052dc:	f003 0304 	and.w	r3, r3, #4
 81052e0:	2b04      	cmp	r3, #4
 81052e2:	d109      	bne.n	81052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81052e4:	4b14      	ldr	r3, [pc, #80]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81052e6:	681b      	ldr	r3, [r3, #0]
 81052e8:	08db      	lsrs	r3, r3, #3
 81052ea:	f003 0303 	and.w	r3, r3, #3
 81052ee:	4a13      	ldr	r2, [pc, #76]	@ (810533c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81052f0:	fa22 f303 	lsr.w	r3, r2, r3
 81052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052f6:	e078      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052f8:	2300      	movs	r3, #0
 81052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052fc:	e075      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810530a:	d102      	bne.n	8105312 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810530c:	4b0c      	ldr	r3, [pc, #48]	@ (8105340 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810530e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105310:	e06b      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105312:	2300      	movs	r3, #0
 8105314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105316:	e068      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105318:	4b07      	ldr	r3, [pc, #28]	@ (8105338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105324:	d102      	bne.n	810532c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8105326:	4b07      	ldr	r3, [pc, #28]	@ (8105344 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810532a:	e05e      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810532c:	2300      	movs	r3, #0
 810532e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105330:	e05b      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8105332:	2300      	movs	r3, #0
 8105334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105336:	e058      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105338:	58024400 	.word	0x58024400
 810533c:	03d09000 	.word	0x03d09000
 8105340:	003d0900 	.word	0x003d0900
 8105344:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105348:	e9d7 2300 	ldrd	r2, r3, [r7]
 810534c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8105350:	430b      	orrs	r3, r1
 8105352:	d148      	bne.n	81053e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105354:	4b27      	ldr	r3, [pc, #156]	@ (81053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810535c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105364:	d02a      	beq.n	81053bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8105366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810536c:	d838      	bhi.n	81053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105370:	2b00      	cmp	r3, #0
 8105372:	d004      	beq.n	810537e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8105374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810537a:	d00d      	beq.n	8105398 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810537c:	e030      	b.n	81053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810537e:	4b1d      	ldr	r3, [pc, #116]	@ (81053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810538a:	d102      	bne.n	8105392 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810538c:	4b1a      	ldr	r3, [pc, #104]	@ (81053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810538e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105390:	e02b      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105392:	2300      	movs	r3, #0
 8105394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105396:	e028      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105398:	4b16      	ldr	r3, [pc, #88]	@ (81053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81053a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81053a4:	d107      	bne.n	81053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81053a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81053aa:	4618      	mov	r0, r3
 81053ac:	f000 fae4 	bl	8105978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81053b4:	e019      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81053b6:	2300      	movs	r3, #0
 81053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053ba:	e016      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81053bc:	4b0d      	ldr	r3, [pc, #52]	@ (81053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81053be:	681b      	ldr	r3, [r3, #0]
 81053c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81053c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81053c8:	d107      	bne.n	81053da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81053ca:	f107 0318 	add.w	r3, r7, #24
 81053ce:	4618      	mov	r0, r3
 81053d0:	f000 f82a 	bl	8105428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81053d4:	69fb      	ldr	r3, [r7, #28]
 81053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81053d8:	e007      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81053da:	2300      	movs	r3, #0
 81053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053de:	e004      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81053e0:	2300      	movs	r3, #0
 81053e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053e4:	e001      	b.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81053e6:	2300      	movs	r3, #0
 81053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81053ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81053ec:	4618      	mov	r0, r3
 81053ee:	3740      	adds	r7, #64	@ 0x40
 81053f0:	46bd      	mov	sp, r7
 81053f2:	bd80      	pop	{r7, pc}
 81053f4:	58024400 	.word	0x58024400
 81053f8:	017d7840 	.word	0x017d7840

081053fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81053fc:	b580      	push	{r7, lr}
 81053fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105400:	f7fd ffa8 	bl	8103354 <HAL_RCC_GetHCLKFreq>
 8105404:	4602      	mov	r2, r0
 8105406:	4b06      	ldr	r3, [pc, #24]	@ (8105420 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105408:	6a1b      	ldr	r3, [r3, #32]
 810540a:	091b      	lsrs	r3, r3, #4
 810540c:	f003 0307 	and.w	r3, r3, #7
 8105410:	4904      	ldr	r1, [pc, #16]	@ (8105424 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105412:	5ccb      	ldrb	r3, [r1, r3]
 8105414:	f003 031f 	and.w	r3, r3, #31
 8105418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810541c:	4618      	mov	r0, r3
 810541e:	bd80      	pop	{r7, pc}
 8105420:	58024400 	.word	0x58024400
 8105424:	081092d4 	.word	0x081092d4

08105428 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105428:	b480      	push	{r7}
 810542a:	b089      	sub	sp, #36	@ 0x24
 810542c:	af00      	add	r7, sp, #0
 810542e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105430:	4ba1      	ldr	r3, [pc, #644]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105434:	f003 0303 	and.w	r3, r3, #3
 8105438:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810543a:	4b9f      	ldr	r3, [pc, #636]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810543e:	0b1b      	lsrs	r3, r3, #12
 8105440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105444:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105446:	4b9c      	ldr	r3, [pc, #624]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810544a:	091b      	lsrs	r3, r3, #4
 810544c:	f003 0301 	and.w	r3, r3, #1
 8105450:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105452:	4b99      	ldr	r3, [pc, #612]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105456:	08db      	lsrs	r3, r3, #3
 8105458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810545c:	693a      	ldr	r2, [r7, #16]
 810545e:	fb02 f303 	mul.w	r3, r2, r3
 8105462:	ee07 3a90 	vmov	s15, r3
 8105466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810546a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810546e:	697b      	ldr	r3, [r7, #20]
 8105470:	2b00      	cmp	r3, #0
 8105472:	f000 8111 	beq.w	8105698 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105476:	69bb      	ldr	r3, [r7, #24]
 8105478:	2b02      	cmp	r3, #2
 810547a:	f000 8083 	beq.w	8105584 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810547e:	69bb      	ldr	r3, [r7, #24]
 8105480:	2b02      	cmp	r3, #2
 8105482:	f200 80a1 	bhi.w	81055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105486:	69bb      	ldr	r3, [r7, #24]
 8105488:	2b00      	cmp	r3, #0
 810548a:	d003      	beq.n	8105494 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810548c:	69bb      	ldr	r3, [r7, #24]
 810548e:	2b01      	cmp	r3, #1
 8105490:	d056      	beq.n	8105540 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105492:	e099      	b.n	81055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105494:	4b88      	ldr	r3, [pc, #544]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	f003 0320 	and.w	r3, r3, #32
 810549c:	2b00      	cmp	r3, #0
 810549e:	d02d      	beq.n	81054fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054a0:	4b85      	ldr	r3, [pc, #532]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	08db      	lsrs	r3, r3, #3
 81054a6:	f003 0303 	and.w	r3, r3, #3
 81054aa:	4a84      	ldr	r2, [pc, #528]	@ (81056bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81054ac:	fa22 f303 	lsr.w	r3, r2, r3
 81054b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81054b2:	68bb      	ldr	r3, [r7, #8]
 81054b4:	ee07 3a90 	vmov	s15, r3
 81054b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054bc:	697b      	ldr	r3, [r7, #20]
 81054be:	ee07 3a90 	vmov	s15, r3
 81054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054ca:	4b7b      	ldr	r3, [pc, #492]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054d2:	ee07 3a90 	vmov	s15, r3
 81054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054da:	ed97 6a03 	vldr	s12, [r7, #12]
 81054de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81054fa:	e087      	b.n	810560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81054fc:	697b      	ldr	r3, [r7, #20]
 81054fe:	ee07 3a90 	vmov	s15, r3
 8105502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105506:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810550e:	4b6a      	ldr	r3, [pc, #424]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105516:	ee07 3a90 	vmov	s15, r3
 810551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105522:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810552e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105536:	ee67 7a27 	vmul.f32	s15, s14, s15
 810553a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810553e:	e065      	b.n	810560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105540:	697b      	ldr	r3, [r7, #20]
 8105542:	ee07 3a90 	vmov	s15, r3
 8105546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810554a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105552:	4b59      	ldr	r3, [pc, #356]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810555a:	ee07 3a90 	vmov	s15, r3
 810555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105562:	ed97 6a03 	vldr	s12, [r7, #12]
 8105566:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810557e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105582:	e043      	b.n	810560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105584:	697b      	ldr	r3, [r7, #20]
 8105586:	ee07 3a90 	vmov	s15, r3
 810558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810558e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81056cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105596:	4b48      	ldr	r3, [pc, #288]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810559e:	ee07 3a90 	vmov	s15, r3
 81055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81055aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055c6:	e021      	b.n	810560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81055c8:	697b      	ldr	r3, [r7, #20]
 81055ca:	ee07 3a90 	vmov	s15, r3
 81055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81055d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055da:	4b37      	ldr	r3, [pc, #220]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81055de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055e2:	ee07 3a90 	vmov	s15, r3
 81055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81055ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81055f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810560a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810560c:	4b2a      	ldr	r3, [pc, #168]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105610:	0a5b      	lsrs	r3, r3, #9
 8105612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105616:	ee07 3a90 	vmov	s15, r3
 810561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810561e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105626:	edd7 6a07 	vldr	s13, [r7, #28]
 810562a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810562e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105632:	ee17 2a90 	vmov	r2, s15
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810563a:	4b1f      	ldr	r3, [pc, #124]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810563e:	0c1b      	lsrs	r3, r3, #16
 8105640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105644:	ee07 3a90 	vmov	s15, r3
 8105648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810564c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105650:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105654:	edd7 6a07 	vldr	s13, [r7, #28]
 8105658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810565c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105660:	ee17 2a90 	vmov	r2, s15
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105668:	4b13      	ldr	r3, [pc, #76]	@ (81056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810566a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810566c:	0e1b      	lsrs	r3, r3, #24
 810566e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105672:	ee07 3a90 	vmov	s15, r3
 8105676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810567a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810567e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105682:	edd7 6a07 	vldr	s13, [r7, #28]
 8105686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810568a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810568e:	ee17 2a90 	vmov	r2, s15
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105696:	e008      	b.n	81056aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	2200      	movs	r2, #0
 810569c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	2200      	movs	r2, #0
 81056a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	2200      	movs	r2, #0
 81056a8:	609a      	str	r2, [r3, #8]
}
 81056aa:	bf00      	nop
 81056ac:	3724      	adds	r7, #36	@ 0x24
 81056ae:	46bd      	mov	sp, r7
 81056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056b4:	4770      	bx	lr
 81056b6:	bf00      	nop
 81056b8:	58024400 	.word	0x58024400
 81056bc:	03d09000 	.word	0x03d09000
 81056c0:	46000000 	.word	0x46000000
 81056c4:	4c742400 	.word	0x4c742400
 81056c8:	4a742400 	.word	0x4a742400
 81056cc:	4bbebc20 	.word	0x4bbebc20

081056d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81056d0:	b480      	push	{r7}
 81056d2:	b089      	sub	sp, #36	@ 0x24
 81056d4:	af00      	add	r7, sp, #0
 81056d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81056d8:	4ba1      	ldr	r3, [pc, #644]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056dc:	f003 0303 	and.w	r3, r3, #3
 81056e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81056e2:	4b9f      	ldr	r3, [pc, #636]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056e6:	0d1b      	lsrs	r3, r3, #20
 81056e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81056ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81056ee:	4b9c      	ldr	r3, [pc, #624]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81056f2:	0a1b      	lsrs	r3, r3, #8
 81056f4:	f003 0301 	and.w	r3, r3, #1
 81056f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81056fa:	4b99      	ldr	r3, [pc, #612]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81056fe:	08db      	lsrs	r3, r3, #3
 8105700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105704:	693a      	ldr	r2, [r7, #16]
 8105706:	fb02 f303 	mul.w	r3, r2, r3
 810570a:	ee07 3a90 	vmov	s15, r3
 810570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105712:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105716:	697b      	ldr	r3, [r7, #20]
 8105718:	2b00      	cmp	r3, #0
 810571a:	f000 8111 	beq.w	8105940 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810571e:	69bb      	ldr	r3, [r7, #24]
 8105720:	2b02      	cmp	r3, #2
 8105722:	f000 8083 	beq.w	810582c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105726:	69bb      	ldr	r3, [r7, #24]
 8105728:	2b02      	cmp	r3, #2
 810572a:	f200 80a1 	bhi.w	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810572e:	69bb      	ldr	r3, [r7, #24]
 8105730:	2b00      	cmp	r3, #0
 8105732:	d003      	beq.n	810573c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105734:	69bb      	ldr	r3, [r7, #24]
 8105736:	2b01      	cmp	r3, #1
 8105738:	d056      	beq.n	81057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810573a:	e099      	b.n	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810573c:	4b88      	ldr	r3, [pc, #544]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	f003 0320 	and.w	r3, r3, #32
 8105744:	2b00      	cmp	r3, #0
 8105746:	d02d      	beq.n	81057a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105748:	4b85      	ldr	r3, [pc, #532]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	08db      	lsrs	r3, r3, #3
 810574e:	f003 0303 	and.w	r3, r3, #3
 8105752:	4a84      	ldr	r2, [pc, #528]	@ (8105964 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105754:	fa22 f303 	lsr.w	r3, r2, r3
 8105758:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810575a:	68bb      	ldr	r3, [r7, #8]
 810575c:	ee07 3a90 	vmov	s15, r3
 8105760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105764:	697b      	ldr	r3, [r7, #20]
 8105766:	ee07 3a90 	vmov	s15, r3
 810576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105772:	4b7b      	ldr	r3, [pc, #492]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810577a:	ee07 3a90 	vmov	s15, r3
 810577e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105782:	ed97 6a03 	vldr	s12, [r7, #12]
 8105786:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810578a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810578e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810579e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81057a2:	e087      	b.n	81058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81057a4:	697b      	ldr	r3, [r7, #20]
 81057a6:	ee07 3a90 	vmov	s15, r3
 81057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810596c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057b6:	4b6a      	ldr	r3, [pc, #424]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057be:	ee07 3a90 	vmov	s15, r3
 81057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81057ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81057e6:	e065      	b.n	81058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81057e8:	697b      	ldr	r3, [r7, #20]
 81057ea:	ee07 3a90 	vmov	s15, r3
 81057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057fa:	4b59      	ldr	r3, [pc, #356]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105802:	ee07 3a90 	vmov	s15, r3
 8105806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810580a:	ed97 6a03 	vldr	s12, [r7, #12]
 810580e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810581a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810582a:	e043      	b.n	81058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810582c:	697b      	ldr	r3, [r7, #20]
 810582e:	ee07 3a90 	vmov	s15, r3
 8105832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105836:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810583e:	4b48      	ldr	r3, [pc, #288]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105846:	ee07 3a90 	vmov	s15, r3
 810584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810584e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105852:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810585e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105866:	ee67 7a27 	vmul.f32	s15, s14, s15
 810586a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810586e:	e021      	b.n	81058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105870:	697b      	ldr	r3, [r7, #20]
 8105872:	ee07 3a90 	vmov	s15, r3
 8105876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810587a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810587e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105882:	4b37      	ldr	r3, [pc, #220]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810588a:	ee07 3a90 	vmov	s15, r3
 810588e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105892:	ed97 6a03 	vldr	s12, [r7, #12]
 8105896:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810589a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81058a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81058b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81058b4:	4b2a      	ldr	r3, [pc, #168]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81058b8:	0a5b      	lsrs	r3, r3, #9
 81058ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81058be:	ee07 3a90 	vmov	s15, r3
 81058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81058ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81058d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058da:	ee17 2a90 	vmov	r2, s15
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81058e2:	4b1f      	ldr	r3, [pc, #124]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81058e6:	0c1b      	lsrs	r3, r3, #16
 81058e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81058ec:	ee07 3a90 	vmov	s15, r3
 81058f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81058f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105908:	ee17 2a90 	vmov	r2, s15
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105910:	4b13      	ldr	r3, [pc, #76]	@ (8105960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105914:	0e1b      	lsrs	r3, r3, #24
 8105916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810591a:	ee07 3a90 	vmov	s15, r3
 810591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105926:	ee37 7a87 	vadd.f32	s14, s15, s14
 810592a:	edd7 6a07 	vldr	s13, [r7, #28]
 810592e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105936:	ee17 2a90 	vmov	r2, s15
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810593e:	e008      	b.n	8105952 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	2200      	movs	r2, #0
 8105944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	2200      	movs	r2, #0
 810594a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	2200      	movs	r2, #0
 8105950:	609a      	str	r2, [r3, #8]
}
 8105952:	bf00      	nop
 8105954:	3724      	adds	r7, #36	@ 0x24
 8105956:	46bd      	mov	sp, r7
 8105958:	f85d 7b04 	ldr.w	r7, [sp], #4
 810595c:	4770      	bx	lr
 810595e:	bf00      	nop
 8105960:	58024400 	.word	0x58024400
 8105964:	03d09000 	.word	0x03d09000
 8105968:	46000000 	.word	0x46000000
 810596c:	4c742400 	.word	0x4c742400
 8105970:	4a742400 	.word	0x4a742400
 8105974:	4bbebc20 	.word	0x4bbebc20

08105978 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105978:	b480      	push	{r7}
 810597a:	b089      	sub	sp, #36	@ 0x24
 810597c:	af00      	add	r7, sp, #0
 810597e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105980:	4ba0      	ldr	r3, [pc, #640]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105984:	f003 0303 	and.w	r3, r3, #3
 8105988:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810598a:	4b9e      	ldr	r3, [pc, #632]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810598e:	091b      	lsrs	r3, r3, #4
 8105990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105994:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105996:	4b9b      	ldr	r3, [pc, #620]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810599a:	f003 0301 	and.w	r3, r3, #1
 810599e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81059a0:	4b98      	ldr	r3, [pc, #608]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81059a4:	08db      	lsrs	r3, r3, #3
 81059a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81059aa:	693a      	ldr	r2, [r7, #16]
 81059ac:	fb02 f303 	mul.w	r3, r2, r3
 81059b0:	ee07 3a90 	vmov	s15, r3
 81059b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81059bc:	697b      	ldr	r3, [r7, #20]
 81059be:	2b00      	cmp	r3, #0
 81059c0:	f000 8111 	beq.w	8105be6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81059c4:	69bb      	ldr	r3, [r7, #24]
 81059c6:	2b02      	cmp	r3, #2
 81059c8:	f000 8083 	beq.w	8105ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81059cc:	69bb      	ldr	r3, [r7, #24]
 81059ce:	2b02      	cmp	r3, #2
 81059d0:	f200 80a1 	bhi.w	8105b16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81059d4:	69bb      	ldr	r3, [r7, #24]
 81059d6:	2b00      	cmp	r3, #0
 81059d8:	d003      	beq.n	81059e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81059da:	69bb      	ldr	r3, [r7, #24]
 81059dc:	2b01      	cmp	r3, #1
 81059de:	d056      	beq.n	8105a8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81059e0:	e099      	b.n	8105b16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81059e2:	4b88      	ldr	r3, [pc, #544]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81059e4:	681b      	ldr	r3, [r3, #0]
 81059e6:	f003 0320 	and.w	r3, r3, #32
 81059ea:	2b00      	cmp	r3, #0
 81059ec:	d02d      	beq.n	8105a4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81059ee:	4b85      	ldr	r3, [pc, #532]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81059f0:	681b      	ldr	r3, [r3, #0]
 81059f2:	08db      	lsrs	r3, r3, #3
 81059f4:	f003 0303 	and.w	r3, r3, #3
 81059f8:	4a83      	ldr	r2, [pc, #524]	@ (8105c08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81059fa:	fa22 f303 	lsr.w	r3, r2, r3
 81059fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a00:	68bb      	ldr	r3, [r7, #8]
 8105a02:	ee07 3a90 	vmov	s15, r3
 8105a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a0a:	697b      	ldr	r3, [r7, #20]
 8105a0c:	ee07 3a90 	vmov	s15, r3
 8105a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a18:	4b7a      	ldr	r3, [pc, #488]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a20:	ee07 3a90 	vmov	s15, r3
 8105a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a2c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8105c0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105a48:	e087      	b.n	8105b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a4a:	697b      	ldr	r3, [r7, #20]
 8105a4c:	ee07 3a90 	vmov	s15, r3
 8105a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a54:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8105c10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a5c:	4b69      	ldr	r3, [pc, #420]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a64:	ee07 3a90 	vmov	s15, r3
 8105a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a70:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8105c0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a8c:	e065      	b.n	8105b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a8e:	697b      	ldr	r3, [r7, #20]
 8105a90:	ee07 3a90 	vmov	s15, r3
 8105a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a98:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8105c14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105aa0:	4b58      	ldr	r3, [pc, #352]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105aa8:	ee07 3a90 	vmov	s15, r3
 8105aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ab4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8105c0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105acc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ad0:	e043      	b.n	8105b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105ad2:	697b      	ldr	r3, [r7, #20]
 8105ad4:	ee07 3a90 	vmov	s15, r3
 8105ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105adc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8105c18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ae4:	4b47      	ldr	r3, [pc, #284]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105aec:	ee07 3a90 	vmov	s15, r3
 8105af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105af4:	ed97 6a03 	vldr	s12, [r7, #12]
 8105af8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8105c0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105b14:	e021      	b.n	8105b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b16:	697b      	ldr	r3, [r7, #20]
 8105b18:	ee07 3a90 	vmov	s15, r3
 8105b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b20:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8105c10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b28:	4b36      	ldr	r3, [pc, #216]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b30:	ee07 3a90 	vmov	s15, r3
 8105b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b38:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8105c0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105b58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b5e:	0a5b      	lsrs	r3, r3, #9
 8105b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105b64:	ee07 3a90 	vmov	s15, r3
 8105b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b80:	ee17 2a90 	vmov	r2, s15
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105b88:	4b1e      	ldr	r3, [pc, #120]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b8c:	0c1b      	lsrs	r3, r3, #16
 8105b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105b92:	ee07 3a90 	vmov	s15, r3
 8105b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105bae:	ee17 2a90 	vmov	r2, s15
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105bb6:	4b13      	ldr	r3, [pc, #76]	@ (8105c04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105bba:	0e1b      	lsrs	r3, r3, #24
 8105bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105bc0:	ee07 3a90 	vmov	s15, r3
 8105bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105bdc:	ee17 2a90 	vmov	r2, s15
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105be4:	e008      	b.n	8105bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	2200      	movs	r2, #0
 8105bea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	2200      	movs	r2, #0
 8105bf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	2200      	movs	r2, #0
 8105bf6:	609a      	str	r2, [r3, #8]
}
 8105bf8:	bf00      	nop
 8105bfa:	3724      	adds	r7, #36	@ 0x24
 8105bfc:	46bd      	mov	sp, r7
 8105bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c02:	4770      	bx	lr
 8105c04:	58024400 	.word	0x58024400
 8105c08:	03d09000 	.word	0x03d09000
 8105c0c:	46000000 	.word	0x46000000
 8105c10:	4c742400 	.word	0x4c742400
 8105c14:	4a742400 	.word	0x4a742400
 8105c18:	4bbebc20 	.word	0x4bbebc20

08105c1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105c1c:	b580      	push	{r7, lr}
 8105c1e:	b084      	sub	sp, #16
 8105c20:	af00      	add	r7, sp, #0
 8105c22:	6078      	str	r0, [r7, #4]
 8105c24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105c26:	2300      	movs	r3, #0
 8105c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105c2a:	4b54      	ldr	r3, [pc, #336]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105c2e:	f003 0303 	and.w	r3, r3, #3
 8105c32:	2b03      	cmp	r3, #3
 8105c34:	d101      	bne.n	8105c3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105c36:	2301      	movs	r3, #1
 8105c38:	e09b      	b.n	8105d72 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105c3a:	4b50      	ldr	r3, [pc, #320]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105c40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8105c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105c46:	f7fc fbc5 	bl	81023d4 <HAL_GetTick>
 8105c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105c4c:	e008      	b.n	8105c60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105c4e:	f7fc fbc1 	bl	81023d4 <HAL_GetTick>
 8105c52:	4602      	mov	r2, r0
 8105c54:	68bb      	ldr	r3, [r7, #8]
 8105c56:	1ad3      	subs	r3, r2, r3
 8105c58:	2b02      	cmp	r3, #2
 8105c5a:	d901      	bls.n	8105c60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105c5c:	2303      	movs	r3, #3
 8105c5e:	e088      	b.n	8105d72 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105c60:	4b46      	ldr	r3, [pc, #280]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d1f0      	bne.n	8105c4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105c6c:	4b43      	ldr	r3, [pc, #268]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105c70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	031b      	lsls	r3, r3, #12
 8105c7a:	4940      	ldr	r1, [pc, #256]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105c7c:	4313      	orrs	r3, r2
 8105c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	685b      	ldr	r3, [r3, #4]
 8105c84:	3b01      	subs	r3, #1
 8105c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105c8a:	687b      	ldr	r3, [r7, #4]
 8105c8c:	689b      	ldr	r3, [r3, #8]
 8105c8e:	3b01      	subs	r3, #1
 8105c90:	025b      	lsls	r3, r3, #9
 8105c92:	b29b      	uxth	r3, r3
 8105c94:	431a      	orrs	r2, r3
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	68db      	ldr	r3, [r3, #12]
 8105c9a:	3b01      	subs	r3, #1
 8105c9c:	041b      	lsls	r3, r3, #16
 8105c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105ca2:	431a      	orrs	r2, r3
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	691b      	ldr	r3, [r3, #16]
 8105ca8:	3b01      	subs	r3, #1
 8105caa:	061b      	lsls	r3, r3, #24
 8105cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105cb0:	4932      	ldr	r1, [pc, #200]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cb2:	4313      	orrs	r3, r2
 8105cb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105cb6:	4b31      	ldr	r3, [pc, #196]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105cba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	695b      	ldr	r3, [r3, #20]
 8105cc2:	492e      	ldr	r1, [pc, #184]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cc4:	4313      	orrs	r3, r2
 8105cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105ccc:	f023 0220 	bic.w	r2, r3, #32
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	699b      	ldr	r3, [r3, #24]
 8105cd4:	4929      	ldr	r1, [pc, #164]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cd6:	4313      	orrs	r3, r2
 8105cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105cda:	4b28      	ldr	r3, [pc, #160]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105cde:	4a27      	ldr	r2, [pc, #156]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105ce0:	f023 0310 	bic.w	r3, r3, #16
 8105ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105ce6:	4b25      	ldr	r3, [pc, #148]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105cee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105cf2:	687a      	ldr	r2, [r7, #4]
 8105cf4:	69d2      	ldr	r2, [r2, #28]
 8105cf6:	00d2      	lsls	r2, r2, #3
 8105cf8:	4920      	ldr	r1, [pc, #128]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105cfa:	4313      	orrs	r3, r2
 8105cfc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d02:	4a1e      	ldr	r2, [pc, #120]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d04:	f043 0310 	orr.w	r3, r3, #16
 8105d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105d0a:	683b      	ldr	r3, [r7, #0]
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	d106      	bne.n	8105d1e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105d10:	4b1a      	ldr	r3, [pc, #104]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d14:	4a19      	ldr	r2, [pc, #100]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8105d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105d1c:	e00f      	b.n	8105d3e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105d1e:	683b      	ldr	r3, [r7, #0]
 8105d20:	2b01      	cmp	r3, #1
 8105d22:	d106      	bne.n	8105d32 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105d24:	4b15      	ldr	r3, [pc, #84]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d28:	4a14      	ldr	r2, [pc, #80]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105d30:	e005      	b.n	8105d3e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105d32:	4b12      	ldr	r3, [pc, #72]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d36:	4a11      	ldr	r2, [pc, #68]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	4a0e      	ldr	r2, [pc, #56]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8105d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105d4a:	f7fc fb43 	bl	81023d4 <HAL_GetTick>
 8105d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105d50:	e008      	b.n	8105d64 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105d52:	f7fc fb3f 	bl	81023d4 <HAL_GetTick>
 8105d56:	4602      	mov	r2, r0
 8105d58:	68bb      	ldr	r3, [r7, #8]
 8105d5a:	1ad3      	subs	r3, r2, r3
 8105d5c:	2b02      	cmp	r3, #2
 8105d5e:	d901      	bls.n	8105d64 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105d60:	2303      	movs	r3, #3
 8105d62:	e006      	b.n	8105d72 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105d64:	4b05      	ldr	r3, [pc, #20]	@ (8105d7c <RCCEx_PLL2_Config+0x160>)
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105d6c:	2b00      	cmp	r3, #0
 8105d6e:	d0f0      	beq.n	8105d52 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8105d72:	4618      	mov	r0, r3
 8105d74:	3710      	adds	r7, #16
 8105d76:	46bd      	mov	sp, r7
 8105d78:	bd80      	pop	{r7, pc}
 8105d7a:	bf00      	nop
 8105d7c:	58024400 	.word	0x58024400

08105d80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105d80:	b580      	push	{r7, lr}
 8105d82:	b084      	sub	sp, #16
 8105d84:	af00      	add	r7, sp, #0
 8105d86:	6078      	str	r0, [r7, #4]
 8105d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105d8a:	2300      	movs	r3, #0
 8105d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105d8e:	4b54      	ldr	r3, [pc, #336]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105d92:	f003 0303 	and.w	r3, r3, #3
 8105d96:	2b03      	cmp	r3, #3
 8105d98:	d101      	bne.n	8105d9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105d9a:	2301      	movs	r3, #1
 8105d9c:	e09b      	b.n	8105ed6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105d9e:	4b50      	ldr	r3, [pc, #320]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	4a4f      	ldr	r2, [pc, #316]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8105da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105daa:	f7fc fb13 	bl	81023d4 <HAL_GetTick>
 8105dae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105db0:	e008      	b.n	8105dc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105db2:	f7fc fb0f 	bl	81023d4 <HAL_GetTick>
 8105db6:	4602      	mov	r2, r0
 8105db8:	68bb      	ldr	r3, [r7, #8]
 8105dba:	1ad3      	subs	r3, r2, r3
 8105dbc:	2b02      	cmp	r3, #2
 8105dbe:	d901      	bls.n	8105dc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105dc0:	2303      	movs	r3, #3
 8105dc2:	e088      	b.n	8105ed6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105dc4:	4b46      	ldr	r3, [pc, #280]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105dcc:	2b00      	cmp	r3, #0
 8105dce:	d1f0      	bne.n	8105db2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105dd0:	4b43      	ldr	r3, [pc, #268]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105dd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	051b      	lsls	r3, r3, #20
 8105dde:	4940      	ldr	r1, [pc, #256]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105de0:	4313      	orrs	r3, r2
 8105de2:	628b      	str	r3, [r1, #40]	@ 0x28
 8105de4:	687b      	ldr	r3, [r7, #4]
 8105de6:	685b      	ldr	r3, [r3, #4]
 8105de8:	3b01      	subs	r3, #1
 8105dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	689b      	ldr	r3, [r3, #8]
 8105df2:	3b01      	subs	r3, #1
 8105df4:	025b      	lsls	r3, r3, #9
 8105df6:	b29b      	uxth	r3, r3
 8105df8:	431a      	orrs	r2, r3
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	68db      	ldr	r3, [r3, #12]
 8105dfe:	3b01      	subs	r3, #1
 8105e00:	041b      	lsls	r3, r3, #16
 8105e02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105e06:	431a      	orrs	r2, r3
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	691b      	ldr	r3, [r3, #16]
 8105e0c:	3b01      	subs	r3, #1
 8105e0e:	061b      	lsls	r3, r3, #24
 8105e10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105e14:	4932      	ldr	r1, [pc, #200]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e16:	4313      	orrs	r3, r2
 8105e18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105e1a:	4b31      	ldr	r3, [pc, #196]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	695b      	ldr	r3, [r3, #20]
 8105e26:	492e      	ldr	r1, [pc, #184]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e28:	4313      	orrs	r3, r2
 8105e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	699b      	ldr	r3, [r3, #24]
 8105e38:	4929      	ldr	r1, [pc, #164]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e3a:	4313      	orrs	r3, r2
 8105e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105e3e:	4b28      	ldr	r3, [pc, #160]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e42:	4a27      	ldr	r2, [pc, #156]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105e4a:	4b25      	ldr	r3, [pc, #148]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105e52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105e56:	687a      	ldr	r2, [r7, #4]
 8105e58:	69d2      	ldr	r2, [r2, #28]
 8105e5a:	00d2      	lsls	r2, r2, #3
 8105e5c:	4920      	ldr	r1, [pc, #128]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e5e:	4313      	orrs	r3, r2
 8105e60:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105e62:	4b1f      	ldr	r3, [pc, #124]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e66:	4a1e      	ldr	r2, [pc, #120]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105e6e:	683b      	ldr	r3, [r7, #0]
 8105e70:	2b00      	cmp	r3, #0
 8105e72:	d106      	bne.n	8105e82 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105e74:	4b1a      	ldr	r3, [pc, #104]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e78:	4a19      	ldr	r2, [pc, #100]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105e80:	e00f      	b.n	8105ea2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105e82:	683b      	ldr	r3, [r7, #0]
 8105e84:	2b01      	cmp	r3, #1
 8105e86:	d106      	bne.n	8105e96 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105e88:	4b15      	ldr	r3, [pc, #84]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e8c:	4a14      	ldr	r2, [pc, #80]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105e92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105e94:	e005      	b.n	8105ea2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105e96:	4b12      	ldr	r3, [pc, #72]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e9a:	4a11      	ldr	r2, [pc, #68]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105e9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8105eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105eae:	f7fc fa91 	bl	81023d4 <HAL_GetTick>
 8105eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105eb4:	e008      	b.n	8105ec8 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105eb6:	f7fc fa8d 	bl	81023d4 <HAL_GetTick>
 8105eba:	4602      	mov	r2, r0
 8105ebc:	68bb      	ldr	r3, [r7, #8]
 8105ebe:	1ad3      	subs	r3, r2, r3
 8105ec0:	2b02      	cmp	r3, #2
 8105ec2:	d901      	bls.n	8105ec8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105ec4:	2303      	movs	r3, #3
 8105ec6:	e006      	b.n	8105ed6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105ec8:	4b05      	ldr	r3, [pc, #20]	@ (8105ee0 <RCCEx_PLL3_Config+0x160>)
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105ed0:	2b00      	cmp	r3, #0
 8105ed2:	d0f0      	beq.n	8105eb6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ed6:	4618      	mov	r0, r3
 8105ed8:	3710      	adds	r7, #16
 8105eda:	46bd      	mov	sp, r7
 8105edc:	bd80      	pop	{r7, pc}
 8105ede:	bf00      	nop
 8105ee0:	58024400 	.word	0x58024400

08105ee4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105ee4:	b580      	push	{r7, lr}
 8105ee6:	b084      	sub	sp, #16
 8105ee8:	af00      	add	r7, sp, #0
 8105eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105eec:	2301      	movs	r3, #1
 8105eee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	2b00      	cmp	r3, #0
 8105ef4:	d073      	beq.n	8105fde <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8105efc:	b2db      	uxtb	r3, r3
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d106      	bne.n	8105f10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	2200      	movs	r2, #0
 8105f06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105f0a:	6878      	ldr	r0, [r7, #4]
 8105f0c:	f7fb fc16 	bl	810173c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	2202      	movs	r2, #2
 8105f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	68db      	ldr	r3, [r3, #12]
 8105f1e:	f003 0310 	and.w	r3, r3, #16
 8105f22:	2b10      	cmp	r3, #16
 8105f24:	d052      	beq.n	8105fcc <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	22ca      	movs	r2, #202	@ 0xca
 8105f2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	2253      	movs	r2, #83	@ 0x53
 8105f34:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105f36:	6878      	ldr	r0, [r7, #4]
 8105f38:	f000 f87a 	bl	8106030 <RTC_EnterInitMode>
 8105f3c:	4603      	mov	r3, r0
 8105f3e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105f40:	7bfb      	ldrb	r3, [r7, #15]
 8105f42:	2b00      	cmp	r3, #0
 8105f44:	d126      	bne.n	8105f94 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	689b      	ldr	r3, [r3, #8]
 8105f4c:	687a      	ldr	r2, [r7, #4]
 8105f4e:	6812      	ldr	r2, [r2, #0]
 8105f50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8105f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8105f58:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	6899      	ldr	r1, [r3, #8]
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	685a      	ldr	r2, [r3, #4]
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	691b      	ldr	r3, [r3, #16]
 8105f68:	431a      	orrs	r2, r3
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	699b      	ldr	r3, [r3, #24]
 8105f6e:	431a      	orrs	r2, r3
 8105f70:	687b      	ldr	r3, [r7, #4]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	430a      	orrs	r2, r1
 8105f76:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	689b      	ldr	r3, [r3, #8]
 8105f7c:	0419      	lsls	r1, r3, #16
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	68da      	ldr	r2, [r3, #12]
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	681b      	ldr	r3, [r3, #0]
 8105f86:	430a      	orrs	r2, r1
 8105f88:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8105f8a:	6878      	ldr	r0, [r7, #4]
 8105f8c:	f000 f884 	bl	8106098 <RTC_ExitInitMode>
 8105f90:	4603      	mov	r3, r0
 8105f92:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8105f94:	7bfb      	ldrb	r3, [r7, #15]
 8105f96:	2b00      	cmp	r3, #0
 8105f98:	d113      	bne.n	8105fc2 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	681b      	ldr	r3, [r3, #0]
 8105f9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	f022 0203 	bic.w	r2, r2, #3
 8105fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105faa:	687b      	ldr	r3, [r7, #4]
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	69da      	ldr	r2, [r3, #28]
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	695b      	ldr	r3, [r3, #20]
 8105fb8:	431a      	orrs	r2, r3
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	430a      	orrs	r2, r1
 8105fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105fc2:	687b      	ldr	r3, [r7, #4]
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	22ff      	movs	r2, #255	@ 0xff
 8105fc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8105fca:	e001      	b.n	8105fd0 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105fcc:	2300      	movs	r3, #0
 8105fce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105fd0:	7bfb      	ldrb	r3, [r7, #15]
 8105fd2:	2b00      	cmp	r3, #0
 8105fd4:	d103      	bne.n	8105fde <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	2201      	movs	r2, #1
 8105fda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8105fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8105fe0:	4618      	mov	r0, r3
 8105fe2:	3710      	adds	r7, #16
 8105fe4:	46bd      	mov	sp, r7
 8105fe6:	bd80      	pop	{r7, pc}

08105fe8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105fe8:	b580      	push	{r7, lr}
 8105fea:	b084      	sub	sp, #16
 8105fec:	af00      	add	r7, sp, #0
 8105fee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	4a0d      	ldr	r2, [pc, #52]	@ (810602c <HAL_RTC_WaitForSynchro+0x44>)
 8105ff6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105ff8:	f7fc f9ec 	bl	81023d4 <HAL_GetTick>
 8105ffc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105ffe:	e009      	b.n	8106014 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8106000:	f7fc f9e8 	bl	81023d4 <HAL_GetTick>
 8106004:	4602      	mov	r2, r0
 8106006:	68fb      	ldr	r3, [r7, #12]
 8106008:	1ad3      	subs	r3, r2, r3
 810600a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810600e:	d901      	bls.n	8106014 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8106010:	2303      	movs	r3, #3
 8106012:	e007      	b.n	8106024 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	681b      	ldr	r3, [r3, #0]
 8106018:	68db      	ldr	r3, [r3, #12]
 810601a:	f003 0320 	and.w	r3, r3, #32
 810601e:	2b00      	cmp	r3, #0
 8106020:	d0ee      	beq.n	8106000 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8106022:	2300      	movs	r3, #0
}
 8106024:	4618      	mov	r0, r3
 8106026:	3710      	adds	r7, #16
 8106028:	46bd      	mov	sp, r7
 810602a:	bd80      	pop	{r7, pc}
 810602c:	0003ff5f 	.word	0x0003ff5f

08106030 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8106030:	b580      	push	{r7, lr}
 8106032:	b084      	sub	sp, #16
 8106034:	af00      	add	r7, sp, #0
 8106036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106038:	2300      	movs	r3, #0
 810603a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	68db      	ldr	r3, [r3, #12]
 8106042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106046:	2b00      	cmp	r3, #0
 8106048:	d120      	bne.n	810608c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	f04f 32ff 	mov.w	r2, #4294967295
 8106052:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8106054:	f7fc f9be 	bl	81023d4 <HAL_GetTick>
 8106058:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810605a:	e00d      	b.n	8106078 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810605c:	f7fc f9ba 	bl	81023d4 <HAL_GetTick>
 8106060:	4602      	mov	r2, r0
 8106062:	68bb      	ldr	r3, [r7, #8]
 8106064:	1ad3      	subs	r3, r2, r3
 8106066:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810606a:	d905      	bls.n	8106078 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 810606c:	2303      	movs	r3, #3
 810606e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106070:	687b      	ldr	r3, [r7, #4]
 8106072:	2203      	movs	r2, #3
 8106074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	68db      	ldr	r3, [r3, #12]
 810607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106082:	2b00      	cmp	r3, #0
 8106084:	d102      	bne.n	810608c <RTC_EnterInitMode+0x5c>
 8106086:	7bfb      	ldrb	r3, [r7, #15]
 8106088:	2b03      	cmp	r3, #3
 810608a:	d1e7      	bne.n	810605c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 810608c:	7bfb      	ldrb	r3, [r7, #15]
}
 810608e:	4618      	mov	r0, r3
 8106090:	3710      	adds	r7, #16
 8106092:	46bd      	mov	sp, r7
 8106094:	bd80      	pop	{r7, pc}
	...

08106098 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8106098:	b580      	push	{r7, lr}
 810609a:	b084      	sub	sp, #16
 810609c:	af00      	add	r7, sp, #0
 810609e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81060a0:	2300      	movs	r3, #0
 81060a2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 81060a4:	4b1a      	ldr	r3, [pc, #104]	@ (8106110 <RTC_ExitInitMode+0x78>)
 81060a6:	68db      	ldr	r3, [r3, #12]
 81060a8:	4a19      	ldr	r2, [pc, #100]	@ (8106110 <RTC_ExitInitMode+0x78>)
 81060aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81060ae:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81060b0:	4b17      	ldr	r3, [pc, #92]	@ (8106110 <RTC_ExitInitMode+0x78>)
 81060b2:	689b      	ldr	r3, [r3, #8]
 81060b4:	f003 0320 	and.w	r3, r3, #32
 81060b8:	2b00      	cmp	r3, #0
 81060ba:	d10c      	bne.n	81060d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81060bc:	6878      	ldr	r0, [r7, #4]
 81060be:	f7ff ff93 	bl	8105fe8 <HAL_RTC_WaitForSynchro>
 81060c2:	4603      	mov	r3, r0
 81060c4:	2b00      	cmp	r3, #0
 81060c6:	d01e      	beq.n	8106106 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	2203      	movs	r2, #3
 81060cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81060d0:	2303      	movs	r3, #3
 81060d2:	73fb      	strb	r3, [r7, #15]
 81060d4:	e017      	b.n	8106106 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81060d6:	4b0e      	ldr	r3, [pc, #56]	@ (8106110 <RTC_ExitInitMode+0x78>)
 81060d8:	689b      	ldr	r3, [r3, #8]
 81060da:	4a0d      	ldr	r2, [pc, #52]	@ (8106110 <RTC_ExitInitMode+0x78>)
 81060dc:	f023 0320 	bic.w	r3, r3, #32
 81060e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81060e2:	6878      	ldr	r0, [r7, #4]
 81060e4:	f7ff ff80 	bl	8105fe8 <HAL_RTC_WaitForSynchro>
 81060e8:	4603      	mov	r3, r0
 81060ea:	2b00      	cmp	r3, #0
 81060ec:	d005      	beq.n	81060fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	2203      	movs	r2, #3
 81060f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81060f6:	2303      	movs	r3, #3
 81060f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81060fa:	4b05      	ldr	r3, [pc, #20]	@ (8106110 <RTC_ExitInitMode+0x78>)
 81060fc:	689b      	ldr	r3, [r3, #8]
 81060fe:	4a04      	ldr	r2, [pc, #16]	@ (8106110 <RTC_ExitInitMode+0x78>)
 8106100:	f043 0320 	orr.w	r3, r3, #32
 8106104:	6093      	str	r3, [r2, #8]
  }

  return status;
 8106106:	7bfb      	ldrb	r3, [r7, #15]
}
 8106108:	4618      	mov	r0, r3
 810610a:	3710      	adds	r7, #16
 810610c:	46bd      	mov	sp, r7
 810610e:	bd80      	pop	{r7, pc}
 8106110:	58004000 	.word	0x58004000

08106114 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8106114:	b480      	push	{r7}
 8106116:	b085      	sub	sp, #20
 8106118:	af00      	add	r7, sp, #0
 810611a:	6078      	str	r0, [r7, #4]
 810611c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8106124:	2b01      	cmp	r3, #1
 8106126:	d101      	bne.n	810612c <HAL_RTCEx_SetTamper+0x18>
 8106128:	2302      	movs	r3, #2
 810612a:	e0cc      	b.n	81062c6 <HAL_RTCEx_SetTamper+0x1b2>
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	2201      	movs	r2, #1
 8106130:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	2202      	movs	r2, #2
 8106138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106142:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8106144:	683b      	ldr	r3, [r7, #0]
 8106146:	681b      	ldr	r3, [r3, #0]
 8106148:	68fa      	ldr	r2, [r7, #12]
 810614a:	4313      	orrs	r3, r2
 810614c:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 810614e:	683b      	ldr	r3, [r7, #0]
 8106150:	689b      	ldr	r3, [r3, #8]
 8106152:	2b08      	cmp	r3, #8
 8106154:	d003      	beq.n	810615e <HAL_RTCEx_SetTamper+0x4a>
 8106156:	683b      	ldr	r3, [r7, #0]
 8106158:	689b      	ldr	r3, [r3, #8]
 810615a:	2b02      	cmp	r3, #2
 810615c:	d106      	bne.n	810616c <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 810615e:	683b      	ldr	r3, [r7, #0]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	005b      	lsls	r3, r3, #1
 8106164:	68fa      	ldr	r2, [r7, #12]
 8106166:	4313      	orrs	r3, r2
 8106168:	60fb      	str	r3, [r7, #12]
 810616a:	e006      	b.n	810617a <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 810616c:	683b      	ldr	r3, [r7, #0]
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	005b      	lsls	r3, r3, #1
 8106172:	43db      	mvns	r3, r3
 8106174:	68fa      	ldr	r2, [r7, #12]
 8106176:	4013      	ands	r3, r2
 8106178:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 810617a:	683b      	ldr	r3, [r7, #0]
 810617c:	68db      	ldr	r3, [r3, #12]
 810617e:	2b00      	cmp	r3, #0
 8106180:	d01e      	beq.n	81061c0 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106182:	683b      	ldr	r3, [r7, #0]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	f003 0301 	and.w	r3, r3, #1
 810618a:	2b00      	cmp	r3, #0
 810618c:	d003      	beq.n	8106196 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 810618e:	68fb      	ldr	r3, [r7, #12]
 8106190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106194:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106196:	683b      	ldr	r3, [r7, #0]
 8106198:	681b      	ldr	r3, [r3, #0]
 810619a:	f003 0308 	and.w	r3, r3, #8
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d003      	beq.n	81061aa <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 81061a2:	68fb      	ldr	r3, [r7, #12]
 81061a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81061a8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81061aa:	683b      	ldr	r3, [r7, #0]
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	f003 0320 	and.w	r3, r3, #32
 81061b2:	2b00      	cmp	r3, #0
 81061b4:	d022      	beq.n	81061fc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81061bc:	60fb      	str	r3, [r7, #12]
 81061be:	e01d      	b.n	81061fc <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81061c0:	683b      	ldr	r3, [r7, #0]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	f003 0301 	and.w	r3, r3, #1
 81061c8:	2b00      	cmp	r3, #0
 81061ca:	d003      	beq.n	81061d4 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 81061cc:	68fb      	ldr	r3, [r7, #12]
 81061ce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 81061d2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81061d4:	683b      	ldr	r3, [r7, #0]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	f003 0308 	and.w	r3, r3, #8
 81061dc:	2b00      	cmp	r3, #0
 81061de:	d003      	beq.n	81061e8 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 81061e0:	68fb      	ldr	r3, [r7, #12]
 81061e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 81061e6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81061e8:	683b      	ldr	r3, [r7, #0]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	f003 0320 	and.w	r3, r3, #32
 81061f0:	2b00      	cmp	r3, #0
 81061f2:	d003      	beq.n	81061fc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 81061f4:	68fb      	ldr	r3, [r7, #12]
 81061f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 81061fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 81061fc:	683b      	ldr	r3, [r7, #0]
 81061fe:	691b      	ldr	r3, [r3, #16]
 8106200:	2b00      	cmp	r3, #0
 8106202:	d01e      	beq.n	8106242 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106204:	683b      	ldr	r3, [r7, #0]
 8106206:	681b      	ldr	r3, [r3, #0]
 8106208:	f003 0301 	and.w	r3, r3, #1
 810620c:	2b00      	cmp	r3, #0
 810620e:	d003      	beq.n	8106218 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8106210:	68fb      	ldr	r3, [r7, #12]
 8106212:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8106216:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106218:	683b      	ldr	r3, [r7, #0]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	f003 0308 	and.w	r3, r3, #8
 8106220:	2b00      	cmp	r3, #0
 8106222:	d003      	beq.n	810622c <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8106224:	68fb      	ldr	r3, [r7, #12]
 8106226:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810622a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810622c:	683b      	ldr	r3, [r7, #0]
 810622e:	681b      	ldr	r3, [r3, #0]
 8106230:	f003 0320 	and.w	r3, r3, #32
 8106234:	2b00      	cmp	r3, #0
 8106236:	d022      	beq.n	810627e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8106238:	68fb      	ldr	r3, [r7, #12]
 810623a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810623e:	60fb      	str	r3, [r7, #12]
 8106240:	e01d      	b.n	810627e <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106242:	683b      	ldr	r3, [r7, #0]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	f003 0301 	and.w	r3, r3, #1
 810624a:	2b00      	cmp	r3, #0
 810624c:	d003      	beq.n	8106256 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 810624e:	68fb      	ldr	r3, [r7, #12]
 8106250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8106254:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106256:	683b      	ldr	r3, [r7, #0]
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	f003 0308 	and.w	r3, r3, #8
 810625e:	2b00      	cmp	r3, #0
 8106260:	d003      	beq.n	810626a <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8106262:	68fb      	ldr	r3, [r7, #12]
 8106264:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8106268:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810626a:	683b      	ldr	r3, [r7, #0]
 810626c:	681b      	ldr	r3, [r3, #0]
 810626e:	f003 0320 	and.w	r3, r3, #32
 8106272:	2b00      	cmp	r3, #0
 8106274:	d003      	beq.n	810627e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8106276:	68fb      	ldr	r3, [r7, #12]
 8106278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810627c:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 810627e:	68fb      	ldr	r3, [r7, #12]
 8106280:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8106288:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810628a:	683b      	ldr	r3, [r7, #0]
 810628c:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 810628e:	683b      	ldr	r3, [r7, #0]
 8106290:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106292:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8106294:	683b      	ldr	r3, [r7, #0]
 8106296:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8106298:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810629a:	683b      	ldr	r3, [r7, #0]
 810629c:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 810629e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 81062a0:	683b      	ldr	r3, [r7, #0]
 81062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 81062a4:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81062a6:	68fa      	ldr	r2, [r7, #12]
 81062a8:	4313      	orrs	r3, r2
 81062aa:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	68fa      	ldr	r2, [r7, #12]
 81062b2:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	2201      	movs	r2, #1
 81062b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	2200      	movs	r2, #0
 81062c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 81062c4:	2300      	movs	r3, #0
}
 81062c6:	4618      	mov	r0, r3
 81062c8:	3714      	adds	r7, #20
 81062ca:	46bd      	mov	sp, r7
 81062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062d0:	4770      	bx	lr
	...

081062d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81062d4:	b580      	push	{r7, lr}
 81062d6:	b08a      	sub	sp, #40	@ 0x28
 81062d8:	af00      	add	r7, sp, #0
 81062da:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	2b00      	cmp	r3, #0
 81062e0:	d101      	bne.n	81062e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81062e2:	2301      	movs	r3, #1
 81062e4:	e290      	b.n	8106808 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81062e6:	f7fc f8a5 	bl	8102434 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81062f0:	2b01      	cmp	r3, #1
 81062f2:	d113      	bne.n	810631c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	681b      	ldr	r3, [r3, #0]
 81062f8:	4a96      	ldr	r2, [pc, #600]	@ (8106554 <HAL_SAI_Init+0x280>)
 81062fa:	4293      	cmp	r3, r2
 81062fc:	d004      	beq.n	8106308 <HAL_SAI_Init+0x34>
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	4a95      	ldr	r2, [pc, #596]	@ (8106558 <HAL_SAI_Init+0x284>)
 8106304:	4293      	cmp	r3, r2
 8106306:	d107      	bne.n	8106318 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810630c:	2b01      	cmp	r3, #1
 810630e:	d103      	bne.n	8106318 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8106310:	687b      	ldr	r3, [r7, #4]
 8106312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8106314:	2b00      	cmp	r3, #0
 8106316:	d001      	beq.n	810631c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8106318:	2301      	movs	r3, #1
 810631a:	e275      	b.n	8106808 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4a8c      	ldr	r2, [pc, #560]	@ (8106554 <HAL_SAI_Init+0x280>)
 8106322:	4293      	cmp	r3, r2
 8106324:	d004      	beq.n	8106330 <HAL_SAI_Init+0x5c>
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	4a8c      	ldr	r2, [pc, #560]	@ (810655c <HAL_SAI_Init+0x288>)
 810632c:	4293      	cmp	r3, r2
 810632e:	d102      	bne.n	8106336 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8106330:	4b8b      	ldr	r3, [pc, #556]	@ (8106560 <HAL_SAI_Init+0x28c>)
 8106332:	61bb      	str	r3, [r7, #24]
 8106334:	e028      	b.n	8106388 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	4a8a      	ldr	r2, [pc, #552]	@ (8106564 <HAL_SAI_Init+0x290>)
 810633c:	4293      	cmp	r3, r2
 810633e:	d004      	beq.n	810634a <HAL_SAI_Init+0x76>
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	4a88      	ldr	r2, [pc, #544]	@ (8106568 <HAL_SAI_Init+0x294>)
 8106346:	4293      	cmp	r3, r2
 8106348:	d102      	bne.n	8106350 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810634a:	4b88      	ldr	r3, [pc, #544]	@ (810656c <HAL_SAI_Init+0x298>)
 810634c:	61bb      	str	r3, [r7, #24]
 810634e:	e01b      	b.n	8106388 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	4a86      	ldr	r2, [pc, #536]	@ (8106570 <HAL_SAI_Init+0x29c>)
 8106356:	4293      	cmp	r3, r2
 8106358:	d004      	beq.n	8106364 <HAL_SAI_Init+0x90>
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	681b      	ldr	r3, [r3, #0]
 810635e:	4a85      	ldr	r2, [pc, #532]	@ (8106574 <HAL_SAI_Init+0x2a0>)
 8106360:	4293      	cmp	r3, r2
 8106362:	d102      	bne.n	810636a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8106364:	4b84      	ldr	r3, [pc, #528]	@ (8106578 <HAL_SAI_Init+0x2a4>)
 8106366:	61bb      	str	r3, [r7, #24]
 8106368:	e00e      	b.n	8106388 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	681b      	ldr	r3, [r3, #0]
 810636e:	4a7a      	ldr	r2, [pc, #488]	@ (8106558 <HAL_SAI_Init+0x284>)
 8106370:	4293      	cmp	r3, r2
 8106372:	d004      	beq.n	810637e <HAL_SAI_Init+0xaa>
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	681b      	ldr	r3, [r3, #0]
 8106378:	4a80      	ldr	r2, [pc, #512]	@ (810657c <HAL_SAI_Init+0x2a8>)
 810637a:	4293      	cmp	r3, r2
 810637c:	d102      	bne.n	8106384 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810637e:	4b80      	ldr	r3, [pc, #512]	@ (8106580 <HAL_SAI_Init+0x2ac>)
 8106380:	61bb      	str	r3, [r7, #24]
 8106382:	e001      	b.n	8106388 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8106384:	2301      	movs	r3, #1
 8106386:	e23f      	b.n	8106808 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 810638e:	b2db      	uxtb	r3, r3
 8106390:	2b00      	cmp	r3, #0
 8106392:	d106      	bne.n	81063a2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	2200      	movs	r2, #0
 8106398:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 810639c:	6878      	ldr	r0, [r7, #4]
 810639e:	f7fb fd7d 	bl	8101e9c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 81063a2:	6878      	ldr	r0, [r7, #4]
 81063a4:	f000 fa40 	bl	8106828 <SAI_Disable>
 81063a8:	4603      	mov	r3, r0
 81063aa:	2b00      	cmp	r3, #0
 81063ac:	d001      	beq.n	81063b2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 81063ae:	2301      	movs	r3, #1
 81063b0:	e22a      	b.n	8106808 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	2202      	movs	r2, #2
 81063b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	68db      	ldr	r3, [r3, #12]
 81063be:	2b02      	cmp	r3, #2
 81063c0:	d00c      	beq.n	81063dc <HAL_SAI_Init+0x108>
 81063c2:	2b02      	cmp	r3, #2
 81063c4:	d80d      	bhi.n	81063e2 <HAL_SAI_Init+0x10e>
 81063c6:	2b00      	cmp	r3, #0
 81063c8:	d002      	beq.n	81063d0 <HAL_SAI_Init+0xfc>
 81063ca:	2b01      	cmp	r3, #1
 81063cc:	d003      	beq.n	81063d6 <HAL_SAI_Init+0x102>
 81063ce:	e008      	b.n	81063e2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81063d0:	2300      	movs	r3, #0
 81063d2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81063d4:	e008      	b.n	81063e8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81063d6:	2310      	movs	r3, #16
 81063d8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81063da:	e005      	b.n	81063e8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 81063dc:	2320      	movs	r3, #32
 81063de:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81063e0:	e002      	b.n	81063e8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81063e2:	2300      	movs	r3, #0
 81063e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81063e6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	689b      	ldr	r3, [r3, #8]
 81063ec:	2b05      	cmp	r3, #5
 81063ee:	d832      	bhi.n	8106456 <HAL_SAI_Init+0x182>
 81063f0:	a201      	add	r2, pc, #4	@ (adr r2, 81063f8 <HAL_SAI_Init+0x124>)
 81063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063f6:	bf00      	nop
 81063f8:	08106411 	.word	0x08106411
 81063fc:	08106417 	.word	0x08106417
 8106400:	0810641f 	.word	0x0810641f
 8106404:	08106427 	.word	0x08106427
 8106408:	08106437 	.word	0x08106437
 810640c:	08106447 	.word	0x08106447
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8106410:	2300      	movs	r3, #0
 8106412:	61fb      	str	r3, [r7, #28]
      break;
 8106414:	e022      	b.n	810645c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8106416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810641a:	61fb      	str	r3, [r7, #28]
      break;
 810641c:	e01e      	b.n	810645c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810641e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8106422:	61fb      	str	r3, [r7, #28]
      break;
 8106424:	e01a      	b.n	810645c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810642a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 810642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810642e:	f043 0301 	orr.w	r3, r3, #1
 8106432:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106434:	e012      	b.n	810645c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106436:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810643a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 810643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810643e:	f043 0302 	orr.w	r3, r3, #2
 8106442:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106444:	e00a      	b.n	810645c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106446:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810644a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 810644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810644e:	f043 0303 	orr.w	r3, r3, #3
 8106452:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106454:	e002      	b.n	810645c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8106456:	2300      	movs	r3, #0
 8106458:	61fb      	str	r3, [r7, #28]
      break;
 810645a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 810645c:	69bb      	ldr	r3, [r7, #24]
 810645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106460:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	6a1b      	ldr	r3, [r3, #32]
 8106466:	2b00      	cmp	r3, #0
 8106468:	f000 80c5 	beq.w	81065f6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 810646c:	2300      	movs	r3, #0
 810646e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	4a37      	ldr	r2, [pc, #220]	@ (8106554 <HAL_SAI_Init+0x280>)
 8106476:	4293      	cmp	r3, r2
 8106478:	d004      	beq.n	8106484 <HAL_SAI_Init+0x1b0>
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	681b      	ldr	r3, [r3, #0]
 810647e:	4a37      	ldr	r2, [pc, #220]	@ (810655c <HAL_SAI_Init+0x288>)
 8106480:	4293      	cmp	r3, r2
 8106482:	d106      	bne.n	8106492 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8106484:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8106488:	f04f 0100 	mov.w	r1, #0
 810648c:	f7fe fa36 	bl	81048fc <HAL_RCCEx_GetPeriphCLKFreq>
 8106490:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	4a33      	ldr	r2, [pc, #204]	@ (8106564 <HAL_SAI_Init+0x290>)
 8106498:	4293      	cmp	r3, r2
 810649a:	d004      	beq.n	81064a6 <HAL_SAI_Init+0x1d2>
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	4a31      	ldr	r2, [pc, #196]	@ (8106568 <HAL_SAI_Init+0x294>)
 81064a2:	4293      	cmp	r3, r2
 81064a4:	d106      	bne.n	81064b4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 81064a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81064aa:	f04f 0100 	mov.w	r1, #0
 81064ae:	f7fe fa25 	bl	81048fc <HAL_RCCEx_GetPeriphCLKFreq>
 81064b2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	4a2d      	ldr	r2, [pc, #180]	@ (8106570 <HAL_SAI_Init+0x29c>)
 81064ba:	4293      	cmp	r3, r2
 81064bc:	d004      	beq.n	81064c8 <HAL_SAI_Init+0x1f4>
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	4a2c      	ldr	r2, [pc, #176]	@ (8106574 <HAL_SAI_Init+0x2a0>)
 81064c4:	4293      	cmp	r3, r2
 81064c6:	d106      	bne.n	81064d6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 81064c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81064cc:	f04f 0100 	mov.w	r1, #0
 81064d0:	f7fe fa14 	bl	81048fc <HAL_RCCEx_GetPeriphCLKFreq>
 81064d4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	4a1f      	ldr	r2, [pc, #124]	@ (8106558 <HAL_SAI_Init+0x284>)
 81064dc:	4293      	cmp	r3, r2
 81064de:	d106      	bne.n	81064ee <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81064e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 81064e4:	f04f 0100 	mov.w	r1, #0
 81064e8:	f7fe fa08 	bl	81048fc <HAL_RCCEx_GetPeriphCLKFreq>
 81064ec:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	4a22      	ldr	r2, [pc, #136]	@ (810657c <HAL_SAI_Init+0x2a8>)
 81064f4:	4293      	cmp	r3, r2
 81064f6:	d106      	bne.n	8106506 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81064f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 81064fc:	f04f 0100 	mov.w	r1, #0
 8106500:	f7fe f9fc 	bl	81048fc <HAL_RCCEx_GetPeriphCLKFreq>
 8106504:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	699b      	ldr	r3, [r3, #24]
 810650a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 810650e:	d139      	bne.n	8106584 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106514:	2b04      	cmp	r3, #4
 8106516:	d102      	bne.n	810651e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8106518:	2340      	movs	r3, #64	@ 0x40
 810651a:	60fb      	str	r3, [r7, #12]
 810651c:	e00a      	b.n	8106534 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106522:	2b08      	cmp	r3, #8
 8106524:	d103      	bne.n	810652e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8106526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810652a:	60fb      	str	r3, [r7, #12]
 810652c:	e002      	b.n	8106534 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106532:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8106534:	697a      	ldr	r2, [r7, #20]
 8106536:	4613      	mov	r3, r2
 8106538:	009b      	lsls	r3, r3, #2
 810653a:	4413      	add	r3, r2
 810653c:	005b      	lsls	r3, r3, #1
 810653e:	4619      	mov	r1, r3
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	6a1b      	ldr	r3, [r3, #32]
 8106544:	68fa      	ldr	r2, [r7, #12]
 8106546:	fb02 f303 	mul.w	r3, r2, r3
 810654a:	fbb1 f3f3 	udiv	r3, r1, r3
 810654e:	613b      	str	r3, [r7, #16]
 8106550:	e030      	b.n	81065b4 <HAL_SAI_Init+0x2e0>
 8106552:	bf00      	nop
 8106554:	40015804 	.word	0x40015804
 8106558:	58005404 	.word	0x58005404
 810655c:	40015824 	.word	0x40015824
 8106560:	40015800 	.word	0x40015800
 8106564:	40015c04 	.word	0x40015c04
 8106568:	40015c24 	.word	0x40015c24
 810656c:	40015c00 	.word	0x40015c00
 8106570:	40016004 	.word	0x40016004
 8106574:	40016024 	.word	0x40016024
 8106578:	40016000 	.word	0x40016000
 810657c:	58005424 	.word	0x58005424
 8106580:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106584:	687b      	ldr	r3, [r7, #4]
 8106586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810658c:	d101      	bne.n	8106592 <HAL_SAI_Init+0x2be>
 810658e:	2302      	movs	r3, #2
 8106590:	e000      	b.n	8106594 <HAL_SAI_Init+0x2c0>
 8106592:	2301      	movs	r3, #1
 8106594:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8106596:	697a      	ldr	r2, [r7, #20]
 8106598:	4613      	mov	r3, r2
 810659a:	009b      	lsls	r3, r3, #2
 810659c:	4413      	add	r3, r2
 810659e:	005b      	lsls	r3, r3, #1
 81065a0:	4619      	mov	r1, r3
 81065a2:	687b      	ldr	r3, [r7, #4]
 81065a4:	6a1b      	ldr	r3, [r3, #32]
 81065a6:	68ba      	ldr	r2, [r7, #8]
 81065a8:	fb02 f303 	mul.w	r3, r2, r3
 81065ac:	021b      	lsls	r3, r3, #8
 81065ae:	fbb1 f3f3 	udiv	r3, r1, r3
 81065b2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81065b4:	693b      	ldr	r3, [r7, #16]
 81065b6:	4a96      	ldr	r2, [pc, #600]	@ (8106810 <HAL_SAI_Init+0x53c>)
 81065b8:	fba2 2303 	umull	r2, r3, r2, r3
 81065bc:	08da      	lsrs	r2, r3, #3
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81065c2:	6939      	ldr	r1, [r7, #16]
 81065c4:	4b92      	ldr	r3, [pc, #584]	@ (8106810 <HAL_SAI_Init+0x53c>)
 81065c6:	fba3 2301 	umull	r2, r3, r3, r1
 81065ca:	08da      	lsrs	r2, r3, #3
 81065cc:	4613      	mov	r3, r2
 81065ce:	009b      	lsls	r3, r3, #2
 81065d0:	4413      	add	r3, r2
 81065d2:	005b      	lsls	r3, r3, #1
 81065d4:	1aca      	subs	r2, r1, r3
 81065d6:	2a08      	cmp	r2, #8
 81065d8:	d904      	bls.n	81065e4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81065de:	1c5a      	adds	r2, r3, #1
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81065e8:	2b04      	cmp	r3, #4
 81065ea:	d104      	bne.n	81065f6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81065f0:	085a      	lsrs	r2, r3, #1
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	685b      	ldr	r3, [r3, #4]
 81065fa:	2b00      	cmp	r3, #0
 81065fc:	d003      	beq.n	8106606 <HAL_SAI_Init+0x332>
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	685b      	ldr	r3, [r3, #4]
 8106602:	2b02      	cmp	r3, #2
 8106604:	d109      	bne.n	810661a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810660a:	2b01      	cmp	r3, #1
 810660c:	d101      	bne.n	8106612 <HAL_SAI_Init+0x33e>
 810660e:	2300      	movs	r3, #0
 8106610:	e001      	b.n	8106616 <HAL_SAI_Init+0x342>
 8106612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106616:	623b      	str	r3, [r7, #32]
 8106618:	e008      	b.n	810662c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810661e:	2b01      	cmp	r3, #1
 8106620:	d102      	bne.n	8106628 <HAL_SAI_Init+0x354>
 8106622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106626:	e000      	b.n	810662a <HAL_SAI_Init+0x356>
 8106628:	2300      	movs	r3, #0
 810662a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810662c:	f7fb ff02 	bl	8102434 <HAL_GetREVID>
 8106630:	4603      	mov	r3, r0
 8106632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106636:	d331      	bcc.n	810669c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	681b      	ldr	r3, [r3, #0]
 810663c:	6819      	ldr	r1, [r3, #0]
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	681a      	ldr	r2, [r3, #0]
 8106642:	4b74      	ldr	r3, [pc, #464]	@ (8106814 <HAL_SAI_Init+0x540>)
 8106644:	400b      	ands	r3, r1
 8106646:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	681b      	ldr	r3, [r3, #0]
 810664c:	6819      	ldr	r1, [r3, #0]
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	685a      	ldr	r2, [r3, #4]
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106656:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810665c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106662:	431a      	orrs	r2, r3
 8106664:	6a3b      	ldr	r3, [r7, #32]
 8106666:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106668:	69fb      	ldr	r3, [r7, #28]
 810666a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106670:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	695b      	ldr	r3, [r3, #20]
 8106676:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810667c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106682:	051b      	lsls	r3, r3, #20
 8106684:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810668a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	691b      	ldr	r3, [r3, #16]
 8106690:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	681b      	ldr	r3, [r3, #0]
 8106696:	430a      	orrs	r2, r1
 8106698:	601a      	str	r2, [r3, #0]
 810669a:	e02d      	b.n	81066f8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	6819      	ldr	r1, [r3, #0]
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	681a      	ldr	r2, [r3, #0]
 81066a6:	4b5c      	ldr	r3, [pc, #368]	@ (8106818 <HAL_SAI_Init+0x544>)
 81066a8:	400b      	ands	r3, r1
 81066aa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	6819      	ldr	r1, [r3, #0]
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	685a      	ldr	r2, [r3, #4]
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81066ba:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81066c0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81066c2:	687b      	ldr	r3, [r7, #4]
 81066c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81066c6:	431a      	orrs	r2, r3
 81066c8:	6a3b      	ldr	r3, [r7, #32]
 81066ca:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81066cc:	69fb      	ldr	r3, [r7, #28]
 81066ce:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 81066d4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	695b      	ldr	r3, [r3, #20]
 81066da:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81066e0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81066e6:	051b      	lsls	r3, r3, #20
 81066e8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81066ee:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	430a      	orrs	r2, r1
 81066f6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	681b      	ldr	r3, [r3, #0]
 81066fc:	685b      	ldr	r3, [r3, #4]
 81066fe:	687a      	ldr	r2, [r7, #4]
 8106700:	6812      	ldr	r2, [r2, #0]
 8106702:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8106706:	f023 030f 	bic.w	r3, r3, #15
 810670a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	681b      	ldr	r3, [r3, #0]
 8106710:	6859      	ldr	r1, [r3, #4]
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	69da      	ldr	r2, [r3, #28]
 8106716:	687b      	ldr	r3, [r7, #4]
 8106718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810671a:	431a      	orrs	r2, r3
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106720:	431a      	orrs	r2, r3
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	681b      	ldr	r3, [r3, #0]
 8106726:	430a      	orrs	r2, r1
 8106728:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	6899      	ldr	r1, [r3, #8]
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	681a      	ldr	r2, [r3, #0]
 8106734:	4b39      	ldr	r3, [pc, #228]	@ (810681c <HAL_SAI_Init+0x548>)
 8106736:	400b      	ands	r3, r1
 8106738:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	6899      	ldr	r1, [r3, #8]
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106744:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810674a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8106750:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8106756:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810675c:	3b01      	subs	r3, #1
 810675e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106760:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	681b      	ldr	r3, [r3, #0]
 8106766:	430a      	orrs	r2, r1
 8106768:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	68d9      	ldr	r1, [r3, #12]
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	681a      	ldr	r2, [r3, #0]
 8106774:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8106778:	400b      	ands	r3, r1
 810677a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	681b      	ldr	r3, [r3, #0]
 8106780:	68d9      	ldr	r1, [r3, #12]
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810678a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810678c:	687b      	ldr	r3, [r7, #4]
 810678e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106790:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106792:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106798:	3b01      	subs	r3, #1
 810679a:	021b      	lsls	r3, r3, #8
 810679c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	430a      	orrs	r2, r1
 81067a4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	681b      	ldr	r3, [r3, #0]
 81067aa:	4a1d      	ldr	r2, [pc, #116]	@ (8106820 <HAL_SAI_Init+0x54c>)
 81067ac:	4293      	cmp	r3, r2
 81067ae:	d004      	beq.n	81067ba <HAL_SAI_Init+0x4e6>
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	681b      	ldr	r3, [r3, #0]
 81067b4:	4a1b      	ldr	r2, [pc, #108]	@ (8106824 <HAL_SAI_Init+0x550>)
 81067b6:	4293      	cmp	r3, r2
 81067b8:	d119      	bne.n	81067ee <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81067ba:	69bb      	ldr	r3, [r7, #24]
 81067bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81067be:	f023 0201 	bic.w	r2, r3, #1
 81067c2:	69bb      	ldr	r3, [r7, #24]
 81067c4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81067cc:	2b01      	cmp	r3, #1
 81067ce:	d10e      	bne.n	81067ee <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81067d8:	3b01      	subs	r3, #1
 81067da:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81067dc:	431a      	orrs	r2, r3
 81067de:	69bb      	ldr	r3, [r7, #24]
 81067e0:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81067e2:	69bb      	ldr	r3, [r7, #24]
 81067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81067e6:	f043 0201 	orr.w	r2, r3, #1
 81067ea:	69bb      	ldr	r3, [r7, #24]
 81067ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	2200      	movs	r2, #0
 81067f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	2201      	movs	r2, #1
 81067fa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	2200      	movs	r2, #0
 8106802:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8106806:	2300      	movs	r3, #0
}
 8106808:	4618      	mov	r0, r3
 810680a:	3728      	adds	r7, #40	@ 0x28
 810680c:	46bd      	mov	sp, r7
 810680e:	bd80      	pop	{r7, pc}
 8106810:	cccccccd 	.word	0xcccccccd
 8106814:	f005c010 	.word	0xf005c010
 8106818:	f805c010 	.word	0xf805c010
 810681c:	fff88000 	.word	0xfff88000
 8106820:	40015804 	.word	0x40015804
 8106824:	58005404 	.word	0x58005404

08106828 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106828:	b480      	push	{r7}
 810682a:	b085      	sub	sp, #20
 810682c:	af00      	add	r7, sp, #0
 810682e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106830:	4b18      	ldr	r3, [pc, #96]	@ (8106894 <SAI_Disable+0x6c>)
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	4a18      	ldr	r2, [pc, #96]	@ (8106898 <SAI_Disable+0x70>)
 8106836:	fba2 2303 	umull	r2, r3, r2, r3
 810683a:	0b1b      	lsrs	r3, r3, #12
 810683c:	009b      	lsls	r3, r3, #2
 810683e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106840:	2300      	movs	r3, #0
 8106842:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	681a      	ldr	r2, [r3, #0]
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8106852:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	2b00      	cmp	r3, #0
 8106858:	d10a      	bne.n	8106870 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106860:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 810686a:	2303      	movs	r3, #3
 810686c:	72fb      	strb	r3, [r7, #11]
      break;
 810686e:	e009      	b.n	8106884 <SAI_Disable+0x5c>
    }
    count--;
 8106870:	68fb      	ldr	r3, [r7, #12]
 8106872:	3b01      	subs	r3, #1
 8106874:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	681b      	ldr	r3, [r3, #0]
 810687c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106880:	2b00      	cmp	r3, #0
 8106882:	d1e7      	bne.n	8106854 <SAI_Disable+0x2c>

  return status;
 8106884:	7afb      	ldrb	r3, [r7, #11]
}
 8106886:	4618      	mov	r0, r3
 8106888:	3714      	adds	r7, #20
 810688a:	46bd      	mov	sp, r7
 810688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106890:	4770      	bx	lr
 8106892:	bf00      	nop
 8106894:	10000000 	.word	0x10000000
 8106898:	95cbec1b 	.word	0x95cbec1b

0810689c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810689c:	b580      	push	{r7, lr}
 810689e:	b084      	sub	sp, #16
 81068a0:	af00      	add	r7, sp, #0
 81068a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	2b00      	cmp	r3, #0
 81068a8:	d101      	bne.n	81068ae <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 81068aa:	2301      	movs	r3, #1
 81068ac:	e05e      	b.n	810696c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 81068ae:	687b      	ldr	r3, [r7, #4]
 81068b0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 81068b4:	b2db      	uxtb	r3, r3
 81068b6:	2b00      	cmp	r3, #0
 81068b8:	d106      	bne.n	81068c8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	2200      	movs	r2, #0
 81068be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 81068c2:	6878      	ldr	r0, [r7, #4]
 81068c4:	f7fa ff6c 	bl	81017a0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81068c8:	687b      	ldr	r3, [r7, #4]
 81068ca:	2202      	movs	r2, #2
 81068cc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	681a      	ldr	r2, [r3, #0]
 81068d6:	687b      	ldr	r3, [r7, #4]
 81068d8:	681b      	ldr	r3, [r3, #0]
 81068da:	f022 0203 	bic.w	r2, r2, #3
 81068de:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	681b      	ldr	r3, [r3, #0]
 81068e4:	681b      	ldr	r3, [r3, #0]
 81068e6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 81068e8:	68fa      	ldr	r2, [r7, #12]
 81068ea:	4b22      	ldr	r3, [pc, #136]	@ (8106974 <HAL_SPDIFRX_Init+0xd8>)
 81068ec:	4013      	ands	r3, r2
 81068ee:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 81068f8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 81068fe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106904:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810690a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106910:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8106916:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 810691c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8106922:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8106928:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810692a:	68fa      	ldr	r2, [r7, #12]
 810692c:	4313      	orrs	r3, r2
 810692e:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8106936:	2b01      	cmp	r3, #1
 8106938:	d103      	bne.n	8106942 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810693a:	68fb      	ldr	r3, [r7, #12]
 810693c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106940:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106948:	2b01      	cmp	r3, #1
 810694a:	d103      	bne.n	8106954 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810694c:	68fb      	ldr	r3, [r7, #12]
 810694e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106952:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	681b      	ldr	r3, [r3, #0]
 8106958:	68fa      	ldr	r2, [r7, #12]
 810695a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	2200      	movs	r2, #0
 8106960:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	2201      	movs	r2, #1
 8106966:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810696a:	2300      	movs	r3, #0
}
 810696c:	4618      	mov	r0, r3
 810696e:	3710      	adds	r7, #16
 8106970:	46bd      	mov	sp, r7
 8106972:	bd80      	pop	{r7, pc}
 8106974:	ffc88407 	.word	0xffc88407

08106978 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106978:	b580      	push	{r7, lr}
 810697a:	b084      	sub	sp, #16
 810697c:	af00      	add	r7, sp, #0
 810697e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	2b00      	cmp	r3, #0
 8106984:	d101      	bne.n	810698a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8106986:	2301      	movs	r3, #1
 8106988:	e10f      	b.n	8106baa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	2200      	movs	r2, #0
 810698e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	681b      	ldr	r3, [r3, #0]
 8106994:	4a87      	ldr	r2, [pc, #540]	@ (8106bb4 <HAL_SPI_Init+0x23c>)
 8106996:	4293      	cmp	r3, r2
 8106998:	d00f      	beq.n	81069ba <HAL_SPI_Init+0x42>
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	681b      	ldr	r3, [r3, #0]
 810699e:	4a86      	ldr	r2, [pc, #536]	@ (8106bb8 <HAL_SPI_Init+0x240>)
 81069a0:	4293      	cmp	r3, r2
 81069a2:	d00a      	beq.n	81069ba <HAL_SPI_Init+0x42>
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	681b      	ldr	r3, [r3, #0]
 81069a8:	4a84      	ldr	r2, [pc, #528]	@ (8106bbc <HAL_SPI_Init+0x244>)
 81069aa:	4293      	cmp	r3, r2
 81069ac:	d005      	beq.n	81069ba <HAL_SPI_Init+0x42>
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	68db      	ldr	r3, [r3, #12]
 81069b2:	2b0f      	cmp	r3, #15
 81069b4:	d901      	bls.n	81069ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81069b6:	2301      	movs	r3, #1
 81069b8:	e0f7      	b.n	8106baa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81069ba:	6878      	ldr	r0, [r7, #4]
 81069bc:	f000 f900 	bl	8106bc0 <SPI_GetPacketSize>
 81069c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	4a7b      	ldr	r2, [pc, #492]	@ (8106bb4 <HAL_SPI_Init+0x23c>)
 81069c8:	4293      	cmp	r3, r2
 81069ca:	d00c      	beq.n	81069e6 <HAL_SPI_Init+0x6e>
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	4a79      	ldr	r2, [pc, #484]	@ (8106bb8 <HAL_SPI_Init+0x240>)
 81069d2:	4293      	cmp	r3, r2
 81069d4:	d007      	beq.n	81069e6 <HAL_SPI_Init+0x6e>
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	4a78      	ldr	r2, [pc, #480]	@ (8106bbc <HAL_SPI_Init+0x244>)
 81069dc:	4293      	cmp	r3, r2
 81069de:	d002      	beq.n	81069e6 <HAL_SPI_Init+0x6e>
 81069e0:	68fb      	ldr	r3, [r7, #12]
 81069e2:	2b08      	cmp	r3, #8
 81069e4:	d811      	bhi.n	8106a0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81069ea:	4a72      	ldr	r2, [pc, #456]	@ (8106bb4 <HAL_SPI_Init+0x23c>)
 81069ec:	4293      	cmp	r3, r2
 81069ee:	d009      	beq.n	8106a04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	4a70      	ldr	r2, [pc, #448]	@ (8106bb8 <HAL_SPI_Init+0x240>)
 81069f6:	4293      	cmp	r3, r2
 81069f8:	d004      	beq.n	8106a04 <HAL_SPI_Init+0x8c>
 81069fa:	687b      	ldr	r3, [r7, #4]
 81069fc:	681b      	ldr	r3, [r3, #0]
 81069fe:	4a6f      	ldr	r2, [pc, #444]	@ (8106bbc <HAL_SPI_Init+0x244>)
 8106a00:	4293      	cmp	r3, r2
 8106a02:	d104      	bne.n	8106a0e <HAL_SPI_Init+0x96>
 8106a04:	68fb      	ldr	r3, [r7, #12]
 8106a06:	2b10      	cmp	r3, #16
 8106a08:	d901      	bls.n	8106a0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8106a0a:	2301      	movs	r3, #1
 8106a0c:	e0cd      	b.n	8106baa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106a0e:	687b      	ldr	r3, [r7, #4]
 8106a10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8106a14:	b2db      	uxtb	r3, r3
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d106      	bne.n	8106a28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	2200      	movs	r2, #0
 8106a1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106a22:	6878      	ldr	r0, [r7, #4]
 8106a24:	f7fa ff22 	bl	810186c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	2202      	movs	r2, #2
 8106a2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	681a      	ldr	r2, [r3, #0]
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	f022 0201 	bic.w	r2, r2, #1
 8106a3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	689b      	ldr	r3, [r3, #8]
 8106a46:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8106a4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	699b      	ldr	r3, [r3, #24]
 8106a50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106a54:	d119      	bne.n	8106a8a <HAL_SPI_Init+0x112>
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	685b      	ldr	r3, [r3, #4]
 8106a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106a5e:	d103      	bne.n	8106a68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106a64:	2b00      	cmp	r3, #0
 8106a66:	d008      	beq.n	8106a7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106a68:	687b      	ldr	r3, [r7, #4]
 8106a6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106a6c:	2b00      	cmp	r3, #0
 8106a6e:	d10c      	bne.n	8106a8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106a78:	d107      	bne.n	8106a8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	681a      	ldr	r2, [r3, #0]
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8106a88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	685b      	ldr	r3, [r3, #4]
 8106a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d00f      	beq.n	8106ab6 <HAL_SPI_Init+0x13e>
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	68db      	ldr	r3, [r3, #12]
 8106a9a:	2b06      	cmp	r3, #6
 8106a9c:	d90b      	bls.n	8106ab6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	681b      	ldr	r3, [r3, #0]
 8106aa4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8106aa8:	687b      	ldr	r3, [r7, #4]
 8106aaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	681b      	ldr	r3, [r3, #0]
 8106ab0:	430a      	orrs	r2, r1
 8106ab2:	601a      	str	r2, [r3, #0]
 8106ab4:	e007      	b.n	8106ac6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	681b      	ldr	r3, [r3, #0]
 8106aba:	681a      	ldr	r2, [r3, #0]
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106ac4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	69da      	ldr	r2, [r3, #28]
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106ace:	431a      	orrs	r2, r3
 8106ad0:	68bb      	ldr	r3, [r7, #8]
 8106ad2:	431a      	orrs	r2, r3
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106ad8:	ea42 0103 	orr.w	r1, r2, r3
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	68da      	ldr	r2, [r3, #12]
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	681b      	ldr	r3, [r3, #0]
 8106ae4:	430a      	orrs	r2, r1
 8106ae6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8106ae8:	687b      	ldr	r3, [r7, #4]
 8106aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106af0:	431a      	orrs	r2, r3
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106af6:	431a      	orrs	r2, r3
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	699b      	ldr	r3, [r3, #24]
 8106afc:	431a      	orrs	r2, r3
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	691b      	ldr	r3, [r3, #16]
 8106b02:	431a      	orrs	r2, r3
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	695b      	ldr	r3, [r3, #20]
 8106b08:	431a      	orrs	r2, r3
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	6a1b      	ldr	r3, [r3, #32]
 8106b0e:	431a      	orrs	r2, r3
 8106b10:	687b      	ldr	r3, [r7, #4]
 8106b12:	685b      	ldr	r3, [r3, #4]
 8106b14:	431a      	orrs	r2, r3
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106b1a:	431a      	orrs	r2, r3
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	689b      	ldr	r3, [r3, #8]
 8106b20:	431a      	orrs	r2, r3
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106b26:	ea42 0103 	orr.w	r1, r2, r3
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	681b      	ldr	r3, [r3, #0]
 8106b32:	430a      	orrs	r2, r1
 8106b34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	685b      	ldr	r3, [r3, #4]
 8106b3a:	2b00      	cmp	r3, #0
 8106b3c:	d113      	bne.n	8106b66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	689b      	ldr	r3, [r3, #8]
 8106b44:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106b50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	689b      	ldr	r3, [r3, #8]
 8106b58:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8106b64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	681b      	ldr	r3, [r3, #0]
 8106b6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	681b      	ldr	r3, [r3, #0]
 8106b70:	f022 0201 	bic.w	r2, r2, #1
 8106b74:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	685b      	ldr	r3, [r3, #4]
 8106b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106b7e:	2b00      	cmp	r3, #0
 8106b80:	d00a      	beq.n	8106b98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106b82:	687b      	ldr	r3, [r7, #4]
 8106b84:	681b      	ldr	r3, [r3, #0]
 8106b86:	68db      	ldr	r3, [r3, #12]
 8106b88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	430a      	orrs	r2, r1
 8106b96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	2200      	movs	r2, #0
 8106b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	2201      	movs	r2, #1
 8106ba4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8106ba8:	2300      	movs	r3, #0
}
 8106baa:	4618      	mov	r0, r3
 8106bac:	3710      	adds	r7, #16
 8106bae:	46bd      	mov	sp, r7
 8106bb0:	bd80      	pop	{r7, pc}
 8106bb2:	bf00      	nop
 8106bb4:	40013000 	.word	0x40013000
 8106bb8:	40003800 	.word	0x40003800
 8106bbc:	40003c00 	.word	0x40003c00

08106bc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8106bc0:	b480      	push	{r7}
 8106bc2:	b085      	sub	sp, #20
 8106bc4:	af00      	add	r7, sp, #0
 8106bc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106bcc:	095b      	lsrs	r3, r3, #5
 8106bce:	3301      	adds	r3, #1
 8106bd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	68db      	ldr	r3, [r3, #12]
 8106bd6:	3301      	adds	r3, #1
 8106bd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106bda:	68bb      	ldr	r3, [r7, #8]
 8106bdc:	3307      	adds	r3, #7
 8106bde:	08db      	lsrs	r3, r3, #3
 8106be0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8106be2:	68bb      	ldr	r3, [r7, #8]
 8106be4:	68fa      	ldr	r2, [r7, #12]
 8106be6:	fb02 f303 	mul.w	r3, r2, r3
}
 8106bea:	4618      	mov	r0, r3
 8106bec:	3714      	adds	r7, #20
 8106bee:	46bd      	mov	sp, r7
 8106bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bf4:	4770      	bx	lr

08106bf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106bf6:	b580      	push	{r7, lr}
 8106bf8:	b082      	sub	sp, #8
 8106bfa:	af00      	add	r7, sp, #0
 8106bfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	2b00      	cmp	r3, #0
 8106c02:	d101      	bne.n	8106c08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106c04:	2301      	movs	r3, #1
 8106c06:	e049      	b.n	8106c9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106c0e:	b2db      	uxtb	r3, r3
 8106c10:	2b00      	cmp	r3, #0
 8106c12:	d106      	bne.n	8106c22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	2200      	movs	r2, #0
 8106c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106c1c:	6878      	ldr	r0, [r7, #4]
 8106c1e:	f7fa ff77 	bl	8101b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	2202      	movs	r2, #2
 8106c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	681a      	ldr	r2, [r3, #0]
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	3304      	adds	r3, #4
 8106c32:	4619      	mov	r1, r3
 8106c34:	4610      	mov	r0, r2
 8106c36:	f000 fb47 	bl	81072c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	2201      	movs	r2, #1
 8106c3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	2201      	movs	r2, #1
 8106c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	2201      	movs	r2, #1
 8106c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	2201      	movs	r2, #1
 8106c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	2201      	movs	r2, #1
 8106c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	2201      	movs	r2, #1
 8106c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106c6a:	687b      	ldr	r3, [r7, #4]
 8106c6c:	2201      	movs	r2, #1
 8106c6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	2201      	movs	r2, #1
 8106c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	2201      	movs	r2, #1
 8106c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	2201      	movs	r2, #1
 8106c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106c8a:	687b      	ldr	r3, [r7, #4]
 8106c8c:	2201      	movs	r2, #1
 8106c8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	2201      	movs	r2, #1
 8106c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106c9a:	2300      	movs	r3, #0
}
 8106c9c:	4618      	mov	r0, r3
 8106c9e:	3708      	adds	r7, #8
 8106ca0:	46bd      	mov	sp, r7
 8106ca2:	bd80      	pop	{r7, pc}

08106ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106ca4:	b480      	push	{r7}
 8106ca6:	b085      	sub	sp, #20
 8106ca8:	af00      	add	r7, sp, #0
 8106caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106cb2:	b2db      	uxtb	r3, r3
 8106cb4:	2b01      	cmp	r3, #1
 8106cb6:	d001      	beq.n	8106cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106cb8:	2301      	movs	r3, #1
 8106cba:	e054      	b.n	8106d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	2202      	movs	r2, #2
 8106cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	68da      	ldr	r2, [r3, #12]
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	f042 0201 	orr.w	r2, r2, #1
 8106cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	681b      	ldr	r3, [r3, #0]
 8106cd8:	4a26      	ldr	r2, [pc, #152]	@ (8106d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8106cda:	4293      	cmp	r3, r2
 8106cdc:	d022      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106ce6:	d01d      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	4a22      	ldr	r2, [pc, #136]	@ (8106d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8106cee:	4293      	cmp	r3, r2
 8106cf0:	d018      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	4a21      	ldr	r2, [pc, #132]	@ (8106d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8106cf8:	4293      	cmp	r3, r2
 8106cfa:	d013      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	681b      	ldr	r3, [r3, #0]
 8106d00:	4a1f      	ldr	r2, [pc, #124]	@ (8106d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8106d02:	4293      	cmp	r3, r2
 8106d04:	d00e      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106d06:	687b      	ldr	r3, [r7, #4]
 8106d08:	681b      	ldr	r3, [r3, #0]
 8106d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8106d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8106d0c:	4293      	cmp	r3, r2
 8106d0e:	d009      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	681b      	ldr	r3, [r3, #0]
 8106d14:	4a1c      	ldr	r2, [pc, #112]	@ (8106d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8106d16:	4293      	cmp	r3, r2
 8106d18:	d004      	beq.n	8106d24 <HAL_TIM_Base_Start_IT+0x80>
 8106d1a:	687b      	ldr	r3, [r7, #4]
 8106d1c:	681b      	ldr	r3, [r3, #0]
 8106d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8106d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8106d20:	4293      	cmp	r3, r2
 8106d22:	d115      	bne.n	8106d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	681b      	ldr	r3, [r3, #0]
 8106d28:	689a      	ldr	r2, [r3, #8]
 8106d2a:	4b19      	ldr	r3, [pc, #100]	@ (8106d90 <HAL_TIM_Base_Start_IT+0xec>)
 8106d2c:	4013      	ands	r3, r2
 8106d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d30:	68fb      	ldr	r3, [r7, #12]
 8106d32:	2b06      	cmp	r3, #6
 8106d34:	d015      	beq.n	8106d62 <HAL_TIM_Base_Start_IT+0xbe>
 8106d36:	68fb      	ldr	r3, [r7, #12]
 8106d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106d3c:	d011      	beq.n	8106d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	681a      	ldr	r2, [r3, #0]
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	f042 0201 	orr.w	r2, r2, #1
 8106d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d4e:	e008      	b.n	8106d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	681b      	ldr	r3, [r3, #0]
 8106d54:	681a      	ldr	r2, [r3, #0]
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	681b      	ldr	r3, [r3, #0]
 8106d5a:	f042 0201 	orr.w	r2, r2, #1
 8106d5e:	601a      	str	r2, [r3, #0]
 8106d60:	e000      	b.n	8106d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106d64:	2300      	movs	r3, #0
}
 8106d66:	4618      	mov	r0, r3
 8106d68:	3714      	adds	r7, #20
 8106d6a:	46bd      	mov	sp, r7
 8106d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d70:	4770      	bx	lr
 8106d72:	bf00      	nop
 8106d74:	40010000 	.word	0x40010000
 8106d78:	40000400 	.word	0x40000400
 8106d7c:	40000800 	.word	0x40000800
 8106d80:	40000c00 	.word	0x40000c00
 8106d84:	40010400 	.word	0x40010400
 8106d88:	40001800 	.word	0x40001800
 8106d8c:	40014000 	.word	0x40014000
 8106d90:	00010007 	.word	0x00010007

08106d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106d94:	b580      	push	{r7, lr}
 8106d96:	b082      	sub	sp, #8
 8106d98:	af00      	add	r7, sp, #0
 8106d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	d101      	bne.n	8106da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106da2:	2301      	movs	r3, #1
 8106da4:	e049      	b.n	8106e3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106da6:	687b      	ldr	r3, [r7, #4]
 8106da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106dac:	b2db      	uxtb	r3, r3
 8106dae:	2b00      	cmp	r3, #0
 8106db0:	d106      	bne.n	8106dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	2200      	movs	r2, #0
 8106db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106dba:	6878      	ldr	r0, [r7, #4]
 8106dbc:	f7fa fe5e 	bl	8101a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	2202      	movs	r2, #2
 8106dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106dc8:	687b      	ldr	r3, [r7, #4]
 8106dca:	681a      	ldr	r2, [r3, #0]
 8106dcc:	687b      	ldr	r3, [r7, #4]
 8106dce:	3304      	adds	r3, #4
 8106dd0:	4619      	mov	r1, r3
 8106dd2:	4610      	mov	r0, r2
 8106dd4:	f000 fa78 	bl	81072c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106dd8:	687b      	ldr	r3, [r7, #4]
 8106dda:	2201      	movs	r2, #1
 8106ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	2201      	movs	r2, #1
 8106de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	2201      	movs	r2, #1
 8106dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	2201      	movs	r2, #1
 8106df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106df8:	687b      	ldr	r3, [r7, #4]
 8106dfa:	2201      	movs	r2, #1
 8106dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	2201      	movs	r2, #1
 8106e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	2201      	movs	r2, #1
 8106e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	2201      	movs	r2, #1
 8106e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	2201      	movs	r2, #1
 8106e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	2201      	movs	r2, #1
 8106e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	2201      	movs	r2, #1
 8106e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	2201      	movs	r2, #1
 8106e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106e38:	2300      	movs	r3, #0
}
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	3708      	adds	r7, #8
 8106e3e:	46bd      	mov	sp, r7
 8106e40:	bd80      	pop	{r7, pc}

08106e42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106e42:	b580      	push	{r7, lr}
 8106e44:	b084      	sub	sp, #16
 8106e46:	af00      	add	r7, sp, #0
 8106e48:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8106e4a:	687b      	ldr	r3, [r7, #4]
 8106e4c:	681b      	ldr	r3, [r3, #0]
 8106e4e:	68db      	ldr	r3, [r3, #12]
 8106e50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106e52:	687b      	ldr	r3, [r7, #4]
 8106e54:	681b      	ldr	r3, [r3, #0]
 8106e56:	691b      	ldr	r3, [r3, #16]
 8106e58:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8106e5a:	68bb      	ldr	r3, [r7, #8]
 8106e5c:	f003 0302 	and.w	r3, r3, #2
 8106e60:	2b00      	cmp	r3, #0
 8106e62:	d020      	beq.n	8106ea6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106e64:	68fb      	ldr	r3, [r7, #12]
 8106e66:	f003 0302 	and.w	r3, r3, #2
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d01b      	beq.n	8106ea6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	681b      	ldr	r3, [r3, #0]
 8106e72:	f06f 0202 	mvn.w	r2, #2
 8106e76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	2201      	movs	r2, #1
 8106e7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	699b      	ldr	r3, [r3, #24]
 8106e84:	f003 0303 	and.w	r3, r3, #3
 8106e88:	2b00      	cmp	r3, #0
 8106e8a:	d003      	beq.n	8106e94 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106e8c:	6878      	ldr	r0, [r7, #4]
 8106e8e:	f000 f9fd 	bl	810728c <HAL_TIM_IC_CaptureCallback>
 8106e92:	e005      	b.n	8106ea0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106e94:	6878      	ldr	r0, [r7, #4]
 8106e96:	f000 f9ef 	bl	8107278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106e9a:	6878      	ldr	r0, [r7, #4]
 8106e9c:	f000 fa00 	bl	81072a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	2200      	movs	r2, #0
 8106ea4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106ea6:	68bb      	ldr	r3, [r7, #8]
 8106ea8:	f003 0304 	and.w	r3, r3, #4
 8106eac:	2b00      	cmp	r3, #0
 8106eae:	d020      	beq.n	8106ef2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106eb0:	68fb      	ldr	r3, [r7, #12]
 8106eb2:	f003 0304 	and.w	r3, r3, #4
 8106eb6:	2b00      	cmp	r3, #0
 8106eb8:	d01b      	beq.n	8106ef2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8106eba:	687b      	ldr	r3, [r7, #4]
 8106ebc:	681b      	ldr	r3, [r3, #0]
 8106ebe:	f06f 0204 	mvn.w	r2, #4
 8106ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	2202      	movs	r2, #2
 8106ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	699b      	ldr	r3, [r3, #24]
 8106ed0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106ed4:	2b00      	cmp	r3, #0
 8106ed6:	d003      	beq.n	8106ee0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106ed8:	6878      	ldr	r0, [r7, #4]
 8106eda:	f000 f9d7 	bl	810728c <HAL_TIM_IC_CaptureCallback>
 8106ede:	e005      	b.n	8106eec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106ee0:	6878      	ldr	r0, [r7, #4]
 8106ee2:	f000 f9c9 	bl	8107278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106ee6:	6878      	ldr	r0, [r7, #4]
 8106ee8:	f000 f9da 	bl	81072a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	2200      	movs	r2, #0
 8106ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106ef2:	68bb      	ldr	r3, [r7, #8]
 8106ef4:	f003 0308 	and.w	r3, r3, #8
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	d020      	beq.n	8106f3e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	f003 0308 	and.w	r3, r3, #8
 8106f02:	2b00      	cmp	r3, #0
 8106f04:	d01b      	beq.n	8106f3e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	681b      	ldr	r3, [r3, #0]
 8106f0a:	f06f 0208 	mvn.w	r2, #8
 8106f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	2204      	movs	r2, #4
 8106f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	681b      	ldr	r3, [r3, #0]
 8106f1a:	69db      	ldr	r3, [r3, #28]
 8106f1c:	f003 0303 	and.w	r3, r3, #3
 8106f20:	2b00      	cmp	r3, #0
 8106f22:	d003      	beq.n	8106f2c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f24:	6878      	ldr	r0, [r7, #4]
 8106f26:	f000 f9b1 	bl	810728c <HAL_TIM_IC_CaptureCallback>
 8106f2a:	e005      	b.n	8106f38 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f2c:	6878      	ldr	r0, [r7, #4]
 8106f2e:	f000 f9a3 	bl	8107278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f32:	6878      	ldr	r0, [r7, #4]
 8106f34:	f000 f9b4 	bl	81072a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	2200      	movs	r2, #0
 8106f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106f3e:	68bb      	ldr	r3, [r7, #8]
 8106f40:	f003 0310 	and.w	r3, r3, #16
 8106f44:	2b00      	cmp	r3, #0
 8106f46:	d020      	beq.n	8106f8a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8106f48:	68fb      	ldr	r3, [r7, #12]
 8106f4a:	f003 0310 	and.w	r3, r3, #16
 8106f4e:	2b00      	cmp	r3, #0
 8106f50:	d01b      	beq.n	8106f8a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	681b      	ldr	r3, [r3, #0]
 8106f56:	f06f 0210 	mvn.w	r2, #16
 8106f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	2208      	movs	r2, #8
 8106f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	69db      	ldr	r3, [r3, #28]
 8106f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106f6c:	2b00      	cmp	r3, #0
 8106f6e:	d003      	beq.n	8106f78 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f70:	6878      	ldr	r0, [r7, #4]
 8106f72:	f000 f98b 	bl	810728c <HAL_TIM_IC_CaptureCallback>
 8106f76:	e005      	b.n	8106f84 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f78:	6878      	ldr	r0, [r7, #4]
 8106f7a:	f000 f97d 	bl	8107278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f7e:	6878      	ldr	r0, [r7, #4]
 8106f80:	f000 f98e 	bl	81072a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	2200      	movs	r2, #0
 8106f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8106f8a:	68bb      	ldr	r3, [r7, #8]
 8106f8c:	f003 0301 	and.w	r3, r3, #1
 8106f90:	2b00      	cmp	r3, #0
 8106f92:	d00c      	beq.n	8106fae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8106f94:	68fb      	ldr	r3, [r7, #12]
 8106f96:	f003 0301 	and.w	r3, r3, #1
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d007      	beq.n	8106fae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	681b      	ldr	r3, [r3, #0]
 8106fa2:	f06f 0201 	mvn.w	r2, #1
 8106fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106fa8:	6878      	ldr	r0, [r7, #4]
 8106faa:	f7fa fb17 	bl	81015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106fae:	68bb      	ldr	r3, [r7, #8]
 8106fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106fb4:	2b00      	cmp	r3, #0
 8106fb6:	d104      	bne.n	8106fc2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8106fb8:	68bb      	ldr	r3, [r7, #8]
 8106fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106fbe:	2b00      	cmp	r3, #0
 8106fc0:	d00c      	beq.n	8106fdc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106fc2:	68fb      	ldr	r3, [r7, #12]
 8106fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106fc8:	2b00      	cmp	r3, #0
 8106fca:	d007      	beq.n	8106fdc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106fd6:	6878      	ldr	r0, [r7, #4]
 8106fd8:	f000 fe02 	bl	8107be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8106fdc:	68bb      	ldr	r3, [r7, #8]
 8106fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106fe2:	2b00      	cmp	r3, #0
 8106fe4:	d00c      	beq.n	8107000 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106fe6:	68fb      	ldr	r3, [r7, #12]
 8106fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106fec:	2b00      	cmp	r3, #0
 8106fee:	d007      	beq.n	8107000 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	681b      	ldr	r3, [r3, #0]
 8106ff4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8106ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106ffa:	6878      	ldr	r0, [r7, #4]
 8106ffc:	f000 fdfa 	bl	8107bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8107000:	68bb      	ldr	r3, [r7, #8]
 8107002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107006:	2b00      	cmp	r3, #0
 8107008:	d00c      	beq.n	8107024 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810700a:	68fb      	ldr	r3, [r7, #12]
 810700c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107010:	2b00      	cmp	r3, #0
 8107012:	d007      	beq.n	8107024 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810701e:	6878      	ldr	r0, [r7, #4]
 8107020:	f000 f948 	bl	81072b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8107024:	68bb      	ldr	r3, [r7, #8]
 8107026:	f003 0320 	and.w	r3, r3, #32
 810702a:	2b00      	cmp	r3, #0
 810702c:	d00c      	beq.n	8107048 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810702e:	68fb      	ldr	r3, [r7, #12]
 8107030:	f003 0320 	and.w	r3, r3, #32
 8107034:	2b00      	cmp	r3, #0
 8107036:	d007      	beq.n	8107048 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	681b      	ldr	r3, [r3, #0]
 810703c:	f06f 0220 	mvn.w	r2, #32
 8107040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107042:	6878      	ldr	r0, [r7, #4]
 8107044:	f000 fdc2 	bl	8107bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107048:	bf00      	nop
 810704a:	3710      	adds	r7, #16
 810704c:	46bd      	mov	sp, r7
 810704e:	bd80      	pop	{r7, pc}

08107050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107050:	b580      	push	{r7, lr}
 8107052:	b086      	sub	sp, #24
 8107054:	af00      	add	r7, sp, #0
 8107056:	60f8      	str	r0, [r7, #12]
 8107058:	60b9      	str	r1, [r7, #8]
 810705a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810705c:	2300      	movs	r3, #0
 810705e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107060:	68fb      	ldr	r3, [r7, #12]
 8107062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107066:	2b01      	cmp	r3, #1
 8107068:	d101      	bne.n	810706e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810706a:	2302      	movs	r3, #2
 810706c:	e0ff      	b.n	810726e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810706e:	68fb      	ldr	r3, [r7, #12]
 8107070:	2201      	movs	r2, #1
 8107072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	2b14      	cmp	r3, #20
 810707a:	f200 80f0 	bhi.w	810725e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810707e:	a201      	add	r2, pc, #4	@ (adr r2, 8107084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107084:	081070d9 	.word	0x081070d9
 8107088:	0810725f 	.word	0x0810725f
 810708c:	0810725f 	.word	0x0810725f
 8107090:	0810725f 	.word	0x0810725f
 8107094:	08107119 	.word	0x08107119
 8107098:	0810725f 	.word	0x0810725f
 810709c:	0810725f 	.word	0x0810725f
 81070a0:	0810725f 	.word	0x0810725f
 81070a4:	0810715b 	.word	0x0810715b
 81070a8:	0810725f 	.word	0x0810725f
 81070ac:	0810725f 	.word	0x0810725f
 81070b0:	0810725f 	.word	0x0810725f
 81070b4:	0810719b 	.word	0x0810719b
 81070b8:	0810725f 	.word	0x0810725f
 81070bc:	0810725f 	.word	0x0810725f
 81070c0:	0810725f 	.word	0x0810725f
 81070c4:	081071dd 	.word	0x081071dd
 81070c8:	0810725f 	.word	0x0810725f
 81070cc:	0810725f 	.word	0x0810725f
 81070d0:	0810725f 	.word	0x0810725f
 81070d4:	0810721d 	.word	0x0810721d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81070d8:	68fb      	ldr	r3, [r7, #12]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	68b9      	ldr	r1, [r7, #8]
 81070de:	4618      	mov	r0, r3
 81070e0:	f000 f992 	bl	8107408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81070e4:	68fb      	ldr	r3, [r7, #12]
 81070e6:	681b      	ldr	r3, [r3, #0]
 81070e8:	699a      	ldr	r2, [r3, #24]
 81070ea:	68fb      	ldr	r3, [r7, #12]
 81070ec:	681b      	ldr	r3, [r3, #0]
 81070ee:	f042 0208 	orr.w	r2, r2, #8
 81070f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	681b      	ldr	r3, [r3, #0]
 81070f8:	699a      	ldr	r2, [r3, #24]
 81070fa:	68fb      	ldr	r3, [r7, #12]
 81070fc:	681b      	ldr	r3, [r3, #0]
 81070fe:	f022 0204 	bic.w	r2, r2, #4
 8107102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107104:	68fb      	ldr	r3, [r7, #12]
 8107106:	681b      	ldr	r3, [r3, #0]
 8107108:	6999      	ldr	r1, [r3, #24]
 810710a:	68bb      	ldr	r3, [r7, #8]
 810710c:	691a      	ldr	r2, [r3, #16]
 810710e:	68fb      	ldr	r3, [r7, #12]
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	430a      	orrs	r2, r1
 8107114:	619a      	str	r2, [r3, #24]
      break;
 8107116:	e0a5      	b.n	8107264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107118:	68fb      	ldr	r3, [r7, #12]
 810711a:	681b      	ldr	r3, [r3, #0]
 810711c:	68b9      	ldr	r1, [r7, #8]
 810711e:	4618      	mov	r0, r3
 8107120:	f000 fa02 	bl	8107528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107124:	68fb      	ldr	r3, [r7, #12]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	699a      	ldr	r2, [r3, #24]
 810712a:	68fb      	ldr	r3, [r7, #12]
 810712c:	681b      	ldr	r3, [r3, #0]
 810712e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107134:	68fb      	ldr	r3, [r7, #12]
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	699a      	ldr	r2, [r3, #24]
 810713a:	68fb      	ldr	r3, [r7, #12]
 810713c:	681b      	ldr	r3, [r3, #0]
 810713e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107144:	68fb      	ldr	r3, [r7, #12]
 8107146:	681b      	ldr	r3, [r3, #0]
 8107148:	6999      	ldr	r1, [r3, #24]
 810714a:	68bb      	ldr	r3, [r7, #8]
 810714c:	691b      	ldr	r3, [r3, #16]
 810714e:	021a      	lsls	r2, r3, #8
 8107150:	68fb      	ldr	r3, [r7, #12]
 8107152:	681b      	ldr	r3, [r3, #0]
 8107154:	430a      	orrs	r2, r1
 8107156:	619a      	str	r2, [r3, #24]
      break;
 8107158:	e084      	b.n	8107264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	681b      	ldr	r3, [r3, #0]
 810715e:	68b9      	ldr	r1, [r7, #8]
 8107160:	4618      	mov	r0, r3
 8107162:	f000 fa6b 	bl	810763c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	681b      	ldr	r3, [r3, #0]
 810716a:	69da      	ldr	r2, [r3, #28]
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	681b      	ldr	r3, [r3, #0]
 8107170:	f042 0208 	orr.w	r2, r2, #8
 8107174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107176:	68fb      	ldr	r3, [r7, #12]
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	69da      	ldr	r2, [r3, #28]
 810717c:	68fb      	ldr	r3, [r7, #12]
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	f022 0204 	bic.w	r2, r2, #4
 8107184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8107186:	68fb      	ldr	r3, [r7, #12]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	69d9      	ldr	r1, [r3, #28]
 810718c:	68bb      	ldr	r3, [r7, #8]
 810718e:	691a      	ldr	r2, [r3, #16]
 8107190:	68fb      	ldr	r3, [r7, #12]
 8107192:	681b      	ldr	r3, [r3, #0]
 8107194:	430a      	orrs	r2, r1
 8107196:	61da      	str	r2, [r3, #28]
      break;
 8107198:	e064      	b.n	8107264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810719a:	68fb      	ldr	r3, [r7, #12]
 810719c:	681b      	ldr	r3, [r3, #0]
 810719e:	68b9      	ldr	r1, [r7, #8]
 81071a0:	4618      	mov	r0, r3
 81071a2:	f000 fad3 	bl	810774c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	681b      	ldr	r3, [r3, #0]
 81071aa:	69da      	ldr	r2, [r3, #28]
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81071b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81071b6:	68fb      	ldr	r3, [r7, #12]
 81071b8:	681b      	ldr	r3, [r3, #0]
 81071ba:	69da      	ldr	r2, [r3, #28]
 81071bc:	68fb      	ldr	r3, [r7, #12]
 81071be:	681b      	ldr	r3, [r3, #0]
 81071c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81071c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81071c6:	68fb      	ldr	r3, [r7, #12]
 81071c8:	681b      	ldr	r3, [r3, #0]
 81071ca:	69d9      	ldr	r1, [r3, #28]
 81071cc:	68bb      	ldr	r3, [r7, #8]
 81071ce:	691b      	ldr	r3, [r3, #16]
 81071d0:	021a      	lsls	r2, r3, #8
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	681b      	ldr	r3, [r3, #0]
 81071d6:	430a      	orrs	r2, r1
 81071d8:	61da      	str	r2, [r3, #28]
      break;
 81071da:	e043      	b.n	8107264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81071dc:	68fb      	ldr	r3, [r7, #12]
 81071de:	681b      	ldr	r3, [r3, #0]
 81071e0:	68b9      	ldr	r1, [r7, #8]
 81071e2:	4618      	mov	r0, r3
 81071e4:	f000 fb1c 	bl	8107820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81071e8:	68fb      	ldr	r3, [r7, #12]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	681b      	ldr	r3, [r3, #0]
 81071f2:	f042 0208 	orr.w	r2, r2, #8
 81071f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81071f8:	68fb      	ldr	r3, [r7, #12]
 81071fa:	681b      	ldr	r3, [r3, #0]
 81071fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81071fe:	68fb      	ldr	r3, [r7, #12]
 8107200:	681b      	ldr	r3, [r3, #0]
 8107202:	f022 0204 	bic.w	r2, r2, #4
 8107206:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107208:	68fb      	ldr	r3, [r7, #12]
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810720e:	68bb      	ldr	r3, [r7, #8]
 8107210:	691a      	ldr	r2, [r3, #16]
 8107212:	68fb      	ldr	r3, [r7, #12]
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	430a      	orrs	r2, r1
 8107218:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810721a:	e023      	b.n	8107264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810721c:	68fb      	ldr	r3, [r7, #12]
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	68b9      	ldr	r1, [r7, #8]
 8107222:	4618      	mov	r0, r3
 8107224:	f000 fb60 	bl	81078e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107228:	68fb      	ldr	r3, [r7, #12]
 810722a:	681b      	ldr	r3, [r3, #0]
 810722c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107236:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107238:	68fb      	ldr	r3, [r7, #12]
 810723a:	681b      	ldr	r3, [r3, #0]
 810723c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810723e:	68fb      	ldr	r3, [r7, #12]
 8107240:	681b      	ldr	r3, [r3, #0]
 8107242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107246:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107248:	68fb      	ldr	r3, [r7, #12]
 810724a:	681b      	ldr	r3, [r3, #0]
 810724c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810724e:	68bb      	ldr	r3, [r7, #8]
 8107250:	691b      	ldr	r3, [r3, #16]
 8107252:	021a      	lsls	r2, r3, #8
 8107254:	68fb      	ldr	r3, [r7, #12]
 8107256:	681b      	ldr	r3, [r3, #0]
 8107258:	430a      	orrs	r2, r1
 810725a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810725c:	e002      	b.n	8107264 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810725e:	2301      	movs	r3, #1
 8107260:	75fb      	strb	r3, [r7, #23]
      break;
 8107262:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	2200      	movs	r2, #0
 8107268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810726c:	7dfb      	ldrb	r3, [r7, #23]
}
 810726e:	4618      	mov	r0, r3
 8107270:	3718      	adds	r7, #24
 8107272:	46bd      	mov	sp, r7
 8107274:	bd80      	pop	{r7, pc}
 8107276:	bf00      	nop

08107278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107278:	b480      	push	{r7}
 810727a:	b083      	sub	sp, #12
 810727c:	af00      	add	r7, sp, #0
 810727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107280:	bf00      	nop
 8107282:	370c      	adds	r7, #12
 8107284:	46bd      	mov	sp, r7
 8107286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810728a:	4770      	bx	lr

0810728c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810728c:	b480      	push	{r7}
 810728e:	b083      	sub	sp, #12
 8107290:	af00      	add	r7, sp, #0
 8107292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107294:	bf00      	nop
 8107296:	370c      	adds	r7, #12
 8107298:	46bd      	mov	sp, r7
 810729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810729e:	4770      	bx	lr

081072a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81072a0:	b480      	push	{r7}
 81072a2:	b083      	sub	sp, #12
 81072a4:	af00      	add	r7, sp, #0
 81072a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81072a8:	bf00      	nop
 81072aa:	370c      	adds	r7, #12
 81072ac:	46bd      	mov	sp, r7
 81072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072b2:	4770      	bx	lr

081072b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81072b4:	b480      	push	{r7}
 81072b6:	b083      	sub	sp, #12
 81072b8:	af00      	add	r7, sp, #0
 81072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81072bc:	bf00      	nop
 81072be:	370c      	adds	r7, #12
 81072c0:	46bd      	mov	sp, r7
 81072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072c6:	4770      	bx	lr

081072c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81072c8:	b480      	push	{r7}
 81072ca:	b085      	sub	sp, #20
 81072cc:	af00      	add	r7, sp, #0
 81072ce:	6078      	str	r0, [r7, #4]
 81072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	681b      	ldr	r3, [r3, #0]
 81072d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	4a43      	ldr	r2, [pc, #268]	@ (81073e8 <TIM_Base_SetConfig+0x120>)
 81072dc:	4293      	cmp	r3, r2
 81072de:	d013      	beq.n	8107308 <TIM_Base_SetConfig+0x40>
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81072e6:	d00f      	beq.n	8107308 <TIM_Base_SetConfig+0x40>
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	4a40      	ldr	r2, [pc, #256]	@ (81073ec <TIM_Base_SetConfig+0x124>)
 81072ec:	4293      	cmp	r3, r2
 81072ee:	d00b      	beq.n	8107308 <TIM_Base_SetConfig+0x40>
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	4a3f      	ldr	r2, [pc, #252]	@ (81073f0 <TIM_Base_SetConfig+0x128>)
 81072f4:	4293      	cmp	r3, r2
 81072f6:	d007      	beq.n	8107308 <TIM_Base_SetConfig+0x40>
 81072f8:	687b      	ldr	r3, [r7, #4]
 81072fa:	4a3e      	ldr	r2, [pc, #248]	@ (81073f4 <TIM_Base_SetConfig+0x12c>)
 81072fc:	4293      	cmp	r3, r2
 81072fe:	d003      	beq.n	8107308 <TIM_Base_SetConfig+0x40>
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	4a3d      	ldr	r2, [pc, #244]	@ (81073f8 <TIM_Base_SetConfig+0x130>)
 8107304:	4293      	cmp	r3, r2
 8107306:	d108      	bne.n	810731a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107308:	68fb      	ldr	r3, [r7, #12]
 810730a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810730e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107310:	683b      	ldr	r3, [r7, #0]
 8107312:	685b      	ldr	r3, [r3, #4]
 8107314:	68fa      	ldr	r2, [r7, #12]
 8107316:	4313      	orrs	r3, r2
 8107318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	4a32      	ldr	r2, [pc, #200]	@ (81073e8 <TIM_Base_SetConfig+0x120>)
 810731e:	4293      	cmp	r3, r2
 8107320:	d01f      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107328:	d01b      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 810732a:	687b      	ldr	r3, [r7, #4]
 810732c:	4a2f      	ldr	r2, [pc, #188]	@ (81073ec <TIM_Base_SetConfig+0x124>)
 810732e:	4293      	cmp	r3, r2
 8107330:	d017      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 8107332:	687b      	ldr	r3, [r7, #4]
 8107334:	4a2e      	ldr	r2, [pc, #184]	@ (81073f0 <TIM_Base_SetConfig+0x128>)
 8107336:	4293      	cmp	r3, r2
 8107338:	d013      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 810733a:	687b      	ldr	r3, [r7, #4]
 810733c:	4a2d      	ldr	r2, [pc, #180]	@ (81073f4 <TIM_Base_SetConfig+0x12c>)
 810733e:	4293      	cmp	r3, r2
 8107340:	d00f      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 8107342:	687b      	ldr	r3, [r7, #4]
 8107344:	4a2c      	ldr	r2, [pc, #176]	@ (81073f8 <TIM_Base_SetConfig+0x130>)
 8107346:	4293      	cmp	r3, r2
 8107348:	d00b      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	4a2b      	ldr	r2, [pc, #172]	@ (81073fc <TIM_Base_SetConfig+0x134>)
 810734e:	4293      	cmp	r3, r2
 8107350:	d007      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	4a2a      	ldr	r2, [pc, #168]	@ (8107400 <TIM_Base_SetConfig+0x138>)
 8107356:	4293      	cmp	r3, r2
 8107358:	d003      	beq.n	8107362 <TIM_Base_SetConfig+0x9a>
 810735a:	687b      	ldr	r3, [r7, #4]
 810735c:	4a29      	ldr	r2, [pc, #164]	@ (8107404 <TIM_Base_SetConfig+0x13c>)
 810735e:	4293      	cmp	r3, r2
 8107360:	d108      	bne.n	8107374 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107362:	68fb      	ldr	r3, [r7, #12]
 8107364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810736a:	683b      	ldr	r3, [r7, #0]
 810736c:	68db      	ldr	r3, [r3, #12]
 810736e:	68fa      	ldr	r2, [r7, #12]
 8107370:	4313      	orrs	r3, r2
 8107372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810737a:	683b      	ldr	r3, [r7, #0]
 810737c:	695b      	ldr	r3, [r3, #20]
 810737e:	4313      	orrs	r3, r2
 8107380:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107382:	683b      	ldr	r3, [r7, #0]
 8107384:	689a      	ldr	r2, [r3, #8]
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810738a:	683b      	ldr	r3, [r7, #0]
 810738c:	681a      	ldr	r2, [r3, #0]
 810738e:	687b      	ldr	r3, [r7, #4]
 8107390:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107392:	687b      	ldr	r3, [r7, #4]
 8107394:	4a14      	ldr	r2, [pc, #80]	@ (81073e8 <TIM_Base_SetConfig+0x120>)
 8107396:	4293      	cmp	r3, r2
 8107398:	d00f      	beq.n	81073ba <TIM_Base_SetConfig+0xf2>
 810739a:	687b      	ldr	r3, [r7, #4]
 810739c:	4a16      	ldr	r2, [pc, #88]	@ (81073f8 <TIM_Base_SetConfig+0x130>)
 810739e:	4293      	cmp	r3, r2
 81073a0:	d00b      	beq.n	81073ba <TIM_Base_SetConfig+0xf2>
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	4a15      	ldr	r2, [pc, #84]	@ (81073fc <TIM_Base_SetConfig+0x134>)
 81073a6:	4293      	cmp	r3, r2
 81073a8:	d007      	beq.n	81073ba <TIM_Base_SetConfig+0xf2>
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	4a14      	ldr	r2, [pc, #80]	@ (8107400 <TIM_Base_SetConfig+0x138>)
 81073ae:	4293      	cmp	r3, r2
 81073b0:	d003      	beq.n	81073ba <TIM_Base_SetConfig+0xf2>
 81073b2:	687b      	ldr	r3, [r7, #4]
 81073b4:	4a13      	ldr	r2, [pc, #76]	@ (8107404 <TIM_Base_SetConfig+0x13c>)
 81073b6:	4293      	cmp	r3, r2
 81073b8:	d103      	bne.n	81073c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81073ba:	683b      	ldr	r3, [r7, #0]
 81073bc:	691a      	ldr	r2, [r3, #16]
 81073be:	687b      	ldr	r3, [r7, #4]
 81073c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 81073c2:	687b      	ldr	r3, [r7, #4]
 81073c4:	681b      	ldr	r3, [r3, #0]
 81073c6:	f043 0204 	orr.w	r2, r3, #4
 81073ca:	687b      	ldr	r3, [r7, #4]
 81073cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	2201      	movs	r2, #1
 81073d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	68fa      	ldr	r2, [r7, #12]
 81073d8:	601a      	str	r2, [r3, #0]
}
 81073da:	bf00      	nop
 81073dc:	3714      	adds	r7, #20
 81073de:	46bd      	mov	sp, r7
 81073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073e4:	4770      	bx	lr
 81073e6:	bf00      	nop
 81073e8:	40010000 	.word	0x40010000
 81073ec:	40000400 	.word	0x40000400
 81073f0:	40000800 	.word	0x40000800
 81073f4:	40000c00 	.word	0x40000c00
 81073f8:	40010400 	.word	0x40010400
 81073fc:	40014000 	.word	0x40014000
 8107400:	40014400 	.word	0x40014400
 8107404:	40014800 	.word	0x40014800

08107408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107408:	b480      	push	{r7}
 810740a:	b087      	sub	sp, #28
 810740c:	af00      	add	r7, sp, #0
 810740e:	6078      	str	r0, [r7, #4]
 8107410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	6a1b      	ldr	r3, [r3, #32]
 8107416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	6a1b      	ldr	r3, [r3, #32]
 810741c:	f023 0201 	bic.w	r2, r3, #1
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	685b      	ldr	r3, [r3, #4]
 8107428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	699b      	ldr	r3, [r3, #24]
 810742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107430:	68fb      	ldr	r3, [r7, #12]
 8107432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810743a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810743c:	68fb      	ldr	r3, [r7, #12]
 810743e:	f023 0303 	bic.w	r3, r3, #3
 8107442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107444:	683b      	ldr	r3, [r7, #0]
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	68fa      	ldr	r2, [r7, #12]
 810744a:	4313      	orrs	r3, r2
 810744c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810744e:	697b      	ldr	r3, [r7, #20]
 8107450:	f023 0302 	bic.w	r3, r3, #2
 8107454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107456:	683b      	ldr	r3, [r7, #0]
 8107458:	689b      	ldr	r3, [r3, #8]
 810745a:	697a      	ldr	r2, [r7, #20]
 810745c:	4313      	orrs	r3, r2
 810745e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	4a2c      	ldr	r2, [pc, #176]	@ (8107514 <TIM_OC1_SetConfig+0x10c>)
 8107464:	4293      	cmp	r3, r2
 8107466:	d00f      	beq.n	8107488 <TIM_OC1_SetConfig+0x80>
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	4a2b      	ldr	r2, [pc, #172]	@ (8107518 <TIM_OC1_SetConfig+0x110>)
 810746c:	4293      	cmp	r3, r2
 810746e:	d00b      	beq.n	8107488 <TIM_OC1_SetConfig+0x80>
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	4a2a      	ldr	r2, [pc, #168]	@ (810751c <TIM_OC1_SetConfig+0x114>)
 8107474:	4293      	cmp	r3, r2
 8107476:	d007      	beq.n	8107488 <TIM_OC1_SetConfig+0x80>
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	4a29      	ldr	r2, [pc, #164]	@ (8107520 <TIM_OC1_SetConfig+0x118>)
 810747c:	4293      	cmp	r3, r2
 810747e:	d003      	beq.n	8107488 <TIM_OC1_SetConfig+0x80>
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	4a28      	ldr	r2, [pc, #160]	@ (8107524 <TIM_OC1_SetConfig+0x11c>)
 8107484:	4293      	cmp	r3, r2
 8107486:	d10c      	bne.n	81074a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107488:	697b      	ldr	r3, [r7, #20]
 810748a:	f023 0308 	bic.w	r3, r3, #8
 810748e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107490:	683b      	ldr	r3, [r7, #0]
 8107492:	68db      	ldr	r3, [r3, #12]
 8107494:	697a      	ldr	r2, [r7, #20]
 8107496:	4313      	orrs	r3, r2
 8107498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810749a:	697b      	ldr	r3, [r7, #20]
 810749c:	f023 0304 	bic.w	r3, r3, #4
 81074a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	4a1b      	ldr	r2, [pc, #108]	@ (8107514 <TIM_OC1_SetConfig+0x10c>)
 81074a6:	4293      	cmp	r3, r2
 81074a8:	d00f      	beq.n	81074ca <TIM_OC1_SetConfig+0xc2>
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	4a1a      	ldr	r2, [pc, #104]	@ (8107518 <TIM_OC1_SetConfig+0x110>)
 81074ae:	4293      	cmp	r3, r2
 81074b0:	d00b      	beq.n	81074ca <TIM_OC1_SetConfig+0xc2>
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	4a19      	ldr	r2, [pc, #100]	@ (810751c <TIM_OC1_SetConfig+0x114>)
 81074b6:	4293      	cmp	r3, r2
 81074b8:	d007      	beq.n	81074ca <TIM_OC1_SetConfig+0xc2>
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	4a18      	ldr	r2, [pc, #96]	@ (8107520 <TIM_OC1_SetConfig+0x118>)
 81074be:	4293      	cmp	r3, r2
 81074c0:	d003      	beq.n	81074ca <TIM_OC1_SetConfig+0xc2>
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	4a17      	ldr	r2, [pc, #92]	@ (8107524 <TIM_OC1_SetConfig+0x11c>)
 81074c6:	4293      	cmp	r3, r2
 81074c8:	d111      	bne.n	81074ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81074ca:	693b      	ldr	r3, [r7, #16]
 81074cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81074d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81074d2:	693b      	ldr	r3, [r7, #16]
 81074d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 81074d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81074da:	683b      	ldr	r3, [r7, #0]
 81074dc:	695b      	ldr	r3, [r3, #20]
 81074de:	693a      	ldr	r2, [r7, #16]
 81074e0:	4313      	orrs	r3, r2
 81074e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81074e4:	683b      	ldr	r3, [r7, #0]
 81074e6:	699b      	ldr	r3, [r3, #24]
 81074e8:	693a      	ldr	r2, [r7, #16]
 81074ea:	4313      	orrs	r3, r2
 81074ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	693a      	ldr	r2, [r7, #16]
 81074f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81074f4:	687b      	ldr	r3, [r7, #4]
 81074f6:	68fa      	ldr	r2, [r7, #12]
 81074f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81074fa:	683b      	ldr	r3, [r7, #0]
 81074fc:	685a      	ldr	r2, [r3, #4]
 81074fe:	687b      	ldr	r3, [r7, #4]
 8107500:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	697a      	ldr	r2, [r7, #20]
 8107506:	621a      	str	r2, [r3, #32]
}
 8107508:	bf00      	nop
 810750a:	371c      	adds	r7, #28
 810750c:	46bd      	mov	sp, r7
 810750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107512:	4770      	bx	lr
 8107514:	40010000 	.word	0x40010000
 8107518:	40010400 	.word	0x40010400
 810751c:	40014000 	.word	0x40014000
 8107520:	40014400 	.word	0x40014400
 8107524:	40014800 	.word	0x40014800

08107528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107528:	b480      	push	{r7}
 810752a:	b087      	sub	sp, #28
 810752c:	af00      	add	r7, sp, #0
 810752e:	6078      	str	r0, [r7, #4]
 8107530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	6a1b      	ldr	r3, [r3, #32]
 8107536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	6a1b      	ldr	r3, [r3, #32]
 810753c:	f023 0210 	bic.w	r2, r3, #16
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107544:	687b      	ldr	r3, [r7, #4]
 8107546:	685b      	ldr	r3, [r3, #4]
 8107548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	699b      	ldr	r3, [r3, #24]
 810754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107550:	68fb      	ldr	r3, [r7, #12]
 8107552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810755a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810755c:	68fb      	ldr	r3, [r7, #12]
 810755e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107564:	683b      	ldr	r3, [r7, #0]
 8107566:	681b      	ldr	r3, [r3, #0]
 8107568:	021b      	lsls	r3, r3, #8
 810756a:	68fa      	ldr	r2, [r7, #12]
 810756c:	4313      	orrs	r3, r2
 810756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107570:	697b      	ldr	r3, [r7, #20]
 8107572:	f023 0320 	bic.w	r3, r3, #32
 8107576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107578:	683b      	ldr	r3, [r7, #0]
 810757a:	689b      	ldr	r3, [r3, #8]
 810757c:	011b      	lsls	r3, r3, #4
 810757e:	697a      	ldr	r2, [r7, #20]
 8107580:	4313      	orrs	r3, r2
 8107582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	4a28      	ldr	r2, [pc, #160]	@ (8107628 <TIM_OC2_SetConfig+0x100>)
 8107588:	4293      	cmp	r3, r2
 810758a:	d003      	beq.n	8107594 <TIM_OC2_SetConfig+0x6c>
 810758c:	687b      	ldr	r3, [r7, #4]
 810758e:	4a27      	ldr	r2, [pc, #156]	@ (810762c <TIM_OC2_SetConfig+0x104>)
 8107590:	4293      	cmp	r3, r2
 8107592:	d10d      	bne.n	81075b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107594:	697b      	ldr	r3, [r7, #20]
 8107596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810759a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810759c:	683b      	ldr	r3, [r7, #0]
 810759e:	68db      	ldr	r3, [r3, #12]
 81075a0:	011b      	lsls	r3, r3, #4
 81075a2:	697a      	ldr	r2, [r7, #20]
 81075a4:	4313      	orrs	r3, r2
 81075a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81075a8:	697b      	ldr	r3, [r7, #20]
 81075aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81075ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81075b0:	687b      	ldr	r3, [r7, #4]
 81075b2:	4a1d      	ldr	r2, [pc, #116]	@ (8107628 <TIM_OC2_SetConfig+0x100>)
 81075b4:	4293      	cmp	r3, r2
 81075b6:	d00f      	beq.n	81075d8 <TIM_OC2_SetConfig+0xb0>
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	4a1c      	ldr	r2, [pc, #112]	@ (810762c <TIM_OC2_SetConfig+0x104>)
 81075bc:	4293      	cmp	r3, r2
 81075be:	d00b      	beq.n	81075d8 <TIM_OC2_SetConfig+0xb0>
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	4a1b      	ldr	r2, [pc, #108]	@ (8107630 <TIM_OC2_SetConfig+0x108>)
 81075c4:	4293      	cmp	r3, r2
 81075c6:	d007      	beq.n	81075d8 <TIM_OC2_SetConfig+0xb0>
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	4a1a      	ldr	r2, [pc, #104]	@ (8107634 <TIM_OC2_SetConfig+0x10c>)
 81075cc:	4293      	cmp	r3, r2
 81075ce:	d003      	beq.n	81075d8 <TIM_OC2_SetConfig+0xb0>
 81075d0:	687b      	ldr	r3, [r7, #4]
 81075d2:	4a19      	ldr	r2, [pc, #100]	@ (8107638 <TIM_OC2_SetConfig+0x110>)
 81075d4:	4293      	cmp	r3, r2
 81075d6:	d113      	bne.n	8107600 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81075d8:	693b      	ldr	r3, [r7, #16]
 81075da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 81075de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81075e0:	693b      	ldr	r3, [r7, #16]
 81075e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 81075e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81075e8:	683b      	ldr	r3, [r7, #0]
 81075ea:	695b      	ldr	r3, [r3, #20]
 81075ec:	009b      	lsls	r3, r3, #2
 81075ee:	693a      	ldr	r2, [r7, #16]
 81075f0:	4313      	orrs	r3, r2
 81075f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81075f4:	683b      	ldr	r3, [r7, #0]
 81075f6:	699b      	ldr	r3, [r3, #24]
 81075f8:	009b      	lsls	r3, r3, #2
 81075fa:	693a      	ldr	r2, [r7, #16]
 81075fc:	4313      	orrs	r3, r2
 81075fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	693a      	ldr	r2, [r7, #16]
 8107604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	68fa      	ldr	r2, [r7, #12]
 810760a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810760c:	683b      	ldr	r3, [r7, #0]
 810760e:	685a      	ldr	r2, [r3, #4]
 8107610:	687b      	ldr	r3, [r7, #4]
 8107612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	697a      	ldr	r2, [r7, #20]
 8107618:	621a      	str	r2, [r3, #32]
}
 810761a:	bf00      	nop
 810761c:	371c      	adds	r7, #28
 810761e:	46bd      	mov	sp, r7
 8107620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107624:	4770      	bx	lr
 8107626:	bf00      	nop
 8107628:	40010000 	.word	0x40010000
 810762c:	40010400 	.word	0x40010400
 8107630:	40014000 	.word	0x40014000
 8107634:	40014400 	.word	0x40014400
 8107638:	40014800 	.word	0x40014800

0810763c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810763c:	b480      	push	{r7}
 810763e:	b087      	sub	sp, #28
 8107640:	af00      	add	r7, sp, #0
 8107642:	6078      	str	r0, [r7, #4]
 8107644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	6a1b      	ldr	r3, [r3, #32]
 810764a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	6a1b      	ldr	r3, [r3, #32]
 8107650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8107654:	687b      	ldr	r3, [r7, #4]
 8107656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	685b      	ldr	r3, [r3, #4]
 810765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	69db      	ldr	r3, [r3, #28]
 8107662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107664:	68fb      	ldr	r3, [r7, #12]
 8107666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810766e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107670:	68fb      	ldr	r3, [r7, #12]
 8107672:	f023 0303 	bic.w	r3, r3, #3
 8107676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107678:	683b      	ldr	r3, [r7, #0]
 810767a:	681b      	ldr	r3, [r3, #0]
 810767c:	68fa      	ldr	r2, [r7, #12]
 810767e:	4313      	orrs	r3, r2
 8107680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107682:	697b      	ldr	r3, [r7, #20]
 8107684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810768a:	683b      	ldr	r3, [r7, #0]
 810768c:	689b      	ldr	r3, [r3, #8]
 810768e:	021b      	lsls	r3, r3, #8
 8107690:	697a      	ldr	r2, [r7, #20]
 8107692:	4313      	orrs	r3, r2
 8107694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107696:	687b      	ldr	r3, [r7, #4]
 8107698:	4a27      	ldr	r2, [pc, #156]	@ (8107738 <TIM_OC3_SetConfig+0xfc>)
 810769a:	4293      	cmp	r3, r2
 810769c:	d003      	beq.n	81076a6 <TIM_OC3_SetConfig+0x6a>
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	4a26      	ldr	r2, [pc, #152]	@ (810773c <TIM_OC3_SetConfig+0x100>)
 81076a2:	4293      	cmp	r3, r2
 81076a4:	d10d      	bne.n	81076c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81076a6:	697b      	ldr	r3, [r7, #20]
 81076a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 81076ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81076ae:	683b      	ldr	r3, [r7, #0]
 81076b0:	68db      	ldr	r3, [r3, #12]
 81076b2:	021b      	lsls	r3, r3, #8
 81076b4:	697a      	ldr	r2, [r7, #20]
 81076b6:	4313      	orrs	r3, r2
 81076b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81076ba:	697b      	ldr	r3, [r7, #20]
 81076bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 81076c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	4a1c      	ldr	r2, [pc, #112]	@ (8107738 <TIM_OC3_SetConfig+0xfc>)
 81076c6:	4293      	cmp	r3, r2
 81076c8:	d00f      	beq.n	81076ea <TIM_OC3_SetConfig+0xae>
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	4a1b      	ldr	r2, [pc, #108]	@ (810773c <TIM_OC3_SetConfig+0x100>)
 81076ce:	4293      	cmp	r3, r2
 81076d0:	d00b      	beq.n	81076ea <TIM_OC3_SetConfig+0xae>
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	4a1a      	ldr	r2, [pc, #104]	@ (8107740 <TIM_OC3_SetConfig+0x104>)
 81076d6:	4293      	cmp	r3, r2
 81076d8:	d007      	beq.n	81076ea <TIM_OC3_SetConfig+0xae>
 81076da:	687b      	ldr	r3, [r7, #4]
 81076dc:	4a19      	ldr	r2, [pc, #100]	@ (8107744 <TIM_OC3_SetConfig+0x108>)
 81076de:	4293      	cmp	r3, r2
 81076e0:	d003      	beq.n	81076ea <TIM_OC3_SetConfig+0xae>
 81076e2:	687b      	ldr	r3, [r7, #4]
 81076e4:	4a18      	ldr	r2, [pc, #96]	@ (8107748 <TIM_OC3_SetConfig+0x10c>)
 81076e6:	4293      	cmp	r3, r2
 81076e8:	d113      	bne.n	8107712 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81076ea:	693b      	ldr	r3, [r7, #16]
 81076ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81076f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81076f2:	693b      	ldr	r3, [r7, #16]
 81076f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81076f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81076fa:	683b      	ldr	r3, [r7, #0]
 81076fc:	695b      	ldr	r3, [r3, #20]
 81076fe:	011b      	lsls	r3, r3, #4
 8107700:	693a      	ldr	r2, [r7, #16]
 8107702:	4313      	orrs	r3, r2
 8107704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107706:	683b      	ldr	r3, [r7, #0]
 8107708:	699b      	ldr	r3, [r3, #24]
 810770a:	011b      	lsls	r3, r3, #4
 810770c:	693a      	ldr	r2, [r7, #16]
 810770e:	4313      	orrs	r3, r2
 8107710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	693a      	ldr	r2, [r7, #16]
 8107716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	68fa      	ldr	r2, [r7, #12]
 810771c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810771e:	683b      	ldr	r3, [r7, #0]
 8107720:	685a      	ldr	r2, [r3, #4]
 8107722:	687b      	ldr	r3, [r7, #4]
 8107724:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107726:	687b      	ldr	r3, [r7, #4]
 8107728:	697a      	ldr	r2, [r7, #20]
 810772a:	621a      	str	r2, [r3, #32]
}
 810772c:	bf00      	nop
 810772e:	371c      	adds	r7, #28
 8107730:	46bd      	mov	sp, r7
 8107732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107736:	4770      	bx	lr
 8107738:	40010000 	.word	0x40010000
 810773c:	40010400 	.word	0x40010400
 8107740:	40014000 	.word	0x40014000
 8107744:	40014400 	.word	0x40014400
 8107748:	40014800 	.word	0x40014800

0810774c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810774c:	b480      	push	{r7}
 810774e:	b087      	sub	sp, #28
 8107750:	af00      	add	r7, sp, #0
 8107752:	6078      	str	r0, [r7, #4]
 8107754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107756:	687b      	ldr	r3, [r7, #4]
 8107758:	6a1b      	ldr	r3, [r3, #32]
 810775a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	6a1b      	ldr	r3, [r3, #32]
 8107760:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107764:	687b      	ldr	r3, [r7, #4]
 8107766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	685b      	ldr	r3, [r3, #4]
 810776c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	69db      	ldr	r3, [r3, #28]
 8107772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107774:	68fb      	ldr	r3, [r7, #12]
 8107776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810777a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107780:	68fb      	ldr	r3, [r7, #12]
 8107782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107788:	683b      	ldr	r3, [r7, #0]
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	021b      	lsls	r3, r3, #8
 810778e:	68fa      	ldr	r2, [r7, #12]
 8107790:	4313      	orrs	r3, r2
 8107792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107794:	693b      	ldr	r3, [r7, #16]
 8107796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810779a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810779c:	683b      	ldr	r3, [r7, #0]
 810779e:	689b      	ldr	r3, [r3, #8]
 81077a0:	031b      	lsls	r3, r3, #12
 81077a2:	693a      	ldr	r2, [r7, #16]
 81077a4:	4313      	orrs	r3, r2
 81077a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	4a18      	ldr	r2, [pc, #96]	@ (810780c <TIM_OC4_SetConfig+0xc0>)
 81077ac:	4293      	cmp	r3, r2
 81077ae:	d00f      	beq.n	81077d0 <TIM_OC4_SetConfig+0x84>
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	4a17      	ldr	r2, [pc, #92]	@ (8107810 <TIM_OC4_SetConfig+0xc4>)
 81077b4:	4293      	cmp	r3, r2
 81077b6:	d00b      	beq.n	81077d0 <TIM_OC4_SetConfig+0x84>
 81077b8:	687b      	ldr	r3, [r7, #4]
 81077ba:	4a16      	ldr	r2, [pc, #88]	@ (8107814 <TIM_OC4_SetConfig+0xc8>)
 81077bc:	4293      	cmp	r3, r2
 81077be:	d007      	beq.n	81077d0 <TIM_OC4_SetConfig+0x84>
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	4a15      	ldr	r2, [pc, #84]	@ (8107818 <TIM_OC4_SetConfig+0xcc>)
 81077c4:	4293      	cmp	r3, r2
 81077c6:	d003      	beq.n	81077d0 <TIM_OC4_SetConfig+0x84>
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	4a14      	ldr	r2, [pc, #80]	@ (810781c <TIM_OC4_SetConfig+0xd0>)
 81077cc:	4293      	cmp	r3, r2
 81077ce:	d109      	bne.n	81077e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81077d0:	697b      	ldr	r3, [r7, #20]
 81077d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81077d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81077d8:	683b      	ldr	r3, [r7, #0]
 81077da:	695b      	ldr	r3, [r3, #20]
 81077dc:	019b      	lsls	r3, r3, #6
 81077de:	697a      	ldr	r2, [r7, #20]
 81077e0:	4313      	orrs	r3, r2
 81077e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	697a      	ldr	r2, [r7, #20]
 81077e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	68fa      	ldr	r2, [r7, #12]
 81077ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81077f0:	683b      	ldr	r3, [r7, #0]
 81077f2:	685a      	ldr	r2, [r3, #4]
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	693a      	ldr	r2, [r7, #16]
 81077fc:	621a      	str	r2, [r3, #32]
}
 81077fe:	bf00      	nop
 8107800:	371c      	adds	r7, #28
 8107802:	46bd      	mov	sp, r7
 8107804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107808:	4770      	bx	lr
 810780a:	bf00      	nop
 810780c:	40010000 	.word	0x40010000
 8107810:	40010400 	.word	0x40010400
 8107814:	40014000 	.word	0x40014000
 8107818:	40014400 	.word	0x40014400
 810781c:	40014800 	.word	0x40014800

08107820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107820:	b480      	push	{r7}
 8107822:	b087      	sub	sp, #28
 8107824:	af00      	add	r7, sp, #0
 8107826:	6078      	str	r0, [r7, #4]
 8107828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	6a1b      	ldr	r3, [r3, #32]
 810782e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	6a1b      	ldr	r3, [r3, #32]
 8107834:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	685b      	ldr	r3, [r3, #4]
 8107840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107842:	687b      	ldr	r3, [r7, #4]
 8107844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107848:	68fb      	ldr	r3, [r7, #12]
 810784a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810784e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107854:	683b      	ldr	r3, [r7, #0]
 8107856:	681b      	ldr	r3, [r3, #0]
 8107858:	68fa      	ldr	r2, [r7, #12]
 810785a:	4313      	orrs	r3, r2
 810785c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810785e:	693b      	ldr	r3, [r7, #16]
 8107860:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107866:	683b      	ldr	r3, [r7, #0]
 8107868:	689b      	ldr	r3, [r3, #8]
 810786a:	041b      	lsls	r3, r3, #16
 810786c:	693a      	ldr	r2, [r7, #16]
 810786e:	4313      	orrs	r3, r2
 8107870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	4a17      	ldr	r2, [pc, #92]	@ (81078d4 <TIM_OC5_SetConfig+0xb4>)
 8107876:	4293      	cmp	r3, r2
 8107878:	d00f      	beq.n	810789a <TIM_OC5_SetConfig+0x7a>
 810787a:	687b      	ldr	r3, [r7, #4]
 810787c:	4a16      	ldr	r2, [pc, #88]	@ (81078d8 <TIM_OC5_SetConfig+0xb8>)
 810787e:	4293      	cmp	r3, r2
 8107880:	d00b      	beq.n	810789a <TIM_OC5_SetConfig+0x7a>
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	4a15      	ldr	r2, [pc, #84]	@ (81078dc <TIM_OC5_SetConfig+0xbc>)
 8107886:	4293      	cmp	r3, r2
 8107888:	d007      	beq.n	810789a <TIM_OC5_SetConfig+0x7a>
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	4a14      	ldr	r2, [pc, #80]	@ (81078e0 <TIM_OC5_SetConfig+0xc0>)
 810788e:	4293      	cmp	r3, r2
 8107890:	d003      	beq.n	810789a <TIM_OC5_SetConfig+0x7a>
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	4a13      	ldr	r2, [pc, #76]	@ (81078e4 <TIM_OC5_SetConfig+0xc4>)
 8107896:	4293      	cmp	r3, r2
 8107898:	d109      	bne.n	81078ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810789a:	697b      	ldr	r3, [r7, #20]
 810789c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81078a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81078a2:	683b      	ldr	r3, [r7, #0]
 81078a4:	695b      	ldr	r3, [r3, #20]
 81078a6:	021b      	lsls	r3, r3, #8
 81078a8:	697a      	ldr	r2, [r7, #20]
 81078aa:	4313      	orrs	r3, r2
 81078ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81078ae:	687b      	ldr	r3, [r7, #4]
 81078b0:	697a      	ldr	r2, [r7, #20]
 81078b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	68fa      	ldr	r2, [r7, #12]
 81078b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81078ba:	683b      	ldr	r3, [r7, #0]
 81078bc:	685a      	ldr	r2, [r3, #4]
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	693a      	ldr	r2, [r7, #16]
 81078c6:	621a      	str	r2, [r3, #32]
}
 81078c8:	bf00      	nop
 81078ca:	371c      	adds	r7, #28
 81078cc:	46bd      	mov	sp, r7
 81078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078d2:	4770      	bx	lr
 81078d4:	40010000 	.word	0x40010000
 81078d8:	40010400 	.word	0x40010400
 81078dc:	40014000 	.word	0x40014000
 81078e0:	40014400 	.word	0x40014400
 81078e4:	40014800 	.word	0x40014800

081078e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81078e8:	b480      	push	{r7}
 81078ea:	b087      	sub	sp, #28
 81078ec:	af00      	add	r7, sp, #0
 81078ee:	6078      	str	r0, [r7, #4]
 81078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	6a1b      	ldr	r3, [r3, #32]
 81078f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	6a1b      	ldr	r3, [r3, #32]
 81078fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107904:	687b      	ldr	r3, [r7, #4]
 8107906:	685b      	ldr	r3, [r3, #4]
 8107908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810790a:	687b      	ldr	r3, [r7, #4]
 810790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107910:	68fb      	ldr	r3, [r7, #12]
 8107912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810791a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810791c:	683b      	ldr	r3, [r7, #0]
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	021b      	lsls	r3, r3, #8
 8107922:	68fa      	ldr	r2, [r7, #12]
 8107924:	4313      	orrs	r3, r2
 8107926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107928:	693b      	ldr	r3, [r7, #16]
 810792a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810792e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107930:	683b      	ldr	r3, [r7, #0]
 8107932:	689b      	ldr	r3, [r3, #8]
 8107934:	051b      	lsls	r3, r3, #20
 8107936:	693a      	ldr	r2, [r7, #16]
 8107938:	4313      	orrs	r3, r2
 810793a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810793c:	687b      	ldr	r3, [r7, #4]
 810793e:	4a18      	ldr	r2, [pc, #96]	@ (81079a0 <TIM_OC6_SetConfig+0xb8>)
 8107940:	4293      	cmp	r3, r2
 8107942:	d00f      	beq.n	8107964 <TIM_OC6_SetConfig+0x7c>
 8107944:	687b      	ldr	r3, [r7, #4]
 8107946:	4a17      	ldr	r2, [pc, #92]	@ (81079a4 <TIM_OC6_SetConfig+0xbc>)
 8107948:	4293      	cmp	r3, r2
 810794a:	d00b      	beq.n	8107964 <TIM_OC6_SetConfig+0x7c>
 810794c:	687b      	ldr	r3, [r7, #4]
 810794e:	4a16      	ldr	r2, [pc, #88]	@ (81079a8 <TIM_OC6_SetConfig+0xc0>)
 8107950:	4293      	cmp	r3, r2
 8107952:	d007      	beq.n	8107964 <TIM_OC6_SetConfig+0x7c>
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	4a15      	ldr	r2, [pc, #84]	@ (81079ac <TIM_OC6_SetConfig+0xc4>)
 8107958:	4293      	cmp	r3, r2
 810795a:	d003      	beq.n	8107964 <TIM_OC6_SetConfig+0x7c>
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	4a14      	ldr	r2, [pc, #80]	@ (81079b0 <TIM_OC6_SetConfig+0xc8>)
 8107960:	4293      	cmp	r3, r2
 8107962:	d109      	bne.n	8107978 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107964:	697b      	ldr	r3, [r7, #20]
 8107966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810796a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810796c:	683b      	ldr	r3, [r7, #0]
 810796e:	695b      	ldr	r3, [r3, #20]
 8107970:	029b      	lsls	r3, r3, #10
 8107972:	697a      	ldr	r2, [r7, #20]
 8107974:	4313      	orrs	r3, r2
 8107976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	697a      	ldr	r2, [r7, #20]
 810797c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	68fa      	ldr	r2, [r7, #12]
 8107982:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107984:	683b      	ldr	r3, [r7, #0]
 8107986:	685a      	ldr	r2, [r3, #4]
 8107988:	687b      	ldr	r3, [r7, #4]
 810798a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	693a      	ldr	r2, [r7, #16]
 8107990:	621a      	str	r2, [r3, #32]
}
 8107992:	bf00      	nop
 8107994:	371c      	adds	r7, #28
 8107996:	46bd      	mov	sp, r7
 8107998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810799c:	4770      	bx	lr
 810799e:	bf00      	nop
 81079a0:	40010000 	.word	0x40010000
 81079a4:	40010400 	.word	0x40010400
 81079a8:	40014000 	.word	0x40014000
 81079ac:	40014400 	.word	0x40014400
 81079b0:	40014800 	.word	0x40014800

081079b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 81079b4:	b480      	push	{r7}
 81079b6:	b085      	sub	sp, #20
 81079b8:	af00      	add	r7, sp, #0
 81079ba:	6078      	str	r0, [r7, #4]
 81079bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81079be:	687b      	ldr	r3, [r7, #4]
 81079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81079c4:	2b01      	cmp	r3, #1
 81079c6:	d101      	bne.n	81079cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81079c8:	2302      	movs	r3, #2
 81079ca:	e06d      	b.n	8107aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	2201      	movs	r2, #1
 81079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81079d4:	687b      	ldr	r3, [r7, #4]
 81079d6:	2202      	movs	r2, #2
 81079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	681b      	ldr	r3, [r3, #0]
 81079e0:	685b      	ldr	r3, [r3, #4]
 81079e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	681b      	ldr	r3, [r3, #0]
 81079e8:	689b      	ldr	r3, [r3, #8]
 81079ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	4a30      	ldr	r2, [pc, #192]	@ (8107ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81079f2:	4293      	cmp	r3, r2
 81079f4:	d004      	beq.n	8107a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	4a2f      	ldr	r2, [pc, #188]	@ (8107ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81079fc:	4293      	cmp	r3, r2
 81079fe:	d108      	bne.n	8107a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107a00:	68fb      	ldr	r3, [r7, #12]
 8107a02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8107a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107a08:	683b      	ldr	r3, [r7, #0]
 8107a0a:	685b      	ldr	r3, [r3, #4]
 8107a0c:	68fa      	ldr	r2, [r7, #12]
 8107a0e:	4313      	orrs	r3, r2
 8107a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107a12:	68fb      	ldr	r3, [r7, #12]
 8107a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107a1a:	683b      	ldr	r3, [r7, #0]
 8107a1c:	681b      	ldr	r3, [r3, #0]
 8107a1e:	68fa      	ldr	r2, [r7, #12]
 8107a20:	4313      	orrs	r3, r2
 8107a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107a24:	687b      	ldr	r3, [r7, #4]
 8107a26:	681b      	ldr	r3, [r3, #0]
 8107a28:	68fa      	ldr	r2, [r7, #12]
 8107a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	4a20      	ldr	r2, [pc, #128]	@ (8107ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107a32:	4293      	cmp	r3, r2
 8107a34:	d022      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	681b      	ldr	r3, [r3, #0]
 8107a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107a3e:	d01d      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	681b      	ldr	r3, [r3, #0]
 8107a44:	4a1d      	ldr	r2, [pc, #116]	@ (8107abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107a46:	4293      	cmp	r3, r2
 8107a48:	d018      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	681b      	ldr	r3, [r3, #0]
 8107a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8107ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107a50:	4293      	cmp	r3, r2
 8107a52:	d013      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	681b      	ldr	r3, [r3, #0]
 8107a58:	4a1a      	ldr	r2, [pc, #104]	@ (8107ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107a5a:	4293      	cmp	r3, r2
 8107a5c:	d00e      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	4a15      	ldr	r2, [pc, #84]	@ (8107ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107a64:	4293      	cmp	r3, r2
 8107a66:	d009      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	681b      	ldr	r3, [r3, #0]
 8107a6c:	4a16      	ldr	r2, [pc, #88]	@ (8107ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107a6e:	4293      	cmp	r3, r2
 8107a70:	d004      	beq.n	8107a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107a72:	687b      	ldr	r3, [r7, #4]
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	4a15      	ldr	r2, [pc, #84]	@ (8107acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107a78:	4293      	cmp	r3, r2
 8107a7a:	d10c      	bne.n	8107a96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107a7c:	68bb      	ldr	r3, [r7, #8]
 8107a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107a84:	683b      	ldr	r3, [r7, #0]
 8107a86:	689b      	ldr	r3, [r3, #8]
 8107a88:	68ba      	ldr	r2, [r7, #8]
 8107a8a:	4313      	orrs	r3, r2
 8107a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107a8e:	687b      	ldr	r3, [r7, #4]
 8107a90:	681b      	ldr	r3, [r3, #0]
 8107a92:	68ba      	ldr	r2, [r7, #8]
 8107a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	2201      	movs	r2, #1
 8107a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	2200      	movs	r2, #0
 8107aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8107aa6:	2300      	movs	r3, #0
}
 8107aa8:	4618      	mov	r0, r3
 8107aaa:	3714      	adds	r7, #20
 8107aac:	46bd      	mov	sp, r7
 8107aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ab2:	4770      	bx	lr
 8107ab4:	40010000 	.word	0x40010000
 8107ab8:	40010400 	.word	0x40010400
 8107abc:	40000400 	.word	0x40000400
 8107ac0:	40000800 	.word	0x40000800
 8107ac4:	40000c00 	.word	0x40000c00
 8107ac8:	40001800 	.word	0x40001800
 8107acc:	40014000 	.word	0x40014000

08107ad0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107ad0:	b480      	push	{r7}
 8107ad2:	b085      	sub	sp, #20
 8107ad4:	af00      	add	r7, sp, #0
 8107ad6:	6078      	str	r0, [r7, #4]
 8107ad8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107ada:	2300      	movs	r3, #0
 8107adc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8107ade:	687b      	ldr	r3, [r7, #4]
 8107ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107ae4:	2b01      	cmp	r3, #1
 8107ae6:	d101      	bne.n	8107aec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107ae8:	2302      	movs	r3, #2
 8107aea:	e065      	b.n	8107bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	2201      	movs	r2, #1
 8107af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107af4:	68fb      	ldr	r3, [r7, #12]
 8107af6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8107afa:	683b      	ldr	r3, [r7, #0]
 8107afc:	68db      	ldr	r3, [r3, #12]
 8107afe:	4313      	orrs	r3, r2
 8107b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107b02:	68fb      	ldr	r3, [r7, #12]
 8107b04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8107b08:	683b      	ldr	r3, [r7, #0]
 8107b0a:	689b      	ldr	r3, [r3, #8]
 8107b0c:	4313      	orrs	r3, r2
 8107b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107b10:	68fb      	ldr	r3, [r7, #12]
 8107b12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8107b16:	683b      	ldr	r3, [r7, #0]
 8107b18:	685b      	ldr	r3, [r3, #4]
 8107b1a:	4313      	orrs	r3, r2
 8107b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107b1e:	68fb      	ldr	r3, [r7, #12]
 8107b20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8107b24:	683b      	ldr	r3, [r7, #0]
 8107b26:	681b      	ldr	r3, [r3, #0]
 8107b28:	4313      	orrs	r3, r2
 8107b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107b2c:	68fb      	ldr	r3, [r7, #12]
 8107b2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107b32:	683b      	ldr	r3, [r7, #0]
 8107b34:	691b      	ldr	r3, [r3, #16]
 8107b36:	4313      	orrs	r3, r2
 8107b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107b3a:	68fb      	ldr	r3, [r7, #12]
 8107b3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8107b40:	683b      	ldr	r3, [r7, #0]
 8107b42:	695b      	ldr	r3, [r3, #20]
 8107b44:	4313      	orrs	r3, r2
 8107b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107b48:	68fb      	ldr	r3, [r7, #12]
 8107b4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8107b4e:	683b      	ldr	r3, [r7, #0]
 8107b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b52:	4313      	orrs	r3, r2
 8107b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107b56:	68fb      	ldr	r3, [r7, #12]
 8107b58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8107b5c:	683b      	ldr	r3, [r7, #0]
 8107b5e:	699b      	ldr	r3, [r3, #24]
 8107b60:	041b      	lsls	r3, r3, #16
 8107b62:	4313      	orrs	r3, r2
 8107b64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	681b      	ldr	r3, [r3, #0]
 8107b6a:	4a16      	ldr	r2, [pc, #88]	@ (8107bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107b6c:	4293      	cmp	r3, r2
 8107b6e:	d004      	beq.n	8107b7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	4a14      	ldr	r2, [pc, #80]	@ (8107bc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d115      	bne.n	8107ba6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107b7a:	68fb      	ldr	r3, [r7, #12]
 8107b7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8107b80:	683b      	ldr	r3, [r7, #0]
 8107b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107b84:	051b      	lsls	r3, r3, #20
 8107b86:	4313      	orrs	r3, r2
 8107b88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107b8a:	68fb      	ldr	r3, [r7, #12]
 8107b8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8107b90:	683b      	ldr	r3, [r7, #0]
 8107b92:	69db      	ldr	r3, [r3, #28]
 8107b94:	4313      	orrs	r3, r2
 8107b96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107b98:	68fb      	ldr	r3, [r7, #12]
 8107b9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8107b9e:	683b      	ldr	r3, [r7, #0]
 8107ba0:	6a1b      	ldr	r3, [r3, #32]
 8107ba2:	4313      	orrs	r3, r2
 8107ba4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	68fa      	ldr	r2, [r7, #12]
 8107bac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8107bae:	687b      	ldr	r3, [r7, #4]
 8107bb0:	2200      	movs	r2, #0
 8107bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8107bb6:	2300      	movs	r3, #0
}
 8107bb8:	4618      	mov	r0, r3
 8107bba:	3714      	adds	r7, #20
 8107bbc:	46bd      	mov	sp, r7
 8107bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bc2:	4770      	bx	lr
 8107bc4:	40010000 	.word	0x40010000
 8107bc8:	40010400 	.word	0x40010400

08107bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107bcc:	b480      	push	{r7}
 8107bce:	b083      	sub	sp, #12
 8107bd0:	af00      	add	r7, sp, #0
 8107bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107bd4:	bf00      	nop
 8107bd6:	370c      	adds	r7, #12
 8107bd8:	46bd      	mov	sp, r7
 8107bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bde:	4770      	bx	lr

08107be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107be0:	b480      	push	{r7}
 8107be2:	b083      	sub	sp, #12
 8107be4:	af00      	add	r7, sp, #0
 8107be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107be8:	bf00      	nop
 8107bea:	370c      	adds	r7, #12
 8107bec:	46bd      	mov	sp, r7
 8107bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bf2:	4770      	bx	lr

08107bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107bf4:	b480      	push	{r7}
 8107bf6:	b083      	sub	sp, #12
 8107bf8:	af00      	add	r7, sp, #0
 8107bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107bfc:	bf00      	nop
 8107bfe:	370c      	adds	r7, #12
 8107c00:	46bd      	mov	sp, r7
 8107c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c06:	4770      	bx	lr

08107c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107c08:	b580      	push	{r7, lr}
 8107c0a:	b08a      	sub	sp, #40	@ 0x28
 8107c0c:	af02      	add	r7, sp, #8
 8107c0e:	60f8      	str	r0, [r7, #12]
 8107c10:	60b9      	str	r1, [r7, #8]
 8107c12:	603b      	str	r3, [r7, #0]
 8107c14:	4613      	mov	r3, r2
 8107c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107c18:	68fb      	ldr	r3, [r7, #12]
 8107c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107c1e:	2b20      	cmp	r3, #32
 8107c20:	d17b      	bne.n	8107d1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8107c22:	68bb      	ldr	r3, [r7, #8]
 8107c24:	2b00      	cmp	r3, #0
 8107c26:	d002      	beq.n	8107c2e <HAL_UART_Transmit+0x26>
 8107c28:	88fb      	ldrh	r3, [r7, #6]
 8107c2a:	2b00      	cmp	r3, #0
 8107c2c:	d101      	bne.n	8107c32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8107c2e:	2301      	movs	r3, #1
 8107c30:	e074      	b.n	8107d1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107c32:	68fb      	ldr	r3, [r7, #12]
 8107c34:	2200      	movs	r2, #0
 8107c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107c3a:	68fb      	ldr	r3, [r7, #12]
 8107c3c:	2221      	movs	r2, #33	@ 0x21
 8107c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107c42:	f7fa fbc7 	bl	81023d4 <HAL_GetTick>
 8107c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107c48:	68fb      	ldr	r3, [r7, #12]
 8107c4a:	88fa      	ldrh	r2, [r7, #6]
 8107c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8107c50:	68fb      	ldr	r3, [r7, #12]
 8107c52:	88fa      	ldrh	r2, [r7, #6]
 8107c54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107c58:	68fb      	ldr	r3, [r7, #12]
 8107c5a:	689b      	ldr	r3, [r3, #8]
 8107c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107c60:	d108      	bne.n	8107c74 <HAL_UART_Transmit+0x6c>
 8107c62:	68fb      	ldr	r3, [r7, #12]
 8107c64:	691b      	ldr	r3, [r3, #16]
 8107c66:	2b00      	cmp	r3, #0
 8107c68:	d104      	bne.n	8107c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8107c6a:	2300      	movs	r3, #0
 8107c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107c6e:	68bb      	ldr	r3, [r7, #8]
 8107c70:	61bb      	str	r3, [r7, #24]
 8107c72:	e003      	b.n	8107c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8107c74:	68bb      	ldr	r3, [r7, #8]
 8107c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107c78:	2300      	movs	r3, #0
 8107c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8107c7c:	e030      	b.n	8107ce0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107c7e:	683b      	ldr	r3, [r7, #0]
 8107c80:	9300      	str	r3, [sp, #0]
 8107c82:	697b      	ldr	r3, [r7, #20]
 8107c84:	2200      	movs	r2, #0
 8107c86:	2180      	movs	r1, #128	@ 0x80
 8107c88:	68f8      	ldr	r0, [r7, #12]
 8107c8a:	f000 f84b 	bl	8107d24 <UART_WaitOnFlagUntilTimeout>
 8107c8e:	4603      	mov	r3, r0
 8107c90:	2b00      	cmp	r3, #0
 8107c92:	d005      	beq.n	8107ca0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8107c94:	68fb      	ldr	r3, [r7, #12]
 8107c96:	2220      	movs	r2, #32
 8107c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8107c9c:	2303      	movs	r3, #3
 8107c9e:	e03d      	b.n	8107d1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8107ca0:	69fb      	ldr	r3, [r7, #28]
 8107ca2:	2b00      	cmp	r3, #0
 8107ca4:	d10b      	bne.n	8107cbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107ca6:	69bb      	ldr	r3, [r7, #24]
 8107ca8:	881b      	ldrh	r3, [r3, #0]
 8107caa:	461a      	mov	r2, r3
 8107cac:	68fb      	ldr	r3, [r7, #12]
 8107cae:	681b      	ldr	r3, [r3, #0]
 8107cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107cb4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8107cb6:	69bb      	ldr	r3, [r7, #24]
 8107cb8:	3302      	adds	r3, #2
 8107cba:	61bb      	str	r3, [r7, #24]
 8107cbc:	e007      	b.n	8107cce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107cbe:	69fb      	ldr	r3, [r7, #28]
 8107cc0:	781a      	ldrb	r2, [r3, #0]
 8107cc2:	68fb      	ldr	r3, [r7, #12]
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8107cc8:	69fb      	ldr	r3, [r7, #28]
 8107cca:	3301      	adds	r3, #1
 8107ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107cce:	68fb      	ldr	r3, [r7, #12]
 8107cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8107cd4:	b29b      	uxth	r3, r3
 8107cd6:	3b01      	subs	r3, #1
 8107cd8:	b29a      	uxth	r2, r3
 8107cda:	68fb      	ldr	r3, [r7, #12]
 8107cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8107ce0:	68fb      	ldr	r3, [r7, #12]
 8107ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8107ce6:	b29b      	uxth	r3, r3
 8107ce8:	2b00      	cmp	r3, #0
 8107cea:	d1c8      	bne.n	8107c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107cec:	683b      	ldr	r3, [r7, #0]
 8107cee:	9300      	str	r3, [sp, #0]
 8107cf0:	697b      	ldr	r3, [r7, #20]
 8107cf2:	2200      	movs	r2, #0
 8107cf4:	2140      	movs	r1, #64	@ 0x40
 8107cf6:	68f8      	ldr	r0, [r7, #12]
 8107cf8:	f000 f814 	bl	8107d24 <UART_WaitOnFlagUntilTimeout>
 8107cfc:	4603      	mov	r3, r0
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d005      	beq.n	8107d0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8107d02:	68fb      	ldr	r3, [r7, #12]
 8107d04:	2220      	movs	r2, #32
 8107d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8107d0a:	2303      	movs	r3, #3
 8107d0c:	e006      	b.n	8107d1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107d0e:	68fb      	ldr	r3, [r7, #12]
 8107d10:	2220      	movs	r2, #32
 8107d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8107d16:	2300      	movs	r3, #0
 8107d18:	e000      	b.n	8107d1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8107d1a:	2302      	movs	r3, #2
  }
}
 8107d1c:	4618      	mov	r0, r3
 8107d1e:	3720      	adds	r7, #32
 8107d20:	46bd      	mov	sp, r7
 8107d22:	bd80      	pop	{r7, pc}

08107d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107d24:	b580      	push	{r7, lr}
 8107d26:	b084      	sub	sp, #16
 8107d28:	af00      	add	r7, sp, #0
 8107d2a:	60f8      	str	r0, [r7, #12]
 8107d2c:	60b9      	str	r1, [r7, #8]
 8107d2e:	603b      	str	r3, [r7, #0]
 8107d30:	4613      	mov	r3, r2
 8107d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107d34:	e04f      	b.n	8107dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107d36:	69bb      	ldr	r3, [r7, #24]
 8107d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107d3c:	d04b      	beq.n	8107dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107d3e:	f7fa fb49 	bl	81023d4 <HAL_GetTick>
 8107d42:	4602      	mov	r2, r0
 8107d44:	683b      	ldr	r3, [r7, #0]
 8107d46:	1ad3      	subs	r3, r2, r3
 8107d48:	69ba      	ldr	r2, [r7, #24]
 8107d4a:	429a      	cmp	r2, r3
 8107d4c:	d302      	bcc.n	8107d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8107d4e:	69bb      	ldr	r3, [r7, #24]
 8107d50:	2b00      	cmp	r3, #0
 8107d52:	d101      	bne.n	8107d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8107d54:	2303      	movs	r3, #3
 8107d56:	e04e      	b.n	8107df6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8107d58:	68fb      	ldr	r3, [r7, #12]
 8107d5a:	681b      	ldr	r3, [r3, #0]
 8107d5c:	681b      	ldr	r3, [r3, #0]
 8107d5e:	f003 0304 	and.w	r3, r3, #4
 8107d62:	2b00      	cmp	r3, #0
 8107d64:	d037      	beq.n	8107dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8107d66:	68bb      	ldr	r3, [r7, #8]
 8107d68:	2b80      	cmp	r3, #128	@ 0x80
 8107d6a:	d034      	beq.n	8107dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8107d6c:	68bb      	ldr	r3, [r7, #8]
 8107d6e:	2b40      	cmp	r3, #64	@ 0x40
 8107d70:	d031      	beq.n	8107dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8107d72:	68fb      	ldr	r3, [r7, #12]
 8107d74:	681b      	ldr	r3, [r3, #0]
 8107d76:	69db      	ldr	r3, [r3, #28]
 8107d78:	f003 0308 	and.w	r3, r3, #8
 8107d7c:	2b08      	cmp	r3, #8
 8107d7e:	d110      	bne.n	8107da2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107d80:	68fb      	ldr	r3, [r7, #12]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	2208      	movs	r2, #8
 8107d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8107d88:	68f8      	ldr	r0, [r7, #12]
 8107d8a:	f000 f838 	bl	8107dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8107d8e:	68fb      	ldr	r3, [r7, #12]
 8107d90:	2208      	movs	r2, #8
 8107d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107d96:	68fb      	ldr	r3, [r7, #12]
 8107d98:	2200      	movs	r2, #0
 8107d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8107d9e:	2301      	movs	r3, #1
 8107da0:	e029      	b.n	8107df6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107da2:	68fb      	ldr	r3, [r7, #12]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	69db      	ldr	r3, [r3, #28]
 8107da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8107dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107db0:	d111      	bne.n	8107dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107db2:	68fb      	ldr	r3, [r7, #12]
 8107db4:	681b      	ldr	r3, [r3, #0]
 8107db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8107dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8107dbc:	68f8      	ldr	r0, [r7, #12]
 8107dbe:	f000 f81e 	bl	8107dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107dc2:	68fb      	ldr	r3, [r7, #12]
 8107dc4:	2220      	movs	r2, #32
 8107dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107dca:	68fb      	ldr	r3, [r7, #12]
 8107dcc:	2200      	movs	r2, #0
 8107dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8107dd2:	2303      	movs	r3, #3
 8107dd4:	e00f      	b.n	8107df6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107dd6:	68fb      	ldr	r3, [r7, #12]
 8107dd8:	681b      	ldr	r3, [r3, #0]
 8107dda:	69da      	ldr	r2, [r3, #28]
 8107ddc:	68bb      	ldr	r3, [r7, #8]
 8107dde:	4013      	ands	r3, r2
 8107de0:	68ba      	ldr	r2, [r7, #8]
 8107de2:	429a      	cmp	r2, r3
 8107de4:	bf0c      	ite	eq
 8107de6:	2301      	moveq	r3, #1
 8107de8:	2300      	movne	r3, #0
 8107dea:	b2db      	uxtb	r3, r3
 8107dec:	461a      	mov	r2, r3
 8107dee:	79fb      	ldrb	r3, [r7, #7]
 8107df0:	429a      	cmp	r2, r3
 8107df2:	d0a0      	beq.n	8107d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107df4:	2300      	movs	r3, #0
}
 8107df6:	4618      	mov	r0, r3
 8107df8:	3710      	adds	r7, #16
 8107dfa:	46bd      	mov	sp, r7
 8107dfc:	bd80      	pop	{r7, pc}

08107dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8107dfe:	b480      	push	{r7}
 8107e00:	b095      	sub	sp, #84	@ 0x54
 8107e02:	af00      	add	r7, sp, #0
 8107e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e0e:	e853 3f00 	ldrex	r3, [r3]
 8107e12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8107e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107e16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8107e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	461a      	mov	r2, r3
 8107e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107e24:	643b      	str	r3, [r7, #64]	@ 0x40
 8107e26:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8107e2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8107e2c:	e841 2300 	strex	r3, r2, [r1]
 8107e30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8107e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e34:	2b00      	cmp	r3, #0
 8107e36:	d1e6      	bne.n	8107e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	681b      	ldr	r3, [r3, #0]
 8107e3c:	3308      	adds	r3, #8
 8107e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e40:	6a3b      	ldr	r3, [r7, #32]
 8107e42:	e853 3f00 	ldrex	r3, [r3]
 8107e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8107e48:	69fb      	ldr	r3, [r7, #28]
 8107e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107e4e:	f023 0301 	bic.w	r3, r3, #1
 8107e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	681b      	ldr	r3, [r3, #0]
 8107e58:	3308      	adds	r3, #8
 8107e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8107e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8107e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8107e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107e64:	e841 2300 	strex	r3, r2, [r1]
 8107e68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8107e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107e6c:	2b00      	cmp	r3, #0
 8107e6e:	d1e3      	bne.n	8107e38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107e74:	2b01      	cmp	r3, #1
 8107e76:	d118      	bne.n	8107eaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8107e78:	687b      	ldr	r3, [r7, #4]
 8107e7a:	681b      	ldr	r3, [r3, #0]
 8107e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e7e:	68fb      	ldr	r3, [r7, #12]
 8107e80:	e853 3f00 	ldrex	r3, [r3]
 8107e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8107e86:	68bb      	ldr	r3, [r7, #8]
 8107e88:	f023 0310 	bic.w	r3, r3, #16
 8107e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8107e8e:	687b      	ldr	r3, [r7, #4]
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	461a      	mov	r2, r3
 8107e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8107e96:	61bb      	str	r3, [r7, #24]
 8107e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e9a:	6979      	ldr	r1, [r7, #20]
 8107e9c:	69ba      	ldr	r2, [r7, #24]
 8107e9e:	e841 2300 	strex	r3, r2, [r1]
 8107ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8107ea4:	693b      	ldr	r3, [r7, #16]
 8107ea6:	2b00      	cmp	r3, #0
 8107ea8:	d1e6      	bne.n	8107e78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	2220      	movs	r2, #32
 8107eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107eb2:	687b      	ldr	r3, [r7, #4]
 8107eb4:	2200      	movs	r2, #0
 8107eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	2200      	movs	r2, #0
 8107ebc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8107ebe:	bf00      	nop
 8107ec0:	3754      	adds	r7, #84	@ 0x54
 8107ec2:	46bd      	mov	sp, r7
 8107ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ec8:	4770      	bx	lr

08107eca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8107eca:	b084      	sub	sp, #16
 8107ecc:	b580      	push	{r7, lr}
 8107ece:	b084      	sub	sp, #16
 8107ed0:	af00      	add	r7, sp, #0
 8107ed2:	6078      	str	r0, [r7, #4]
 8107ed4:	f107 001c 	add.w	r0, r7, #28
 8107ed8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8107edc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8107ee0:	2b01      	cmp	r3, #1
 8107ee2:	d123      	bne.n	8107f2c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ee8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	68db      	ldr	r3, [r3, #12]
 8107ef4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8107ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107efc:	687a      	ldr	r2, [r7, #4]
 8107efe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	68db      	ldr	r3, [r3, #12]
 8107f04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8107f0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8107f10:	2b01      	cmp	r3, #1
 8107f12:	d105      	bne.n	8107f20 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	68db      	ldr	r3, [r3, #12]
 8107f18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8107f20:	6878      	ldr	r0, [r7, #4]
 8107f22:	f000 faa7 	bl	8108474 <USB_CoreReset>
 8107f26:	4603      	mov	r3, r0
 8107f28:	73fb      	strb	r3, [r7, #15]
 8107f2a:	e01b      	b.n	8107f64 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8107f2c:	687b      	ldr	r3, [r7, #4]
 8107f2e:	68db      	ldr	r3, [r3, #12]
 8107f30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8107f38:	6878      	ldr	r0, [r7, #4]
 8107f3a:	f000 fa9b 	bl	8108474 <USB_CoreReset>
 8107f3e:	4603      	mov	r3, r0
 8107f40:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8107f42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8107f46:	2b00      	cmp	r3, #0
 8107f48:	d106      	bne.n	8107f58 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107f4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	639a      	str	r2, [r3, #56]	@ 0x38
 8107f56:	e005      	b.n	8107f64 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8107f58:	687b      	ldr	r3, [r7, #4]
 8107f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107f5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8107f64:	7fbb      	ldrb	r3, [r7, #30]
 8107f66:	2b01      	cmp	r3, #1
 8107f68:	d118      	bne.n	8107f9c <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107f6e:	b29a      	uxth	r2, r3
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8107f74:	687b      	ldr	r3, [r7, #4]
 8107f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107f78:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8107f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107f80:	687a      	ldr	r2, [r7, #4]
 8107f82:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	689b      	ldr	r3, [r3, #8]
 8107f88:	f043 0206 	orr.w	r2, r3, #6
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	689b      	ldr	r3, [r3, #8]
 8107f94:	f043 0220 	orr.w	r2, r3, #32
 8107f98:	687b      	ldr	r3, [r7, #4]
 8107f9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8107f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107f9e:	4618      	mov	r0, r3
 8107fa0:	3710      	adds	r7, #16
 8107fa2:	46bd      	mov	sp, r7
 8107fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107fa8:	b004      	add	sp, #16
 8107faa:	4770      	bx	lr

08107fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8107fac:	b480      	push	{r7}
 8107fae:	b083      	sub	sp, #12
 8107fb0:	af00      	add	r7, sp, #0
 8107fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8107fb4:	687b      	ldr	r3, [r7, #4]
 8107fb6:	689b      	ldr	r3, [r3, #8]
 8107fb8:	f023 0201 	bic.w	r2, r3, #1
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8107fc0:	2300      	movs	r3, #0
}
 8107fc2:	4618      	mov	r0, r3
 8107fc4:	370c      	adds	r7, #12
 8107fc6:	46bd      	mov	sp, r7
 8107fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fcc:	4770      	bx	lr

08107fce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8107fce:	b580      	push	{r7, lr}
 8107fd0:	b084      	sub	sp, #16
 8107fd2:	af00      	add	r7, sp, #0
 8107fd4:	6078      	str	r0, [r7, #4]
 8107fd6:	460b      	mov	r3, r1
 8107fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8107fda:	2300      	movs	r3, #0
 8107fdc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	68db      	ldr	r3, [r3, #12]
 8107fe2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8107fea:	78fb      	ldrb	r3, [r7, #3]
 8107fec:	2b01      	cmp	r3, #1
 8107fee:	d115      	bne.n	810801c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	68db      	ldr	r3, [r3, #12]
 8107ff4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8107ffc:	200a      	movs	r0, #10
 8107ffe:	f7fa f9f5 	bl	81023ec <HAL_Delay>
      ms += 10U;
 8108002:	68fb      	ldr	r3, [r7, #12]
 8108004:	330a      	adds	r3, #10
 8108006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8108008:	6878      	ldr	r0, [r7, #4]
 810800a:	f000 fa25 	bl	8108458 <USB_GetMode>
 810800e:	4603      	mov	r3, r0
 8108010:	2b01      	cmp	r3, #1
 8108012:	d01e      	beq.n	8108052 <USB_SetCurrentMode+0x84>
 8108014:	68fb      	ldr	r3, [r7, #12]
 8108016:	2bc7      	cmp	r3, #199	@ 0xc7
 8108018:	d9f0      	bls.n	8107ffc <USB_SetCurrentMode+0x2e>
 810801a:	e01a      	b.n	8108052 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810801c:	78fb      	ldrb	r3, [r7, #3]
 810801e:	2b00      	cmp	r3, #0
 8108020:	d115      	bne.n	810804e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	68db      	ldr	r3, [r3, #12]
 8108026:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810802e:	200a      	movs	r0, #10
 8108030:	f7fa f9dc 	bl	81023ec <HAL_Delay>
      ms += 10U;
 8108034:	68fb      	ldr	r3, [r7, #12]
 8108036:	330a      	adds	r3, #10
 8108038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810803a:	6878      	ldr	r0, [r7, #4]
 810803c:	f000 fa0c 	bl	8108458 <USB_GetMode>
 8108040:	4603      	mov	r3, r0
 8108042:	2b00      	cmp	r3, #0
 8108044:	d005      	beq.n	8108052 <USB_SetCurrentMode+0x84>
 8108046:	68fb      	ldr	r3, [r7, #12]
 8108048:	2bc7      	cmp	r3, #199	@ 0xc7
 810804a:	d9f0      	bls.n	810802e <USB_SetCurrentMode+0x60>
 810804c:	e001      	b.n	8108052 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810804e:	2301      	movs	r3, #1
 8108050:	e005      	b.n	810805e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8108052:	68fb      	ldr	r3, [r7, #12]
 8108054:	2bc8      	cmp	r3, #200	@ 0xc8
 8108056:	d101      	bne.n	810805c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8108058:	2301      	movs	r3, #1
 810805a:	e000      	b.n	810805e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810805c:	2300      	movs	r3, #0
}
 810805e:	4618      	mov	r0, r3
 8108060:	3710      	adds	r7, #16
 8108062:	46bd      	mov	sp, r7
 8108064:	bd80      	pop	{r7, pc}
	...

08108068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8108068:	b084      	sub	sp, #16
 810806a:	b580      	push	{r7, lr}
 810806c:	b086      	sub	sp, #24
 810806e:	af00      	add	r7, sp, #0
 8108070:	6078      	str	r0, [r7, #4]
 8108072:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8108076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810807a:	2300      	movs	r3, #0
 810807c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8108082:	2300      	movs	r3, #0
 8108084:	613b      	str	r3, [r7, #16]
 8108086:	e009      	b.n	810809c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8108088:	687a      	ldr	r2, [r7, #4]
 810808a:	693b      	ldr	r3, [r7, #16]
 810808c:	3340      	adds	r3, #64	@ 0x40
 810808e:	009b      	lsls	r3, r3, #2
 8108090:	4413      	add	r3, r2
 8108092:	2200      	movs	r2, #0
 8108094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8108096:	693b      	ldr	r3, [r7, #16]
 8108098:	3301      	adds	r3, #1
 810809a:	613b      	str	r3, [r7, #16]
 810809c:	693b      	ldr	r3, [r7, #16]
 810809e:	2b0e      	cmp	r3, #14
 81080a0:	d9f2      	bls.n	8108088 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 81080a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 81080a6:	2b00      	cmp	r3, #0
 81080a8:	d11c      	bne.n	81080e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81080aa:	68fb      	ldr	r3, [r7, #12]
 81080ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81080b0:	685b      	ldr	r3, [r3, #4]
 81080b2:	68fa      	ldr	r2, [r7, #12]
 81080b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81080b8:	f043 0302 	orr.w	r3, r3, #2
 81080bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81080c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	681b      	ldr	r3, [r3, #0]
 81080ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	681b      	ldr	r3, [r3, #0]
 81080da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	601a      	str	r2, [r3, #0]
 81080e2:	e005      	b.n	81080f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81080e4:	687b      	ldr	r3, [r7, #4]
 81080e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81080e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 81080f0:	68fb      	ldr	r3, [r7, #12]
 81080f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 81080f6:	461a      	mov	r2, r3
 81080f8:	2300      	movs	r3, #0
 81080fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 81080fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8108100:	2b01      	cmp	r3, #1
 8108102:	d10d      	bne.n	8108120 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8108104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108108:	2b00      	cmp	r3, #0
 810810a:	d104      	bne.n	8108116 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810810c:	2100      	movs	r1, #0
 810810e:	6878      	ldr	r0, [r7, #4]
 8108110:	f000 f968 	bl	81083e4 <USB_SetDevSpeed>
 8108114:	e008      	b.n	8108128 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8108116:	2101      	movs	r1, #1
 8108118:	6878      	ldr	r0, [r7, #4]
 810811a:	f000 f963 	bl	81083e4 <USB_SetDevSpeed>
 810811e:	e003      	b.n	8108128 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8108120:	2103      	movs	r1, #3
 8108122:	6878      	ldr	r0, [r7, #4]
 8108124:	f000 f95e 	bl	81083e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8108128:	2110      	movs	r1, #16
 810812a:	6878      	ldr	r0, [r7, #4]
 810812c:	f000 f8fa 	bl	8108324 <USB_FlushTxFifo>
 8108130:	4603      	mov	r3, r0
 8108132:	2b00      	cmp	r3, #0
 8108134:	d001      	beq.n	810813a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8108136:	2301      	movs	r3, #1
 8108138:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810813a:	6878      	ldr	r0, [r7, #4]
 810813c:	f000 f924 	bl	8108388 <USB_FlushRxFifo>
 8108140:	4603      	mov	r3, r0
 8108142:	2b00      	cmp	r3, #0
 8108144:	d001      	beq.n	810814a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8108146:	2301      	movs	r3, #1
 8108148:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810814a:	68fb      	ldr	r3, [r7, #12]
 810814c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8108150:	461a      	mov	r2, r3
 8108152:	2300      	movs	r3, #0
 8108154:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8108156:	68fb      	ldr	r3, [r7, #12]
 8108158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810815c:	461a      	mov	r2, r3
 810815e:	2300      	movs	r3, #0
 8108160:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8108162:	68fb      	ldr	r3, [r7, #12]
 8108164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8108168:	461a      	mov	r2, r3
 810816a:	2300      	movs	r3, #0
 810816c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810816e:	2300      	movs	r3, #0
 8108170:	613b      	str	r3, [r7, #16]
 8108172:	e043      	b.n	81081fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8108174:	693b      	ldr	r3, [r7, #16]
 8108176:	015a      	lsls	r2, r3, #5
 8108178:	68fb      	ldr	r3, [r7, #12]
 810817a:	4413      	add	r3, r2
 810817c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8108180:	681b      	ldr	r3, [r3, #0]
 8108182:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108186:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810818a:	d118      	bne.n	81081be <USB_DevInit+0x156>
    {
      if (i == 0U)
 810818c:	693b      	ldr	r3, [r7, #16]
 810818e:	2b00      	cmp	r3, #0
 8108190:	d10a      	bne.n	81081a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8108192:	693b      	ldr	r3, [r7, #16]
 8108194:	015a      	lsls	r2, r3, #5
 8108196:	68fb      	ldr	r3, [r7, #12]
 8108198:	4413      	add	r3, r2
 810819a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810819e:	461a      	mov	r2, r3
 81081a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81081a4:	6013      	str	r3, [r2, #0]
 81081a6:	e013      	b.n	81081d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 81081a8:	693b      	ldr	r3, [r7, #16]
 81081aa:	015a      	lsls	r2, r3, #5
 81081ac:	68fb      	ldr	r3, [r7, #12]
 81081ae:	4413      	add	r3, r2
 81081b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81081b4:	461a      	mov	r2, r3
 81081b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 81081ba:	6013      	str	r3, [r2, #0]
 81081bc:	e008      	b.n	81081d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81081be:	693b      	ldr	r3, [r7, #16]
 81081c0:	015a      	lsls	r2, r3, #5
 81081c2:	68fb      	ldr	r3, [r7, #12]
 81081c4:	4413      	add	r3, r2
 81081c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81081ca:	461a      	mov	r2, r3
 81081cc:	2300      	movs	r3, #0
 81081ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 81081d0:	693b      	ldr	r3, [r7, #16]
 81081d2:	015a      	lsls	r2, r3, #5
 81081d4:	68fb      	ldr	r3, [r7, #12]
 81081d6:	4413      	add	r3, r2
 81081d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81081dc:	461a      	mov	r2, r3
 81081de:	2300      	movs	r3, #0
 81081e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 81081e2:	693b      	ldr	r3, [r7, #16]
 81081e4:	015a      	lsls	r2, r3, #5
 81081e6:	68fb      	ldr	r3, [r7, #12]
 81081e8:	4413      	add	r3, r2
 81081ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81081ee:	461a      	mov	r2, r3
 81081f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 81081f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81081f6:	693b      	ldr	r3, [r7, #16]
 81081f8:	3301      	adds	r3, #1
 81081fa:	613b      	str	r3, [r7, #16]
 81081fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8108200:	461a      	mov	r2, r3
 8108202:	693b      	ldr	r3, [r7, #16]
 8108204:	4293      	cmp	r3, r2
 8108206:	d3b5      	bcc.n	8108174 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8108208:	2300      	movs	r3, #0
 810820a:	613b      	str	r3, [r7, #16]
 810820c:	e043      	b.n	8108296 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810820e:	693b      	ldr	r3, [r7, #16]
 8108210:	015a      	lsls	r2, r3, #5
 8108212:	68fb      	ldr	r3, [r7, #12]
 8108214:	4413      	add	r3, r2
 8108216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810821a:	681b      	ldr	r3, [r3, #0]
 810821c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108224:	d118      	bne.n	8108258 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8108226:	693b      	ldr	r3, [r7, #16]
 8108228:	2b00      	cmp	r3, #0
 810822a:	d10a      	bne.n	8108242 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810822c:	693b      	ldr	r3, [r7, #16]
 810822e:	015a      	lsls	r2, r3, #5
 8108230:	68fb      	ldr	r3, [r7, #12]
 8108232:	4413      	add	r3, r2
 8108234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8108238:	461a      	mov	r2, r3
 810823a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810823e:	6013      	str	r3, [r2, #0]
 8108240:	e013      	b.n	810826a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8108242:	693b      	ldr	r3, [r7, #16]
 8108244:	015a      	lsls	r2, r3, #5
 8108246:	68fb      	ldr	r3, [r7, #12]
 8108248:	4413      	add	r3, r2
 810824a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810824e:	461a      	mov	r2, r3
 8108250:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8108254:	6013      	str	r3, [r2, #0]
 8108256:	e008      	b.n	810826a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8108258:	693b      	ldr	r3, [r7, #16]
 810825a:	015a      	lsls	r2, r3, #5
 810825c:	68fb      	ldr	r3, [r7, #12]
 810825e:	4413      	add	r3, r2
 8108260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8108264:	461a      	mov	r2, r3
 8108266:	2300      	movs	r3, #0
 8108268:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810826a:	693b      	ldr	r3, [r7, #16]
 810826c:	015a      	lsls	r2, r3, #5
 810826e:	68fb      	ldr	r3, [r7, #12]
 8108270:	4413      	add	r3, r2
 8108272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8108276:	461a      	mov	r2, r3
 8108278:	2300      	movs	r3, #0
 810827a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810827c:	693b      	ldr	r3, [r7, #16]
 810827e:	015a      	lsls	r2, r3, #5
 8108280:	68fb      	ldr	r3, [r7, #12]
 8108282:	4413      	add	r3, r2
 8108284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8108288:	461a      	mov	r2, r3
 810828a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810828e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8108290:	693b      	ldr	r3, [r7, #16]
 8108292:	3301      	adds	r3, #1
 8108294:	613b      	str	r3, [r7, #16]
 8108296:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810829a:	461a      	mov	r2, r3
 810829c:	693b      	ldr	r3, [r7, #16]
 810829e:	4293      	cmp	r3, r2
 81082a0:	d3b5      	bcc.n	810820e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 81082a2:	68fb      	ldr	r3, [r7, #12]
 81082a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81082a8:	691b      	ldr	r3, [r3, #16]
 81082aa:	68fa      	ldr	r2, [r7, #12]
 81082ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81082b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81082b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	2200      	movs	r2, #0
 81082ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81082bc:	687b      	ldr	r3, [r7, #4]
 81082be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 81082c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 81082c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 81082c8:	2b00      	cmp	r3, #0
 81082ca:	d105      	bne.n	81082d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	699b      	ldr	r3, [r3, #24]
 81082d0:	f043 0210 	orr.w	r2, r3, #16
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	699a      	ldr	r2, [r3, #24]
 81082dc:	4b10      	ldr	r3, [pc, #64]	@ (8108320 <USB_DevInit+0x2b8>)
 81082de:	4313      	orrs	r3, r2
 81082e0:	687a      	ldr	r2, [r7, #4]
 81082e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 81082e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 81082e8:	2b00      	cmp	r3, #0
 81082ea:	d005      	beq.n	81082f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	699b      	ldr	r3, [r3, #24]
 81082f0:	f043 0208 	orr.w	r2, r3, #8
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 81082f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 81082fc:	2b01      	cmp	r3, #1
 81082fe:	d107      	bne.n	8108310 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8108300:	687b      	ldr	r3, [r7, #4]
 8108302:	699b      	ldr	r3, [r3, #24]
 8108304:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8108308:	f043 0304 	orr.w	r3, r3, #4
 810830c:	687a      	ldr	r2, [r7, #4]
 810830e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8108310:	7dfb      	ldrb	r3, [r7, #23]
}
 8108312:	4618      	mov	r0, r3
 8108314:	3718      	adds	r7, #24
 8108316:	46bd      	mov	sp, r7
 8108318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810831c:	b004      	add	sp, #16
 810831e:	4770      	bx	lr
 8108320:	803c3800 	.word	0x803c3800

08108324 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8108324:	b480      	push	{r7}
 8108326:	b085      	sub	sp, #20
 8108328:	af00      	add	r7, sp, #0
 810832a:	6078      	str	r0, [r7, #4]
 810832c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810832e:	2300      	movs	r3, #0
 8108330:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8108332:	68fb      	ldr	r3, [r7, #12]
 8108334:	3301      	adds	r3, #1
 8108336:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8108338:	68fb      	ldr	r3, [r7, #12]
 810833a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810833e:	d901      	bls.n	8108344 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8108340:	2303      	movs	r3, #3
 8108342:	e01b      	b.n	810837c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	691b      	ldr	r3, [r3, #16]
 8108348:	2b00      	cmp	r3, #0
 810834a:	daf2      	bge.n	8108332 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810834c:	2300      	movs	r3, #0
 810834e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8108350:	683b      	ldr	r3, [r7, #0]
 8108352:	019b      	lsls	r3, r3, #6
 8108354:	f043 0220 	orr.w	r2, r3, #32
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810835c:	68fb      	ldr	r3, [r7, #12]
 810835e:	3301      	adds	r3, #1
 8108360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8108362:	68fb      	ldr	r3, [r7, #12]
 8108364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8108368:	d901      	bls.n	810836e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810836a:	2303      	movs	r3, #3
 810836c:	e006      	b.n	810837c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	691b      	ldr	r3, [r3, #16]
 8108372:	f003 0320 	and.w	r3, r3, #32
 8108376:	2b20      	cmp	r3, #32
 8108378:	d0f0      	beq.n	810835c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810837a:	2300      	movs	r3, #0
}
 810837c:	4618      	mov	r0, r3
 810837e:	3714      	adds	r7, #20
 8108380:	46bd      	mov	sp, r7
 8108382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108386:	4770      	bx	lr

08108388 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8108388:	b480      	push	{r7}
 810838a:	b085      	sub	sp, #20
 810838c:	af00      	add	r7, sp, #0
 810838e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8108390:	2300      	movs	r3, #0
 8108392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8108394:	68fb      	ldr	r3, [r7, #12]
 8108396:	3301      	adds	r3, #1
 8108398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81083a0:	d901      	bls.n	81083a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 81083a2:	2303      	movs	r3, #3
 81083a4:	e018      	b.n	81083d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	691b      	ldr	r3, [r3, #16]
 81083aa:	2b00      	cmp	r3, #0
 81083ac:	daf2      	bge.n	8108394 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 81083ae:	2300      	movs	r3, #0
 81083b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 81083b2:	687b      	ldr	r3, [r7, #4]
 81083b4:	2210      	movs	r2, #16
 81083b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81083b8:	68fb      	ldr	r3, [r7, #12]
 81083ba:	3301      	adds	r3, #1
 81083bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81083be:	68fb      	ldr	r3, [r7, #12]
 81083c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81083c4:	d901      	bls.n	81083ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 81083c6:	2303      	movs	r3, #3
 81083c8:	e006      	b.n	81083d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	691b      	ldr	r3, [r3, #16]
 81083ce:	f003 0310 	and.w	r3, r3, #16
 81083d2:	2b10      	cmp	r3, #16
 81083d4:	d0f0      	beq.n	81083b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 81083d6:	2300      	movs	r3, #0
}
 81083d8:	4618      	mov	r0, r3
 81083da:	3714      	adds	r7, #20
 81083dc:	46bd      	mov	sp, r7
 81083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083e2:	4770      	bx	lr

081083e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 81083e4:	b480      	push	{r7}
 81083e6:	b085      	sub	sp, #20
 81083e8:	af00      	add	r7, sp, #0
 81083ea:	6078      	str	r0, [r7, #4]
 81083ec:	460b      	mov	r3, r1
 81083ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 81083f4:	68fb      	ldr	r3, [r7, #12]
 81083f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81083fa:	681a      	ldr	r2, [r3, #0]
 81083fc:	78fb      	ldrb	r3, [r7, #3]
 81083fe:	68f9      	ldr	r1, [r7, #12]
 8108400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8108404:	4313      	orrs	r3, r2
 8108406:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8108408:	2300      	movs	r3, #0
}
 810840a:	4618      	mov	r0, r3
 810840c:	3714      	adds	r7, #20
 810840e:	46bd      	mov	sp, r7
 8108410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108414:	4770      	bx	lr

08108416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8108416:	b480      	push	{r7}
 8108418:	b085      	sub	sp, #20
 810841a:	af00      	add	r7, sp, #0
 810841c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810841e:	687b      	ldr	r3, [r7, #4]
 8108420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8108422:	68fb      	ldr	r3, [r7, #12]
 8108424:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8108428:	681b      	ldr	r3, [r3, #0]
 810842a:	68fa      	ldr	r2, [r7, #12]
 810842c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8108430:	f023 0303 	bic.w	r3, r3, #3
 8108434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8108436:	68fb      	ldr	r3, [r7, #12]
 8108438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810843c:	685b      	ldr	r3, [r3, #4]
 810843e:	68fa      	ldr	r2, [r7, #12]
 8108440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8108444:	f043 0302 	orr.w	r3, r3, #2
 8108448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810844a:	2300      	movs	r3, #0
}
 810844c:	4618      	mov	r0, r3
 810844e:	3714      	adds	r7, #20
 8108450:	46bd      	mov	sp, r7
 8108452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108456:	4770      	bx	lr

08108458 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8108458:	b480      	push	{r7}
 810845a:	b083      	sub	sp, #12
 810845c:	af00      	add	r7, sp, #0
 810845e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	695b      	ldr	r3, [r3, #20]
 8108464:	f003 0301 	and.w	r3, r3, #1
}
 8108468:	4618      	mov	r0, r3
 810846a:	370c      	adds	r7, #12
 810846c:	46bd      	mov	sp, r7
 810846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108472:	4770      	bx	lr

08108474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8108474:	b480      	push	{r7}
 8108476:	b085      	sub	sp, #20
 8108478:	af00      	add	r7, sp, #0
 810847a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810847c:	2300      	movs	r3, #0
 810847e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8108480:	68fb      	ldr	r3, [r7, #12]
 8108482:	3301      	adds	r3, #1
 8108484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8108486:	68fb      	ldr	r3, [r7, #12]
 8108488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810848c:	d901      	bls.n	8108492 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810848e:	2303      	movs	r3, #3
 8108490:	e01b      	b.n	81084ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	691b      	ldr	r3, [r3, #16]
 8108496:	2b00      	cmp	r3, #0
 8108498:	daf2      	bge.n	8108480 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810849a:	2300      	movs	r3, #0
 810849c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810849e:	687b      	ldr	r3, [r7, #4]
 81084a0:	691b      	ldr	r3, [r3, #16]
 81084a2:	f043 0201 	orr.w	r2, r3, #1
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81084aa:	68fb      	ldr	r3, [r7, #12]
 81084ac:	3301      	adds	r3, #1
 81084ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81084b0:	68fb      	ldr	r3, [r7, #12]
 81084b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81084b6:	d901      	bls.n	81084bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 81084b8:	2303      	movs	r3, #3
 81084ba:	e006      	b.n	81084ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	691b      	ldr	r3, [r3, #16]
 81084c0:	f003 0301 	and.w	r3, r3, #1
 81084c4:	2b01      	cmp	r3, #1
 81084c6:	d0f0      	beq.n	81084aa <USB_CoreReset+0x36>

  return HAL_OK;
 81084c8:	2300      	movs	r3, #0
}
 81084ca:	4618      	mov	r0, r3
 81084cc:	3714      	adds	r7, #20
 81084ce:	46bd      	mov	sp, r7
 81084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084d4:	4770      	bx	lr
	...

081084d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81084d8:	b580      	push	{r7, lr}
 81084da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81084dc:	4b05      	ldr	r3, [pc, #20]	@ (81084f4 <SysTick_Handler+0x1c>)
 81084de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81084e0:	f000 fa04 	bl	81088ec <xTaskGetSchedulerState>
 81084e4:	4603      	mov	r3, r0
 81084e6:	2b01      	cmp	r3, #1
 81084e8:	d001      	beq.n	81084ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81084ea:	f000 f8a5 	bl	8108638 <xPortSysTickHandler>
  }
}
 81084ee:	bf00      	nop
 81084f0:	bd80      	pop	{r7, pc}
 81084f2:	bf00      	nop
 81084f4:	e000e010 	.word	0xe000e010

081084f8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81084f8:	b480      	push	{r7}
 81084fa:	b085      	sub	sp, #20
 81084fc:	af00      	add	r7, sp, #0
 81084fe:	6078      	str	r0, [r7, #4]
 8108500:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	685b      	ldr	r3, [r3, #4]
 8108506:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8108508:	683b      	ldr	r3, [r7, #0]
 810850a:	68fa      	ldr	r2, [r7, #12]
 810850c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810850e:	68fb      	ldr	r3, [r7, #12]
 8108510:	689a      	ldr	r2, [r3, #8]
 8108512:	683b      	ldr	r3, [r7, #0]
 8108514:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8108516:	68fb      	ldr	r3, [r7, #12]
 8108518:	689b      	ldr	r3, [r3, #8]
 810851a:	683a      	ldr	r2, [r7, #0]
 810851c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810851e:	68fb      	ldr	r3, [r7, #12]
 8108520:	683a      	ldr	r2, [r7, #0]
 8108522:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8108524:	683b      	ldr	r3, [r7, #0]
 8108526:	687a      	ldr	r2, [r7, #4]
 8108528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810852a:	687b      	ldr	r3, [r7, #4]
 810852c:	681b      	ldr	r3, [r3, #0]
 810852e:	1c5a      	adds	r2, r3, #1
 8108530:	687b      	ldr	r3, [r7, #4]
 8108532:	601a      	str	r2, [r3, #0]
}
 8108534:	bf00      	nop
 8108536:	3714      	adds	r7, #20
 8108538:	46bd      	mov	sp, r7
 810853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810853e:	4770      	bx	lr

08108540 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8108540:	b480      	push	{r7}
 8108542:	b085      	sub	sp, #20
 8108544:	af00      	add	r7, sp, #0
 8108546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	691b      	ldr	r3, [r3, #16]
 810854c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	685b      	ldr	r3, [r3, #4]
 8108552:	687a      	ldr	r2, [r7, #4]
 8108554:	6892      	ldr	r2, [r2, #8]
 8108556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8108558:	687b      	ldr	r3, [r7, #4]
 810855a:	689b      	ldr	r3, [r3, #8]
 810855c:	687a      	ldr	r2, [r7, #4]
 810855e:	6852      	ldr	r2, [r2, #4]
 8108560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8108562:	68fb      	ldr	r3, [r7, #12]
 8108564:	685b      	ldr	r3, [r3, #4]
 8108566:	687a      	ldr	r2, [r7, #4]
 8108568:	429a      	cmp	r2, r3
 810856a:	d103      	bne.n	8108574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810856c:	687b      	ldr	r3, [r7, #4]
 810856e:	689a      	ldr	r2, [r3, #8]
 8108570:	68fb      	ldr	r3, [r7, #12]
 8108572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8108574:	687b      	ldr	r3, [r7, #4]
 8108576:	2200      	movs	r2, #0
 8108578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810857a:	68fb      	ldr	r3, [r7, #12]
 810857c:	681b      	ldr	r3, [r3, #0]
 810857e:	1e5a      	subs	r2, r3, #1
 8108580:	68fb      	ldr	r3, [r7, #12]
 8108582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8108584:	68fb      	ldr	r3, [r7, #12]
 8108586:	681b      	ldr	r3, [r3, #0]
}
 8108588:	4618      	mov	r0, r3
 810858a:	3714      	adds	r7, #20
 810858c:	46bd      	mov	sp, r7
 810858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108592:	4770      	bx	lr
	...

081085a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81085a0:	4b07      	ldr	r3, [pc, #28]	@ (81085c0 <pxCurrentTCBConst2>)
 81085a2:	6819      	ldr	r1, [r3, #0]
 81085a4:	6808      	ldr	r0, [r1, #0]
 81085a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81085aa:	f380 8809 	msr	PSP, r0
 81085ae:	f3bf 8f6f 	isb	sy
 81085b2:	f04f 0000 	mov.w	r0, #0
 81085b6:	f380 8811 	msr	BASEPRI, r0
 81085ba:	4770      	bx	lr
 81085bc:	f3af 8000 	nop.w

081085c0 <pxCurrentTCBConst2>:
 81085c0:	10000978 	.word	0x10000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81085c4:	bf00      	nop
 81085c6:	bf00      	nop
	...

081085d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81085d0:	f3ef 8009 	mrs	r0, PSP
 81085d4:	f3bf 8f6f 	isb	sy
 81085d8:	4b15      	ldr	r3, [pc, #84]	@ (8108630 <pxCurrentTCBConst>)
 81085da:	681a      	ldr	r2, [r3, #0]
 81085dc:	f01e 0f10 	tst.w	lr, #16
 81085e0:	bf08      	it	eq
 81085e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81085e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81085ea:	6010      	str	r0, [r2, #0]
 81085ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 81085f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81085f4:	f380 8811 	msr	BASEPRI, r0
 81085f8:	f3bf 8f4f 	dsb	sy
 81085fc:	f3bf 8f6f 	isb	sy
 8108600:	f000 f8f6 	bl	81087f0 <vTaskSwitchContext>
 8108604:	f04f 0000 	mov.w	r0, #0
 8108608:	f380 8811 	msr	BASEPRI, r0
 810860c:	bc09      	pop	{r0, r3}
 810860e:	6819      	ldr	r1, [r3, #0]
 8108610:	6808      	ldr	r0, [r1, #0]
 8108612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108616:	f01e 0f10 	tst.w	lr, #16
 810861a:	bf08      	it	eq
 810861c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8108620:	f380 8809 	msr	PSP, r0
 8108624:	f3bf 8f6f 	isb	sy
 8108628:	4770      	bx	lr
 810862a:	bf00      	nop
 810862c:	f3af 8000 	nop.w

08108630 <pxCurrentTCBConst>:
 8108630:	10000978 	.word	0x10000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8108634:	bf00      	nop
 8108636:	bf00      	nop

08108638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8108638:	b580      	push	{r7, lr}
 810863a:	b082      	sub	sp, #8
 810863c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108642:	f383 8811 	msr	BASEPRI, r3
 8108646:	f3bf 8f6f 	isb	sy
 810864a:	f3bf 8f4f 	dsb	sy
 810864e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8108650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8108652:	f000 f813 	bl	810867c <xTaskIncrementTick>
 8108656:	4603      	mov	r3, r0
 8108658:	2b00      	cmp	r3, #0
 810865a:	d003      	beq.n	8108664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810865c:	4b06      	ldr	r3, [pc, #24]	@ (8108678 <xPortSysTickHandler+0x40>)
 810865e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108662:	601a      	str	r2, [r3, #0]
 8108664:	2300      	movs	r3, #0
 8108666:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8108668:	683b      	ldr	r3, [r7, #0]
 810866a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810866e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8108670:	bf00      	nop
 8108672:	3708      	adds	r7, #8
 8108674:	46bd      	mov	sp, r7
 8108676:	bd80      	pop	{r7, pc}
 8108678:	e000ed04 	.word	0xe000ed04

0810867c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810867c:	b580      	push	{r7, lr}
 810867e:	b086      	sub	sp, #24
 8108680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8108682:	2300      	movs	r3, #0
 8108684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108686:	4b4f      	ldr	r3, [pc, #316]	@ (81087c4 <xTaskIncrementTick+0x148>)
 8108688:	681b      	ldr	r3, [r3, #0]
 810868a:	2b00      	cmp	r3, #0
 810868c:	f040 8090 	bne.w	81087b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8108690:	4b4d      	ldr	r3, [pc, #308]	@ (81087c8 <xTaskIncrementTick+0x14c>)
 8108692:	681b      	ldr	r3, [r3, #0]
 8108694:	3301      	adds	r3, #1
 8108696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8108698:	4a4b      	ldr	r2, [pc, #300]	@ (81087c8 <xTaskIncrementTick+0x14c>)
 810869a:	693b      	ldr	r3, [r7, #16]
 810869c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810869e:	693b      	ldr	r3, [r7, #16]
 81086a0:	2b00      	cmp	r3, #0
 81086a2:	d121      	bne.n	81086e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81086a4:	4b49      	ldr	r3, [pc, #292]	@ (81087cc <xTaskIncrementTick+0x150>)
 81086a6:	681b      	ldr	r3, [r3, #0]
 81086a8:	681b      	ldr	r3, [r3, #0]
 81086aa:	2b00      	cmp	r3, #0
 81086ac:	d00b      	beq.n	81086c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 81086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81086b2:	f383 8811 	msr	BASEPRI, r3
 81086b6:	f3bf 8f6f 	isb	sy
 81086ba:	f3bf 8f4f 	dsb	sy
 81086be:	603b      	str	r3, [r7, #0]
}
 81086c0:	bf00      	nop
 81086c2:	bf00      	nop
 81086c4:	e7fd      	b.n	81086c2 <xTaskIncrementTick+0x46>
 81086c6:	4b41      	ldr	r3, [pc, #260]	@ (81087cc <xTaskIncrementTick+0x150>)
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	60fb      	str	r3, [r7, #12]
 81086cc:	4b40      	ldr	r3, [pc, #256]	@ (81087d0 <xTaskIncrementTick+0x154>)
 81086ce:	681b      	ldr	r3, [r3, #0]
 81086d0:	4a3e      	ldr	r2, [pc, #248]	@ (81087cc <xTaskIncrementTick+0x150>)
 81086d2:	6013      	str	r3, [r2, #0]
 81086d4:	4a3e      	ldr	r2, [pc, #248]	@ (81087d0 <xTaskIncrementTick+0x154>)
 81086d6:	68fb      	ldr	r3, [r7, #12]
 81086d8:	6013      	str	r3, [r2, #0]
 81086da:	4b3e      	ldr	r3, [pc, #248]	@ (81087d4 <xTaskIncrementTick+0x158>)
 81086dc:	681b      	ldr	r3, [r3, #0]
 81086de:	3301      	adds	r3, #1
 81086e0:	4a3c      	ldr	r2, [pc, #240]	@ (81087d4 <xTaskIncrementTick+0x158>)
 81086e2:	6013      	str	r3, [r2, #0]
 81086e4:	f000 f8e2 	bl	81088ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81086e8:	4b3b      	ldr	r3, [pc, #236]	@ (81087d8 <xTaskIncrementTick+0x15c>)
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	693a      	ldr	r2, [r7, #16]
 81086ee:	429a      	cmp	r2, r3
 81086f0:	d349      	bcc.n	8108786 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81086f2:	4b36      	ldr	r3, [pc, #216]	@ (81087cc <xTaskIncrementTick+0x150>)
 81086f4:	681b      	ldr	r3, [r3, #0]
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	2b00      	cmp	r3, #0
 81086fa:	d104      	bne.n	8108706 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81086fc:	4b36      	ldr	r3, [pc, #216]	@ (81087d8 <xTaskIncrementTick+0x15c>)
 81086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8108702:	601a      	str	r2, [r3, #0]
					break;
 8108704:	e03f      	b.n	8108786 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108706:	4b31      	ldr	r3, [pc, #196]	@ (81087cc <xTaskIncrementTick+0x150>)
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	68db      	ldr	r3, [r3, #12]
 810870c:	68db      	ldr	r3, [r3, #12]
 810870e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8108710:	68bb      	ldr	r3, [r7, #8]
 8108712:	685b      	ldr	r3, [r3, #4]
 8108714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8108716:	693a      	ldr	r2, [r7, #16]
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	429a      	cmp	r2, r3
 810871c:	d203      	bcs.n	8108726 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810871e:	4a2e      	ldr	r2, [pc, #184]	@ (81087d8 <xTaskIncrementTick+0x15c>)
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8108724:	e02f      	b.n	8108786 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8108726:	68bb      	ldr	r3, [r7, #8]
 8108728:	3304      	adds	r3, #4
 810872a:	4618      	mov	r0, r3
 810872c:	f7ff ff08 	bl	8108540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8108730:	68bb      	ldr	r3, [r7, #8]
 8108732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108734:	2b00      	cmp	r3, #0
 8108736:	d004      	beq.n	8108742 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8108738:	68bb      	ldr	r3, [r7, #8]
 810873a:	3318      	adds	r3, #24
 810873c:	4618      	mov	r0, r3
 810873e:	f7ff feff 	bl	8108540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8108742:	68bb      	ldr	r3, [r7, #8]
 8108744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108746:	4b25      	ldr	r3, [pc, #148]	@ (81087dc <xTaskIncrementTick+0x160>)
 8108748:	681b      	ldr	r3, [r3, #0]
 810874a:	429a      	cmp	r2, r3
 810874c:	d903      	bls.n	8108756 <xTaskIncrementTick+0xda>
 810874e:	68bb      	ldr	r3, [r7, #8]
 8108750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108752:	4a22      	ldr	r2, [pc, #136]	@ (81087dc <xTaskIncrementTick+0x160>)
 8108754:	6013      	str	r3, [r2, #0]
 8108756:	68bb      	ldr	r3, [r7, #8]
 8108758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810875a:	4613      	mov	r3, r2
 810875c:	009b      	lsls	r3, r3, #2
 810875e:	4413      	add	r3, r2
 8108760:	009b      	lsls	r3, r3, #2
 8108762:	4a1f      	ldr	r2, [pc, #124]	@ (81087e0 <xTaskIncrementTick+0x164>)
 8108764:	441a      	add	r2, r3
 8108766:	68bb      	ldr	r3, [r7, #8]
 8108768:	3304      	adds	r3, #4
 810876a:	4619      	mov	r1, r3
 810876c:	4610      	mov	r0, r2
 810876e:	f7ff fec3 	bl	81084f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8108772:	68bb      	ldr	r3, [r7, #8]
 8108774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108776:	4b1b      	ldr	r3, [pc, #108]	@ (81087e4 <xTaskIncrementTick+0x168>)
 8108778:	681b      	ldr	r3, [r3, #0]
 810877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810877c:	429a      	cmp	r2, r3
 810877e:	d3b8      	bcc.n	81086f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8108780:	2301      	movs	r3, #1
 8108782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8108784:	e7b5      	b.n	81086f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8108786:	4b17      	ldr	r3, [pc, #92]	@ (81087e4 <xTaskIncrementTick+0x168>)
 8108788:	681b      	ldr	r3, [r3, #0]
 810878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810878c:	4914      	ldr	r1, [pc, #80]	@ (81087e0 <xTaskIncrementTick+0x164>)
 810878e:	4613      	mov	r3, r2
 8108790:	009b      	lsls	r3, r3, #2
 8108792:	4413      	add	r3, r2
 8108794:	009b      	lsls	r3, r3, #2
 8108796:	440b      	add	r3, r1
 8108798:	681b      	ldr	r3, [r3, #0]
 810879a:	2b01      	cmp	r3, #1
 810879c:	d901      	bls.n	81087a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810879e:	2301      	movs	r3, #1
 81087a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81087a2:	4b11      	ldr	r3, [pc, #68]	@ (81087e8 <xTaskIncrementTick+0x16c>)
 81087a4:	681b      	ldr	r3, [r3, #0]
 81087a6:	2b00      	cmp	r3, #0
 81087a8:	d007      	beq.n	81087ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81087aa:	2301      	movs	r3, #1
 81087ac:	617b      	str	r3, [r7, #20]
 81087ae:	e004      	b.n	81087ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81087b0:	4b0e      	ldr	r3, [pc, #56]	@ (81087ec <xTaskIncrementTick+0x170>)
 81087b2:	681b      	ldr	r3, [r3, #0]
 81087b4:	3301      	adds	r3, #1
 81087b6:	4a0d      	ldr	r2, [pc, #52]	@ (81087ec <xTaskIncrementTick+0x170>)
 81087b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81087ba:	697b      	ldr	r3, [r7, #20]
}
 81087bc:	4618      	mov	r0, r3
 81087be:	3718      	adds	r7, #24
 81087c0:	46bd      	mov	sp, r7
 81087c2:	bd80      	pop	{r7, pc}
 81087c4:	10000e00 	.word	0x10000e00
 81087c8:	10000de4 	.word	0x10000de4
 81087cc:	10000ddc 	.word	0x10000ddc
 81087d0:	10000de0 	.word	0x10000de0
 81087d4:	10000df8 	.word	0x10000df8
 81087d8:	10000dfc 	.word	0x10000dfc
 81087dc:	10000de8 	.word	0x10000de8
 81087e0:	1000097c 	.word	0x1000097c
 81087e4:	10000978 	.word	0x10000978
 81087e8:	10000df4 	.word	0x10000df4
 81087ec:	10000df0 	.word	0x10000df0

081087f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81087f0:	b480      	push	{r7}
 81087f2:	b085      	sub	sp, #20
 81087f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81087f6:	4b28      	ldr	r3, [pc, #160]	@ (8108898 <vTaskSwitchContext+0xa8>)
 81087f8:	681b      	ldr	r3, [r3, #0]
 81087fa:	2b00      	cmp	r3, #0
 81087fc:	d003      	beq.n	8108806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81087fe:	4b27      	ldr	r3, [pc, #156]	@ (810889c <vTaskSwitchContext+0xac>)
 8108800:	2201      	movs	r2, #1
 8108802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8108804:	e042      	b.n	810888c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8108806:	4b25      	ldr	r3, [pc, #148]	@ (810889c <vTaskSwitchContext+0xac>)
 8108808:	2200      	movs	r2, #0
 810880a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810880c:	4b24      	ldr	r3, [pc, #144]	@ (81088a0 <vTaskSwitchContext+0xb0>)
 810880e:	681b      	ldr	r3, [r3, #0]
 8108810:	60fb      	str	r3, [r7, #12]
 8108812:	e011      	b.n	8108838 <vTaskSwitchContext+0x48>
 8108814:	68fb      	ldr	r3, [r7, #12]
 8108816:	2b00      	cmp	r3, #0
 8108818:	d10b      	bne.n	8108832 <vTaskSwitchContext+0x42>
	__asm volatile
 810881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810881e:	f383 8811 	msr	BASEPRI, r3
 8108822:	f3bf 8f6f 	isb	sy
 8108826:	f3bf 8f4f 	dsb	sy
 810882a:	607b      	str	r3, [r7, #4]
}
 810882c:	bf00      	nop
 810882e:	bf00      	nop
 8108830:	e7fd      	b.n	810882e <vTaskSwitchContext+0x3e>
 8108832:	68fb      	ldr	r3, [r7, #12]
 8108834:	3b01      	subs	r3, #1
 8108836:	60fb      	str	r3, [r7, #12]
 8108838:	491a      	ldr	r1, [pc, #104]	@ (81088a4 <vTaskSwitchContext+0xb4>)
 810883a:	68fa      	ldr	r2, [r7, #12]
 810883c:	4613      	mov	r3, r2
 810883e:	009b      	lsls	r3, r3, #2
 8108840:	4413      	add	r3, r2
 8108842:	009b      	lsls	r3, r3, #2
 8108844:	440b      	add	r3, r1
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	2b00      	cmp	r3, #0
 810884a:	d0e3      	beq.n	8108814 <vTaskSwitchContext+0x24>
 810884c:	68fa      	ldr	r2, [r7, #12]
 810884e:	4613      	mov	r3, r2
 8108850:	009b      	lsls	r3, r3, #2
 8108852:	4413      	add	r3, r2
 8108854:	009b      	lsls	r3, r3, #2
 8108856:	4a13      	ldr	r2, [pc, #76]	@ (81088a4 <vTaskSwitchContext+0xb4>)
 8108858:	4413      	add	r3, r2
 810885a:	60bb      	str	r3, [r7, #8]
 810885c:	68bb      	ldr	r3, [r7, #8]
 810885e:	685b      	ldr	r3, [r3, #4]
 8108860:	685a      	ldr	r2, [r3, #4]
 8108862:	68bb      	ldr	r3, [r7, #8]
 8108864:	605a      	str	r2, [r3, #4]
 8108866:	68bb      	ldr	r3, [r7, #8]
 8108868:	685a      	ldr	r2, [r3, #4]
 810886a:	68bb      	ldr	r3, [r7, #8]
 810886c:	3308      	adds	r3, #8
 810886e:	429a      	cmp	r2, r3
 8108870:	d104      	bne.n	810887c <vTaskSwitchContext+0x8c>
 8108872:	68bb      	ldr	r3, [r7, #8]
 8108874:	685b      	ldr	r3, [r3, #4]
 8108876:	685a      	ldr	r2, [r3, #4]
 8108878:	68bb      	ldr	r3, [r7, #8]
 810887a:	605a      	str	r2, [r3, #4]
 810887c:	68bb      	ldr	r3, [r7, #8]
 810887e:	685b      	ldr	r3, [r3, #4]
 8108880:	68db      	ldr	r3, [r3, #12]
 8108882:	4a09      	ldr	r2, [pc, #36]	@ (81088a8 <vTaskSwitchContext+0xb8>)
 8108884:	6013      	str	r3, [r2, #0]
 8108886:	4a06      	ldr	r2, [pc, #24]	@ (81088a0 <vTaskSwitchContext+0xb0>)
 8108888:	68fb      	ldr	r3, [r7, #12]
 810888a:	6013      	str	r3, [r2, #0]
}
 810888c:	bf00      	nop
 810888e:	3714      	adds	r7, #20
 8108890:	46bd      	mov	sp, r7
 8108892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108896:	4770      	bx	lr
 8108898:	10000e00 	.word	0x10000e00
 810889c:	10000df4 	.word	0x10000df4
 81088a0:	10000de8 	.word	0x10000de8
 81088a4:	1000097c 	.word	0x1000097c
 81088a8:	10000978 	.word	0x10000978

081088ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81088ac:	b480      	push	{r7}
 81088ae:	b083      	sub	sp, #12
 81088b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81088b2:	4b0c      	ldr	r3, [pc, #48]	@ (81088e4 <prvResetNextTaskUnblockTime+0x38>)
 81088b4:	681b      	ldr	r3, [r3, #0]
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	2b00      	cmp	r3, #0
 81088ba:	d104      	bne.n	81088c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81088bc:	4b0a      	ldr	r3, [pc, #40]	@ (81088e8 <prvResetNextTaskUnblockTime+0x3c>)
 81088be:	f04f 32ff 	mov.w	r2, #4294967295
 81088c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81088c4:	e008      	b.n	81088d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81088c6:	4b07      	ldr	r3, [pc, #28]	@ (81088e4 <prvResetNextTaskUnblockTime+0x38>)
 81088c8:	681b      	ldr	r3, [r3, #0]
 81088ca:	68db      	ldr	r3, [r3, #12]
 81088cc:	68db      	ldr	r3, [r3, #12]
 81088ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	685b      	ldr	r3, [r3, #4]
 81088d4:	4a04      	ldr	r2, [pc, #16]	@ (81088e8 <prvResetNextTaskUnblockTime+0x3c>)
 81088d6:	6013      	str	r3, [r2, #0]
}
 81088d8:	bf00      	nop
 81088da:	370c      	adds	r7, #12
 81088dc:	46bd      	mov	sp, r7
 81088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088e2:	4770      	bx	lr
 81088e4:	10000ddc 	.word	0x10000ddc
 81088e8:	10000dfc 	.word	0x10000dfc

081088ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81088ec:	b480      	push	{r7}
 81088ee:	b083      	sub	sp, #12
 81088f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81088f2:	4b0b      	ldr	r3, [pc, #44]	@ (8108920 <xTaskGetSchedulerState+0x34>)
 81088f4:	681b      	ldr	r3, [r3, #0]
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	d102      	bne.n	8108900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81088fa:	2301      	movs	r3, #1
 81088fc:	607b      	str	r3, [r7, #4]
 81088fe:	e008      	b.n	8108912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108900:	4b08      	ldr	r3, [pc, #32]	@ (8108924 <xTaskGetSchedulerState+0x38>)
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	2b00      	cmp	r3, #0
 8108906:	d102      	bne.n	810890e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8108908:	2302      	movs	r3, #2
 810890a:	607b      	str	r3, [r7, #4]
 810890c:	e001      	b.n	8108912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810890e:	2300      	movs	r3, #0
 8108910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8108912:	687b      	ldr	r3, [r7, #4]
	}
 8108914:	4618      	mov	r0, r3
 8108916:	370c      	adds	r7, #12
 8108918:	46bd      	mov	sp, r7
 810891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810891e:	4770      	bx	lr
 8108920:	10000dec 	.word	0x10000dec
 8108924:	10000e00 	.word	0x10000e00

08108928 <std>:
 8108928:	2300      	movs	r3, #0
 810892a:	b510      	push	{r4, lr}
 810892c:	4604      	mov	r4, r0
 810892e:	e9c0 3300 	strd	r3, r3, [r0]
 8108932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108936:	6083      	str	r3, [r0, #8]
 8108938:	8181      	strh	r1, [r0, #12]
 810893a:	6643      	str	r3, [r0, #100]	@ 0x64
 810893c:	81c2      	strh	r2, [r0, #14]
 810893e:	6183      	str	r3, [r0, #24]
 8108940:	4619      	mov	r1, r3
 8108942:	2208      	movs	r2, #8
 8108944:	305c      	adds	r0, #92	@ 0x5c
 8108946:	f000 f9e7 	bl	8108d18 <memset>
 810894a:	4b0d      	ldr	r3, [pc, #52]	@ (8108980 <std+0x58>)
 810894c:	6263      	str	r3, [r4, #36]	@ 0x24
 810894e:	4b0d      	ldr	r3, [pc, #52]	@ (8108984 <std+0x5c>)
 8108950:	62a3      	str	r3, [r4, #40]	@ 0x28
 8108952:	4b0d      	ldr	r3, [pc, #52]	@ (8108988 <std+0x60>)
 8108954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8108956:	4b0d      	ldr	r3, [pc, #52]	@ (810898c <std+0x64>)
 8108958:	6323      	str	r3, [r4, #48]	@ 0x30
 810895a:	4b0d      	ldr	r3, [pc, #52]	@ (8108990 <std+0x68>)
 810895c:	6224      	str	r4, [r4, #32]
 810895e:	429c      	cmp	r4, r3
 8108960:	d006      	beq.n	8108970 <std+0x48>
 8108962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8108966:	4294      	cmp	r4, r2
 8108968:	d002      	beq.n	8108970 <std+0x48>
 810896a:	33d0      	adds	r3, #208	@ 0xd0
 810896c:	429c      	cmp	r4, r3
 810896e:	d105      	bne.n	810897c <std+0x54>
 8108970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8108974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108978:	f000 ba46 	b.w	8108e08 <__retarget_lock_init_recursive>
 810897c:	bd10      	pop	{r4, pc}
 810897e:	bf00      	nop
 8108980:	08108b69 	.word	0x08108b69
 8108984:	08108b8b 	.word	0x08108b8b
 8108988:	08108bc3 	.word	0x08108bc3
 810898c:	08108be7 	.word	0x08108be7
 8108990:	10000e04 	.word	0x10000e04

08108994 <stdio_exit_handler>:
 8108994:	4a02      	ldr	r2, [pc, #8]	@ (81089a0 <stdio_exit_handler+0xc>)
 8108996:	4903      	ldr	r1, [pc, #12]	@ (81089a4 <stdio_exit_handler+0x10>)
 8108998:	4803      	ldr	r0, [pc, #12]	@ (81089a8 <stdio_exit_handler+0x14>)
 810899a:	f000 b869 	b.w	8108a70 <_fwalk_sglue>
 810899e:	bf00      	nop
 81089a0:	10000010 	.word	0x10000010
 81089a4:	08109125 	.word	0x08109125
 81089a8:	10000020 	.word	0x10000020

081089ac <cleanup_stdio>:
 81089ac:	6841      	ldr	r1, [r0, #4]
 81089ae:	4b0c      	ldr	r3, [pc, #48]	@ (81089e0 <cleanup_stdio+0x34>)
 81089b0:	4299      	cmp	r1, r3
 81089b2:	b510      	push	{r4, lr}
 81089b4:	4604      	mov	r4, r0
 81089b6:	d001      	beq.n	81089bc <cleanup_stdio+0x10>
 81089b8:	f000 fbb4 	bl	8109124 <_fflush_r>
 81089bc:	68a1      	ldr	r1, [r4, #8]
 81089be:	4b09      	ldr	r3, [pc, #36]	@ (81089e4 <cleanup_stdio+0x38>)
 81089c0:	4299      	cmp	r1, r3
 81089c2:	d002      	beq.n	81089ca <cleanup_stdio+0x1e>
 81089c4:	4620      	mov	r0, r4
 81089c6:	f000 fbad 	bl	8109124 <_fflush_r>
 81089ca:	68e1      	ldr	r1, [r4, #12]
 81089cc:	4b06      	ldr	r3, [pc, #24]	@ (81089e8 <cleanup_stdio+0x3c>)
 81089ce:	4299      	cmp	r1, r3
 81089d0:	d004      	beq.n	81089dc <cleanup_stdio+0x30>
 81089d2:	4620      	mov	r0, r4
 81089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81089d8:	f000 bba4 	b.w	8109124 <_fflush_r>
 81089dc:	bd10      	pop	{r4, pc}
 81089de:	bf00      	nop
 81089e0:	10000e04 	.word	0x10000e04
 81089e4:	10000e6c 	.word	0x10000e6c
 81089e8:	10000ed4 	.word	0x10000ed4

081089ec <global_stdio_init.part.0>:
 81089ec:	b510      	push	{r4, lr}
 81089ee:	4b0b      	ldr	r3, [pc, #44]	@ (8108a1c <global_stdio_init.part.0+0x30>)
 81089f0:	4c0b      	ldr	r4, [pc, #44]	@ (8108a20 <global_stdio_init.part.0+0x34>)
 81089f2:	4a0c      	ldr	r2, [pc, #48]	@ (8108a24 <global_stdio_init.part.0+0x38>)
 81089f4:	601a      	str	r2, [r3, #0]
 81089f6:	4620      	mov	r0, r4
 81089f8:	2200      	movs	r2, #0
 81089fa:	2104      	movs	r1, #4
 81089fc:	f7ff ff94 	bl	8108928 <std>
 8108a00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8108a04:	2201      	movs	r2, #1
 8108a06:	2109      	movs	r1, #9
 8108a08:	f7ff ff8e 	bl	8108928 <std>
 8108a0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8108a10:	2202      	movs	r2, #2
 8108a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108a16:	2112      	movs	r1, #18
 8108a18:	f7ff bf86 	b.w	8108928 <std>
 8108a1c:	10000f3c 	.word	0x10000f3c
 8108a20:	10000e04 	.word	0x10000e04
 8108a24:	08108995 	.word	0x08108995

08108a28 <__sfp_lock_acquire>:
 8108a28:	4801      	ldr	r0, [pc, #4]	@ (8108a30 <__sfp_lock_acquire+0x8>)
 8108a2a:	f000 b9ee 	b.w	8108e0a <__retarget_lock_acquire_recursive>
 8108a2e:	bf00      	nop
 8108a30:	10000f45 	.word	0x10000f45

08108a34 <__sfp_lock_release>:
 8108a34:	4801      	ldr	r0, [pc, #4]	@ (8108a3c <__sfp_lock_release+0x8>)
 8108a36:	f000 b9e9 	b.w	8108e0c <__retarget_lock_release_recursive>
 8108a3a:	bf00      	nop
 8108a3c:	10000f45 	.word	0x10000f45

08108a40 <__sinit>:
 8108a40:	b510      	push	{r4, lr}
 8108a42:	4604      	mov	r4, r0
 8108a44:	f7ff fff0 	bl	8108a28 <__sfp_lock_acquire>
 8108a48:	6a23      	ldr	r3, [r4, #32]
 8108a4a:	b11b      	cbz	r3, 8108a54 <__sinit+0x14>
 8108a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108a50:	f7ff bff0 	b.w	8108a34 <__sfp_lock_release>
 8108a54:	4b04      	ldr	r3, [pc, #16]	@ (8108a68 <__sinit+0x28>)
 8108a56:	6223      	str	r3, [r4, #32]
 8108a58:	4b04      	ldr	r3, [pc, #16]	@ (8108a6c <__sinit+0x2c>)
 8108a5a:	681b      	ldr	r3, [r3, #0]
 8108a5c:	2b00      	cmp	r3, #0
 8108a5e:	d1f5      	bne.n	8108a4c <__sinit+0xc>
 8108a60:	f7ff ffc4 	bl	81089ec <global_stdio_init.part.0>
 8108a64:	e7f2      	b.n	8108a4c <__sinit+0xc>
 8108a66:	bf00      	nop
 8108a68:	081089ad 	.word	0x081089ad
 8108a6c:	10000f3c 	.word	0x10000f3c

08108a70 <_fwalk_sglue>:
 8108a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108a74:	4607      	mov	r7, r0
 8108a76:	4688      	mov	r8, r1
 8108a78:	4614      	mov	r4, r2
 8108a7a:	2600      	movs	r6, #0
 8108a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108a80:	f1b9 0901 	subs.w	r9, r9, #1
 8108a84:	d505      	bpl.n	8108a92 <_fwalk_sglue+0x22>
 8108a86:	6824      	ldr	r4, [r4, #0]
 8108a88:	2c00      	cmp	r4, #0
 8108a8a:	d1f7      	bne.n	8108a7c <_fwalk_sglue+0xc>
 8108a8c:	4630      	mov	r0, r6
 8108a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108a92:	89ab      	ldrh	r3, [r5, #12]
 8108a94:	2b01      	cmp	r3, #1
 8108a96:	d907      	bls.n	8108aa8 <_fwalk_sglue+0x38>
 8108a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108a9c:	3301      	adds	r3, #1
 8108a9e:	d003      	beq.n	8108aa8 <_fwalk_sglue+0x38>
 8108aa0:	4629      	mov	r1, r5
 8108aa2:	4638      	mov	r0, r7
 8108aa4:	47c0      	blx	r8
 8108aa6:	4306      	orrs	r6, r0
 8108aa8:	3568      	adds	r5, #104	@ 0x68
 8108aaa:	e7e9      	b.n	8108a80 <_fwalk_sglue+0x10>

08108aac <_puts_r>:
 8108aac:	6a03      	ldr	r3, [r0, #32]
 8108aae:	b570      	push	{r4, r5, r6, lr}
 8108ab0:	6884      	ldr	r4, [r0, #8]
 8108ab2:	4605      	mov	r5, r0
 8108ab4:	460e      	mov	r6, r1
 8108ab6:	b90b      	cbnz	r3, 8108abc <_puts_r+0x10>
 8108ab8:	f7ff ffc2 	bl	8108a40 <__sinit>
 8108abc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108abe:	07db      	lsls	r3, r3, #31
 8108ac0:	d405      	bmi.n	8108ace <_puts_r+0x22>
 8108ac2:	89a3      	ldrh	r3, [r4, #12]
 8108ac4:	0598      	lsls	r0, r3, #22
 8108ac6:	d402      	bmi.n	8108ace <_puts_r+0x22>
 8108ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108aca:	f000 f99e 	bl	8108e0a <__retarget_lock_acquire_recursive>
 8108ace:	89a3      	ldrh	r3, [r4, #12]
 8108ad0:	0719      	lsls	r1, r3, #28
 8108ad2:	d502      	bpl.n	8108ada <_puts_r+0x2e>
 8108ad4:	6923      	ldr	r3, [r4, #16]
 8108ad6:	2b00      	cmp	r3, #0
 8108ad8:	d135      	bne.n	8108b46 <_puts_r+0x9a>
 8108ada:	4621      	mov	r1, r4
 8108adc:	4628      	mov	r0, r5
 8108ade:	f000 f8c5 	bl	8108c6c <__swsetup_r>
 8108ae2:	b380      	cbz	r0, 8108b46 <_puts_r+0x9a>
 8108ae4:	f04f 35ff 	mov.w	r5, #4294967295
 8108ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108aea:	07da      	lsls	r2, r3, #31
 8108aec:	d405      	bmi.n	8108afa <_puts_r+0x4e>
 8108aee:	89a3      	ldrh	r3, [r4, #12]
 8108af0:	059b      	lsls	r3, r3, #22
 8108af2:	d402      	bmi.n	8108afa <_puts_r+0x4e>
 8108af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108af6:	f000 f989 	bl	8108e0c <__retarget_lock_release_recursive>
 8108afa:	4628      	mov	r0, r5
 8108afc:	bd70      	pop	{r4, r5, r6, pc}
 8108afe:	2b00      	cmp	r3, #0
 8108b00:	da04      	bge.n	8108b0c <_puts_r+0x60>
 8108b02:	69a2      	ldr	r2, [r4, #24]
 8108b04:	429a      	cmp	r2, r3
 8108b06:	dc17      	bgt.n	8108b38 <_puts_r+0x8c>
 8108b08:	290a      	cmp	r1, #10
 8108b0a:	d015      	beq.n	8108b38 <_puts_r+0x8c>
 8108b0c:	6823      	ldr	r3, [r4, #0]
 8108b0e:	1c5a      	adds	r2, r3, #1
 8108b10:	6022      	str	r2, [r4, #0]
 8108b12:	7019      	strb	r1, [r3, #0]
 8108b14:	68a3      	ldr	r3, [r4, #8]
 8108b16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8108b1a:	3b01      	subs	r3, #1
 8108b1c:	60a3      	str	r3, [r4, #8]
 8108b1e:	2900      	cmp	r1, #0
 8108b20:	d1ed      	bne.n	8108afe <_puts_r+0x52>
 8108b22:	2b00      	cmp	r3, #0
 8108b24:	da11      	bge.n	8108b4a <_puts_r+0x9e>
 8108b26:	4622      	mov	r2, r4
 8108b28:	210a      	movs	r1, #10
 8108b2a:	4628      	mov	r0, r5
 8108b2c:	f000 f85f 	bl	8108bee <__swbuf_r>
 8108b30:	3001      	adds	r0, #1
 8108b32:	d0d7      	beq.n	8108ae4 <_puts_r+0x38>
 8108b34:	250a      	movs	r5, #10
 8108b36:	e7d7      	b.n	8108ae8 <_puts_r+0x3c>
 8108b38:	4622      	mov	r2, r4
 8108b3a:	4628      	mov	r0, r5
 8108b3c:	f000 f857 	bl	8108bee <__swbuf_r>
 8108b40:	3001      	adds	r0, #1
 8108b42:	d1e7      	bne.n	8108b14 <_puts_r+0x68>
 8108b44:	e7ce      	b.n	8108ae4 <_puts_r+0x38>
 8108b46:	3e01      	subs	r6, #1
 8108b48:	e7e4      	b.n	8108b14 <_puts_r+0x68>
 8108b4a:	6823      	ldr	r3, [r4, #0]
 8108b4c:	1c5a      	adds	r2, r3, #1
 8108b4e:	6022      	str	r2, [r4, #0]
 8108b50:	220a      	movs	r2, #10
 8108b52:	701a      	strb	r2, [r3, #0]
 8108b54:	e7ee      	b.n	8108b34 <_puts_r+0x88>
	...

08108b58 <puts>:
 8108b58:	4b02      	ldr	r3, [pc, #8]	@ (8108b64 <puts+0xc>)
 8108b5a:	4601      	mov	r1, r0
 8108b5c:	6818      	ldr	r0, [r3, #0]
 8108b5e:	f7ff bfa5 	b.w	8108aac <_puts_r>
 8108b62:	bf00      	nop
 8108b64:	1000001c 	.word	0x1000001c

08108b68 <__sread>:
 8108b68:	b510      	push	{r4, lr}
 8108b6a:	460c      	mov	r4, r1
 8108b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108b70:	f000 f8fc 	bl	8108d6c <_read_r>
 8108b74:	2800      	cmp	r0, #0
 8108b76:	bfab      	itete	ge
 8108b78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8108b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8108b7c:	181b      	addge	r3, r3, r0
 8108b7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8108b82:	bfac      	ite	ge
 8108b84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8108b86:	81a3      	strhlt	r3, [r4, #12]
 8108b88:	bd10      	pop	{r4, pc}

08108b8a <__swrite>:
 8108b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108b8e:	461f      	mov	r7, r3
 8108b90:	898b      	ldrh	r3, [r1, #12]
 8108b92:	05db      	lsls	r3, r3, #23
 8108b94:	4605      	mov	r5, r0
 8108b96:	460c      	mov	r4, r1
 8108b98:	4616      	mov	r6, r2
 8108b9a:	d505      	bpl.n	8108ba8 <__swrite+0x1e>
 8108b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108ba0:	2302      	movs	r3, #2
 8108ba2:	2200      	movs	r2, #0
 8108ba4:	f000 f8d0 	bl	8108d48 <_lseek_r>
 8108ba8:	89a3      	ldrh	r3, [r4, #12]
 8108baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108bae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8108bb2:	81a3      	strh	r3, [r4, #12]
 8108bb4:	4632      	mov	r2, r6
 8108bb6:	463b      	mov	r3, r7
 8108bb8:	4628      	mov	r0, r5
 8108bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108bbe:	f000 b8e7 	b.w	8108d90 <_write_r>

08108bc2 <__sseek>:
 8108bc2:	b510      	push	{r4, lr}
 8108bc4:	460c      	mov	r4, r1
 8108bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108bca:	f000 f8bd 	bl	8108d48 <_lseek_r>
 8108bce:	1c43      	adds	r3, r0, #1
 8108bd0:	89a3      	ldrh	r3, [r4, #12]
 8108bd2:	bf15      	itete	ne
 8108bd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8108bd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8108bda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8108bde:	81a3      	strheq	r3, [r4, #12]
 8108be0:	bf18      	it	ne
 8108be2:	81a3      	strhne	r3, [r4, #12]
 8108be4:	bd10      	pop	{r4, pc}

08108be6 <__sclose>:
 8108be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108bea:	f000 b89d 	b.w	8108d28 <_close_r>

08108bee <__swbuf_r>:
 8108bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108bf0:	460e      	mov	r6, r1
 8108bf2:	4614      	mov	r4, r2
 8108bf4:	4605      	mov	r5, r0
 8108bf6:	b118      	cbz	r0, 8108c00 <__swbuf_r+0x12>
 8108bf8:	6a03      	ldr	r3, [r0, #32]
 8108bfa:	b90b      	cbnz	r3, 8108c00 <__swbuf_r+0x12>
 8108bfc:	f7ff ff20 	bl	8108a40 <__sinit>
 8108c00:	69a3      	ldr	r3, [r4, #24]
 8108c02:	60a3      	str	r3, [r4, #8]
 8108c04:	89a3      	ldrh	r3, [r4, #12]
 8108c06:	071a      	lsls	r2, r3, #28
 8108c08:	d501      	bpl.n	8108c0e <__swbuf_r+0x20>
 8108c0a:	6923      	ldr	r3, [r4, #16]
 8108c0c:	b943      	cbnz	r3, 8108c20 <__swbuf_r+0x32>
 8108c0e:	4621      	mov	r1, r4
 8108c10:	4628      	mov	r0, r5
 8108c12:	f000 f82b 	bl	8108c6c <__swsetup_r>
 8108c16:	b118      	cbz	r0, 8108c20 <__swbuf_r+0x32>
 8108c18:	f04f 37ff 	mov.w	r7, #4294967295
 8108c1c:	4638      	mov	r0, r7
 8108c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108c20:	6823      	ldr	r3, [r4, #0]
 8108c22:	6922      	ldr	r2, [r4, #16]
 8108c24:	1a98      	subs	r0, r3, r2
 8108c26:	6963      	ldr	r3, [r4, #20]
 8108c28:	b2f6      	uxtb	r6, r6
 8108c2a:	4283      	cmp	r3, r0
 8108c2c:	4637      	mov	r7, r6
 8108c2e:	dc05      	bgt.n	8108c3c <__swbuf_r+0x4e>
 8108c30:	4621      	mov	r1, r4
 8108c32:	4628      	mov	r0, r5
 8108c34:	f000 fa76 	bl	8109124 <_fflush_r>
 8108c38:	2800      	cmp	r0, #0
 8108c3a:	d1ed      	bne.n	8108c18 <__swbuf_r+0x2a>
 8108c3c:	68a3      	ldr	r3, [r4, #8]
 8108c3e:	3b01      	subs	r3, #1
 8108c40:	60a3      	str	r3, [r4, #8]
 8108c42:	6823      	ldr	r3, [r4, #0]
 8108c44:	1c5a      	adds	r2, r3, #1
 8108c46:	6022      	str	r2, [r4, #0]
 8108c48:	701e      	strb	r6, [r3, #0]
 8108c4a:	6962      	ldr	r2, [r4, #20]
 8108c4c:	1c43      	adds	r3, r0, #1
 8108c4e:	429a      	cmp	r2, r3
 8108c50:	d004      	beq.n	8108c5c <__swbuf_r+0x6e>
 8108c52:	89a3      	ldrh	r3, [r4, #12]
 8108c54:	07db      	lsls	r3, r3, #31
 8108c56:	d5e1      	bpl.n	8108c1c <__swbuf_r+0x2e>
 8108c58:	2e0a      	cmp	r6, #10
 8108c5a:	d1df      	bne.n	8108c1c <__swbuf_r+0x2e>
 8108c5c:	4621      	mov	r1, r4
 8108c5e:	4628      	mov	r0, r5
 8108c60:	f000 fa60 	bl	8109124 <_fflush_r>
 8108c64:	2800      	cmp	r0, #0
 8108c66:	d0d9      	beq.n	8108c1c <__swbuf_r+0x2e>
 8108c68:	e7d6      	b.n	8108c18 <__swbuf_r+0x2a>
	...

08108c6c <__swsetup_r>:
 8108c6c:	b538      	push	{r3, r4, r5, lr}
 8108c6e:	4b29      	ldr	r3, [pc, #164]	@ (8108d14 <__swsetup_r+0xa8>)
 8108c70:	4605      	mov	r5, r0
 8108c72:	6818      	ldr	r0, [r3, #0]
 8108c74:	460c      	mov	r4, r1
 8108c76:	b118      	cbz	r0, 8108c80 <__swsetup_r+0x14>
 8108c78:	6a03      	ldr	r3, [r0, #32]
 8108c7a:	b90b      	cbnz	r3, 8108c80 <__swsetup_r+0x14>
 8108c7c:	f7ff fee0 	bl	8108a40 <__sinit>
 8108c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108c84:	0719      	lsls	r1, r3, #28
 8108c86:	d422      	bmi.n	8108cce <__swsetup_r+0x62>
 8108c88:	06da      	lsls	r2, r3, #27
 8108c8a:	d407      	bmi.n	8108c9c <__swsetup_r+0x30>
 8108c8c:	2209      	movs	r2, #9
 8108c8e:	602a      	str	r2, [r5, #0]
 8108c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108c94:	81a3      	strh	r3, [r4, #12]
 8108c96:	f04f 30ff 	mov.w	r0, #4294967295
 8108c9a:	e033      	b.n	8108d04 <__swsetup_r+0x98>
 8108c9c:	0758      	lsls	r0, r3, #29
 8108c9e:	d512      	bpl.n	8108cc6 <__swsetup_r+0x5a>
 8108ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8108ca2:	b141      	cbz	r1, 8108cb6 <__swsetup_r+0x4a>
 8108ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8108ca8:	4299      	cmp	r1, r3
 8108caa:	d002      	beq.n	8108cb2 <__swsetup_r+0x46>
 8108cac:	4628      	mov	r0, r5
 8108cae:	f000 f8bd 	bl	8108e2c <_free_r>
 8108cb2:	2300      	movs	r3, #0
 8108cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8108cb6:	89a3      	ldrh	r3, [r4, #12]
 8108cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8108cbc:	81a3      	strh	r3, [r4, #12]
 8108cbe:	2300      	movs	r3, #0
 8108cc0:	6063      	str	r3, [r4, #4]
 8108cc2:	6923      	ldr	r3, [r4, #16]
 8108cc4:	6023      	str	r3, [r4, #0]
 8108cc6:	89a3      	ldrh	r3, [r4, #12]
 8108cc8:	f043 0308 	orr.w	r3, r3, #8
 8108ccc:	81a3      	strh	r3, [r4, #12]
 8108cce:	6923      	ldr	r3, [r4, #16]
 8108cd0:	b94b      	cbnz	r3, 8108ce6 <__swsetup_r+0x7a>
 8108cd2:	89a3      	ldrh	r3, [r4, #12]
 8108cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8108cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108cdc:	d003      	beq.n	8108ce6 <__swsetup_r+0x7a>
 8108cde:	4621      	mov	r1, r4
 8108ce0:	4628      	mov	r0, r5
 8108ce2:	f000 fa6d 	bl	81091c0 <__smakebuf_r>
 8108ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108cea:	f013 0201 	ands.w	r2, r3, #1
 8108cee:	d00a      	beq.n	8108d06 <__swsetup_r+0x9a>
 8108cf0:	2200      	movs	r2, #0
 8108cf2:	60a2      	str	r2, [r4, #8]
 8108cf4:	6962      	ldr	r2, [r4, #20]
 8108cf6:	4252      	negs	r2, r2
 8108cf8:	61a2      	str	r2, [r4, #24]
 8108cfa:	6922      	ldr	r2, [r4, #16]
 8108cfc:	b942      	cbnz	r2, 8108d10 <__swsetup_r+0xa4>
 8108cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8108d02:	d1c5      	bne.n	8108c90 <__swsetup_r+0x24>
 8108d04:	bd38      	pop	{r3, r4, r5, pc}
 8108d06:	0799      	lsls	r1, r3, #30
 8108d08:	bf58      	it	pl
 8108d0a:	6962      	ldrpl	r2, [r4, #20]
 8108d0c:	60a2      	str	r2, [r4, #8]
 8108d0e:	e7f4      	b.n	8108cfa <__swsetup_r+0x8e>
 8108d10:	2000      	movs	r0, #0
 8108d12:	e7f7      	b.n	8108d04 <__swsetup_r+0x98>
 8108d14:	1000001c 	.word	0x1000001c

08108d18 <memset>:
 8108d18:	4402      	add	r2, r0
 8108d1a:	4603      	mov	r3, r0
 8108d1c:	4293      	cmp	r3, r2
 8108d1e:	d100      	bne.n	8108d22 <memset+0xa>
 8108d20:	4770      	bx	lr
 8108d22:	f803 1b01 	strb.w	r1, [r3], #1
 8108d26:	e7f9      	b.n	8108d1c <memset+0x4>

08108d28 <_close_r>:
 8108d28:	b538      	push	{r3, r4, r5, lr}
 8108d2a:	4d06      	ldr	r5, [pc, #24]	@ (8108d44 <_close_r+0x1c>)
 8108d2c:	2300      	movs	r3, #0
 8108d2e:	4604      	mov	r4, r0
 8108d30:	4608      	mov	r0, r1
 8108d32:	602b      	str	r3, [r5, #0]
 8108d34:	f7f9 fa45 	bl	81021c2 <_close>
 8108d38:	1c43      	adds	r3, r0, #1
 8108d3a:	d102      	bne.n	8108d42 <_close_r+0x1a>
 8108d3c:	682b      	ldr	r3, [r5, #0]
 8108d3e:	b103      	cbz	r3, 8108d42 <_close_r+0x1a>
 8108d40:	6023      	str	r3, [r4, #0]
 8108d42:	bd38      	pop	{r3, r4, r5, pc}
 8108d44:	10000f40 	.word	0x10000f40

08108d48 <_lseek_r>:
 8108d48:	b538      	push	{r3, r4, r5, lr}
 8108d4a:	4d07      	ldr	r5, [pc, #28]	@ (8108d68 <_lseek_r+0x20>)
 8108d4c:	4604      	mov	r4, r0
 8108d4e:	4608      	mov	r0, r1
 8108d50:	4611      	mov	r1, r2
 8108d52:	2200      	movs	r2, #0
 8108d54:	602a      	str	r2, [r5, #0]
 8108d56:	461a      	mov	r2, r3
 8108d58:	f7f9 fa5a 	bl	8102210 <_lseek>
 8108d5c:	1c43      	adds	r3, r0, #1
 8108d5e:	d102      	bne.n	8108d66 <_lseek_r+0x1e>
 8108d60:	682b      	ldr	r3, [r5, #0]
 8108d62:	b103      	cbz	r3, 8108d66 <_lseek_r+0x1e>
 8108d64:	6023      	str	r3, [r4, #0]
 8108d66:	bd38      	pop	{r3, r4, r5, pc}
 8108d68:	10000f40 	.word	0x10000f40

08108d6c <_read_r>:
 8108d6c:	b538      	push	{r3, r4, r5, lr}
 8108d6e:	4d07      	ldr	r5, [pc, #28]	@ (8108d8c <_read_r+0x20>)
 8108d70:	4604      	mov	r4, r0
 8108d72:	4608      	mov	r0, r1
 8108d74:	4611      	mov	r1, r2
 8108d76:	2200      	movs	r2, #0
 8108d78:	602a      	str	r2, [r5, #0]
 8108d7a:	461a      	mov	r2, r3
 8108d7c:	f7f9 f9e8 	bl	8102150 <_read>
 8108d80:	1c43      	adds	r3, r0, #1
 8108d82:	d102      	bne.n	8108d8a <_read_r+0x1e>
 8108d84:	682b      	ldr	r3, [r5, #0]
 8108d86:	b103      	cbz	r3, 8108d8a <_read_r+0x1e>
 8108d88:	6023      	str	r3, [r4, #0]
 8108d8a:	bd38      	pop	{r3, r4, r5, pc}
 8108d8c:	10000f40 	.word	0x10000f40

08108d90 <_write_r>:
 8108d90:	b538      	push	{r3, r4, r5, lr}
 8108d92:	4d07      	ldr	r5, [pc, #28]	@ (8108db0 <_write_r+0x20>)
 8108d94:	4604      	mov	r4, r0
 8108d96:	4608      	mov	r0, r1
 8108d98:	4611      	mov	r1, r2
 8108d9a:	2200      	movs	r2, #0
 8108d9c:	602a      	str	r2, [r5, #0]
 8108d9e:	461a      	mov	r2, r3
 8108da0:	f7f9 f9f3 	bl	810218a <_write>
 8108da4:	1c43      	adds	r3, r0, #1
 8108da6:	d102      	bne.n	8108dae <_write_r+0x1e>
 8108da8:	682b      	ldr	r3, [r5, #0]
 8108daa:	b103      	cbz	r3, 8108dae <_write_r+0x1e>
 8108dac:	6023      	str	r3, [r4, #0]
 8108dae:	bd38      	pop	{r3, r4, r5, pc}
 8108db0:	10000f40 	.word	0x10000f40

08108db4 <__errno>:
 8108db4:	4b01      	ldr	r3, [pc, #4]	@ (8108dbc <__errno+0x8>)
 8108db6:	6818      	ldr	r0, [r3, #0]
 8108db8:	4770      	bx	lr
 8108dba:	bf00      	nop
 8108dbc:	1000001c 	.word	0x1000001c

08108dc0 <__libc_init_array>:
 8108dc0:	b570      	push	{r4, r5, r6, lr}
 8108dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8108df8 <__libc_init_array+0x38>)
 8108dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8108dfc <__libc_init_array+0x3c>)
 8108dc6:	1b64      	subs	r4, r4, r5
 8108dc8:	10a4      	asrs	r4, r4, #2
 8108dca:	2600      	movs	r6, #0
 8108dcc:	42a6      	cmp	r6, r4
 8108dce:	d109      	bne.n	8108de4 <__libc_init_array+0x24>
 8108dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8108e00 <__libc_init_array+0x40>)
 8108dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8108e04 <__libc_init_array+0x44>)
 8108dd4:	f000 fa62 	bl	810929c <_init>
 8108dd8:	1b64      	subs	r4, r4, r5
 8108dda:	10a4      	asrs	r4, r4, #2
 8108ddc:	2600      	movs	r6, #0
 8108dde:	42a6      	cmp	r6, r4
 8108de0:	d105      	bne.n	8108dee <__libc_init_array+0x2e>
 8108de2:	bd70      	pop	{r4, r5, r6, pc}
 8108de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8108de8:	4798      	blx	r3
 8108dea:	3601      	adds	r6, #1
 8108dec:	e7ee      	b.n	8108dcc <__libc_init_array+0xc>
 8108dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8108df2:	4798      	blx	r3
 8108df4:	3601      	adds	r6, #1
 8108df6:	e7f2      	b.n	8108dde <__libc_init_array+0x1e>
 8108df8:	081092e4 	.word	0x081092e4
 8108dfc:	081092e4 	.word	0x081092e4
 8108e00:	081092e4 	.word	0x081092e4
 8108e04:	081092e8 	.word	0x081092e8

08108e08 <__retarget_lock_init_recursive>:
 8108e08:	4770      	bx	lr

08108e0a <__retarget_lock_acquire_recursive>:
 8108e0a:	4770      	bx	lr

08108e0c <__retarget_lock_release_recursive>:
 8108e0c:	4770      	bx	lr

08108e0e <memcpy>:
 8108e0e:	440a      	add	r2, r1
 8108e10:	4291      	cmp	r1, r2
 8108e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8108e16:	d100      	bne.n	8108e1a <memcpy+0xc>
 8108e18:	4770      	bx	lr
 8108e1a:	b510      	push	{r4, lr}
 8108e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108e24:	4291      	cmp	r1, r2
 8108e26:	d1f9      	bne.n	8108e1c <memcpy+0xe>
 8108e28:	bd10      	pop	{r4, pc}
	...

08108e2c <_free_r>:
 8108e2c:	b538      	push	{r3, r4, r5, lr}
 8108e2e:	4605      	mov	r5, r0
 8108e30:	2900      	cmp	r1, #0
 8108e32:	d041      	beq.n	8108eb8 <_free_r+0x8c>
 8108e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108e38:	1f0c      	subs	r4, r1, #4
 8108e3a:	2b00      	cmp	r3, #0
 8108e3c:	bfb8      	it	lt
 8108e3e:	18e4      	addlt	r4, r4, r3
 8108e40:	f000 f8e0 	bl	8109004 <__malloc_lock>
 8108e44:	4a1d      	ldr	r2, [pc, #116]	@ (8108ebc <_free_r+0x90>)
 8108e46:	6813      	ldr	r3, [r2, #0]
 8108e48:	b933      	cbnz	r3, 8108e58 <_free_r+0x2c>
 8108e4a:	6063      	str	r3, [r4, #4]
 8108e4c:	6014      	str	r4, [r2, #0]
 8108e4e:	4628      	mov	r0, r5
 8108e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108e54:	f000 b8dc 	b.w	8109010 <__malloc_unlock>
 8108e58:	42a3      	cmp	r3, r4
 8108e5a:	d908      	bls.n	8108e6e <_free_r+0x42>
 8108e5c:	6820      	ldr	r0, [r4, #0]
 8108e5e:	1821      	adds	r1, r4, r0
 8108e60:	428b      	cmp	r3, r1
 8108e62:	bf01      	itttt	eq
 8108e64:	6819      	ldreq	r1, [r3, #0]
 8108e66:	685b      	ldreq	r3, [r3, #4]
 8108e68:	1809      	addeq	r1, r1, r0
 8108e6a:	6021      	streq	r1, [r4, #0]
 8108e6c:	e7ed      	b.n	8108e4a <_free_r+0x1e>
 8108e6e:	461a      	mov	r2, r3
 8108e70:	685b      	ldr	r3, [r3, #4]
 8108e72:	b10b      	cbz	r3, 8108e78 <_free_r+0x4c>
 8108e74:	42a3      	cmp	r3, r4
 8108e76:	d9fa      	bls.n	8108e6e <_free_r+0x42>
 8108e78:	6811      	ldr	r1, [r2, #0]
 8108e7a:	1850      	adds	r0, r2, r1
 8108e7c:	42a0      	cmp	r0, r4
 8108e7e:	d10b      	bne.n	8108e98 <_free_r+0x6c>
 8108e80:	6820      	ldr	r0, [r4, #0]
 8108e82:	4401      	add	r1, r0
 8108e84:	1850      	adds	r0, r2, r1
 8108e86:	4283      	cmp	r3, r0
 8108e88:	6011      	str	r1, [r2, #0]
 8108e8a:	d1e0      	bne.n	8108e4e <_free_r+0x22>
 8108e8c:	6818      	ldr	r0, [r3, #0]
 8108e8e:	685b      	ldr	r3, [r3, #4]
 8108e90:	6053      	str	r3, [r2, #4]
 8108e92:	4408      	add	r0, r1
 8108e94:	6010      	str	r0, [r2, #0]
 8108e96:	e7da      	b.n	8108e4e <_free_r+0x22>
 8108e98:	d902      	bls.n	8108ea0 <_free_r+0x74>
 8108e9a:	230c      	movs	r3, #12
 8108e9c:	602b      	str	r3, [r5, #0]
 8108e9e:	e7d6      	b.n	8108e4e <_free_r+0x22>
 8108ea0:	6820      	ldr	r0, [r4, #0]
 8108ea2:	1821      	adds	r1, r4, r0
 8108ea4:	428b      	cmp	r3, r1
 8108ea6:	bf04      	itt	eq
 8108ea8:	6819      	ldreq	r1, [r3, #0]
 8108eaa:	685b      	ldreq	r3, [r3, #4]
 8108eac:	6063      	str	r3, [r4, #4]
 8108eae:	bf04      	itt	eq
 8108eb0:	1809      	addeq	r1, r1, r0
 8108eb2:	6021      	streq	r1, [r4, #0]
 8108eb4:	6054      	str	r4, [r2, #4]
 8108eb6:	e7ca      	b.n	8108e4e <_free_r+0x22>
 8108eb8:	bd38      	pop	{r3, r4, r5, pc}
 8108eba:	bf00      	nop
 8108ebc:	10000f4c 	.word	0x10000f4c

08108ec0 <sbrk_aligned>:
 8108ec0:	b570      	push	{r4, r5, r6, lr}
 8108ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8108f00 <sbrk_aligned+0x40>)
 8108ec4:	460c      	mov	r4, r1
 8108ec6:	6831      	ldr	r1, [r6, #0]
 8108ec8:	4605      	mov	r5, r0
 8108eca:	b911      	cbnz	r1, 8108ed2 <sbrk_aligned+0x12>
 8108ecc:	f000 f9d6 	bl	810927c <_sbrk_r>
 8108ed0:	6030      	str	r0, [r6, #0]
 8108ed2:	4621      	mov	r1, r4
 8108ed4:	4628      	mov	r0, r5
 8108ed6:	f000 f9d1 	bl	810927c <_sbrk_r>
 8108eda:	1c43      	adds	r3, r0, #1
 8108edc:	d103      	bne.n	8108ee6 <sbrk_aligned+0x26>
 8108ede:	f04f 34ff 	mov.w	r4, #4294967295
 8108ee2:	4620      	mov	r0, r4
 8108ee4:	bd70      	pop	{r4, r5, r6, pc}
 8108ee6:	1cc4      	adds	r4, r0, #3
 8108ee8:	f024 0403 	bic.w	r4, r4, #3
 8108eec:	42a0      	cmp	r0, r4
 8108eee:	d0f8      	beq.n	8108ee2 <sbrk_aligned+0x22>
 8108ef0:	1a21      	subs	r1, r4, r0
 8108ef2:	4628      	mov	r0, r5
 8108ef4:	f000 f9c2 	bl	810927c <_sbrk_r>
 8108ef8:	3001      	adds	r0, #1
 8108efa:	d1f2      	bne.n	8108ee2 <sbrk_aligned+0x22>
 8108efc:	e7ef      	b.n	8108ede <sbrk_aligned+0x1e>
 8108efe:	bf00      	nop
 8108f00:	10000f48 	.word	0x10000f48

08108f04 <_malloc_r>:
 8108f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108f08:	1ccd      	adds	r5, r1, #3
 8108f0a:	f025 0503 	bic.w	r5, r5, #3
 8108f0e:	3508      	adds	r5, #8
 8108f10:	2d0c      	cmp	r5, #12
 8108f12:	bf38      	it	cc
 8108f14:	250c      	movcc	r5, #12
 8108f16:	2d00      	cmp	r5, #0
 8108f18:	4606      	mov	r6, r0
 8108f1a:	db01      	blt.n	8108f20 <_malloc_r+0x1c>
 8108f1c:	42a9      	cmp	r1, r5
 8108f1e:	d904      	bls.n	8108f2a <_malloc_r+0x26>
 8108f20:	230c      	movs	r3, #12
 8108f22:	6033      	str	r3, [r6, #0]
 8108f24:	2000      	movs	r0, #0
 8108f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8109000 <_malloc_r+0xfc>
 8108f2e:	f000 f869 	bl	8109004 <__malloc_lock>
 8108f32:	f8d8 3000 	ldr.w	r3, [r8]
 8108f36:	461c      	mov	r4, r3
 8108f38:	bb44      	cbnz	r4, 8108f8c <_malloc_r+0x88>
 8108f3a:	4629      	mov	r1, r5
 8108f3c:	4630      	mov	r0, r6
 8108f3e:	f7ff ffbf 	bl	8108ec0 <sbrk_aligned>
 8108f42:	1c43      	adds	r3, r0, #1
 8108f44:	4604      	mov	r4, r0
 8108f46:	d158      	bne.n	8108ffa <_malloc_r+0xf6>
 8108f48:	f8d8 4000 	ldr.w	r4, [r8]
 8108f4c:	4627      	mov	r7, r4
 8108f4e:	2f00      	cmp	r7, #0
 8108f50:	d143      	bne.n	8108fda <_malloc_r+0xd6>
 8108f52:	2c00      	cmp	r4, #0
 8108f54:	d04b      	beq.n	8108fee <_malloc_r+0xea>
 8108f56:	6823      	ldr	r3, [r4, #0]
 8108f58:	4639      	mov	r1, r7
 8108f5a:	4630      	mov	r0, r6
 8108f5c:	eb04 0903 	add.w	r9, r4, r3
 8108f60:	f000 f98c 	bl	810927c <_sbrk_r>
 8108f64:	4581      	cmp	r9, r0
 8108f66:	d142      	bne.n	8108fee <_malloc_r+0xea>
 8108f68:	6821      	ldr	r1, [r4, #0]
 8108f6a:	1a6d      	subs	r5, r5, r1
 8108f6c:	4629      	mov	r1, r5
 8108f6e:	4630      	mov	r0, r6
 8108f70:	f7ff ffa6 	bl	8108ec0 <sbrk_aligned>
 8108f74:	3001      	adds	r0, #1
 8108f76:	d03a      	beq.n	8108fee <_malloc_r+0xea>
 8108f78:	6823      	ldr	r3, [r4, #0]
 8108f7a:	442b      	add	r3, r5
 8108f7c:	6023      	str	r3, [r4, #0]
 8108f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8108f82:	685a      	ldr	r2, [r3, #4]
 8108f84:	bb62      	cbnz	r2, 8108fe0 <_malloc_r+0xdc>
 8108f86:	f8c8 7000 	str.w	r7, [r8]
 8108f8a:	e00f      	b.n	8108fac <_malloc_r+0xa8>
 8108f8c:	6822      	ldr	r2, [r4, #0]
 8108f8e:	1b52      	subs	r2, r2, r5
 8108f90:	d420      	bmi.n	8108fd4 <_malloc_r+0xd0>
 8108f92:	2a0b      	cmp	r2, #11
 8108f94:	d917      	bls.n	8108fc6 <_malloc_r+0xc2>
 8108f96:	1961      	adds	r1, r4, r5
 8108f98:	42a3      	cmp	r3, r4
 8108f9a:	6025      	str	r5, [r4, #0]
 8108f9c:	bf18      	it	ne
 8108f9e:	6059      	strne	r1, [r3, #4]
 8108fa0:	6863      	ldr	r3, [r4, #4]
 8108fa2:	bf08      	it	eq
 8108fa4:	f8c8 1000 	streq.w	r1, [r8]
 8108fa8:	5162      	str	r2, [r4, r5]
 8108faa:	604b      	str	r3, [r1, #4]
 8108fac:	4630      	mov	r0, r6
 8108fae:	f000 f82f 	bl	8109010 <__malloc_unlock>
 8108fb2:	f104 000b 	add.w	r0, r4, #11
 8108fb6:	1d23      	adds	r3, r4, #4
 8108fb8:	f020 0007 	bic.w	r0, r0, #7
 8108fbc:	1ac2      	subs	r2, r0, r3
 8108fbe:	bf1c      	itt	ne
 8108fc0:	1a1b      	subne	r3, r3, r0
 8108fc2:	50a3      	strne	r3, [r4, r2]
 8108fc4:	e7af      	b.n	8108f26 <_malloc_r+0x22>
 8108fc6:	6862      	ldr	r2, [r4, #4]
 8108fc8:	42a3      	cmp	r3, r4
 8108fca:	bf0c      	ite	eq
 8108fcc:	f8c8 2000 	streq.w	r2, [r8]
 8108fd0:	605a      	strne	r2, [r3, #4]
 8108fd2:	e7eb      	b.n	8108fac <_malloc_r+0xa8>
 8108fd4:	4623      	mov	r3, r4
 8108fd6:	6864      	ldr	r4, [r4, #4]
 8108fd8:	e7ae      	b.n	8108f38 <_malloc_r+0x34>
 8108fda:	463c      	mov	r4, r7
 8108fdc:	687f      	ldr	r7, [r7, #4]
 8108fde:	e7b6      	b.n	8108f4e <_malloc_r+0x4a>
 8108fe0:	461a      	mov	r2, r3
 8108fe2:	685b      	ldr	r3, [r3, #4]
 8108fe4:	42a3      	cmp	r3, r4
 8108fe6:	d1fb      	bne.n	8108fe0 <_malloc_r+0xdc>
 8108fe8:	2300      	movs	r3, #0
 8108fea:	6053      	str	r3, [r2, #4]
 8108fec:	e7de      	b.n	8108fac <_malloc_r+0xa8>
 8108fee:	230c      	movs	r3, #12
 8108ff0:	6033      	str	r3, [r6, #0]
 8108ff2:	4630      	mov	r0, r6
 8108ff4:	f000 f80c 	bl	8109010 <__malloc_unlock>
 8108ff8:	e794      	b.n	8108f24 <_malloc_r+0x20>
 8108ffa:	6005      	str	r5, [r0, #0]
 8108ffc:	e7d6      	b.n	8108fac <_malloc_r+0xa8>
 8108ffe:	bf00      	nop
 8109000:	10000f4c 	.word	0x10000f4c

08109004 <__malloc_lock>:
 8109004:	4801      	ldr	r0, [pc, #4]	@ (810900c <__malloc_lock+0x8>)
 8109006:	f7ff bf00 	b.w	8108e0a <__retarget_lock_acquire_recursive>
 810900a:	bf00      	nop
 810900c:	10000f44 	.word	0x10000f44

08109010 <__malloc_unlock>:
 8109010:	4801      	ldr	r0, [pc, #4]	@ (8109018 <__malloc_unlock+0x8>)
 8109012:	f7ff befb 	b.w	8108e0c <__retarget_lock_release_recursive>
 8109016:	bf00      	nop
 8109018:	10000f44 	.word	0x10000f44

0810901c <__sflush_r>:
 810901c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8109020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109024:	0716      	lsls	r6, r2, #28
 8109026:	4605      	mov	r5, r0
 8109028:	460c      	mov	r4, r1
 810902a:	d454      	bmi.n	81090d6 <__sflush_r+0xba>
 810902c:	684b      	ldr	r3, [r1, #4]
 810902e:	2b00      	cmp	r3, #0
 8109030:	dc02      	bgt.n	8109038 <__sflush_r+0x1c>
 8109032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8109034:	2b00      	cmp	r3, #0
 8109036:	dd48      	ble.n	81090ca <__sflush_r+0xae>
 8109038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810903a:	2e00      	cmp	r6, #0
 810903c:	d045      	beq.n	81090ca <__sflush_r+0xae>
 810903e:	2300      	movs	r3, #0
 8109040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8109044:	682f      	ldr	r7, [r5, #0]
 8109046:	6a21      	ldr	r1, [r4, #32]
 8109048:	602b      	str	r3, [r5, #0]
 810904a:	d030      	beq.n	81090ae <__sflush_r+0x92>
 810904c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810904e:	89a3      	ldrh	r3, [r4, #12]
 8109050:	0759      	lsls	r1, r3, #29
 8109052:	d505      	bpl.n	8109060 <__sflush_r+0x44>
 8109054:	6863      	ldr	r3, [r4, #4]
 8109056:	1ad2      	subs	r2, r2, r3
 8109058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810905a:	b10b      	cbz	r3, 8109060 <__sflush_r+0x44>
 810905c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810905e:	1ad2      	subs	r2, r2, r3
 8109060:	2300      	movs	r3, #0
 8109062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8109064:	6a21      	ldr	r1, [r4, #32]
 8109066:	4628      	mov	r0, r5
 8109068:	47b0      	blx	r6
 810906a:	1c43      	adds	r3, r0, #1
 810906c:	89a3      	ldrh	r3, [r4, #12]
 810906e:	d106      	bne.n	810907e <__sflush_r+0x62>
 8109070:	6829      	ldr	r1, [r5, #0]
 8109072:	291d      	cmp	r1, #29
 8109074:	d82b      	bhi.n	81090ce <__sflush_r+0xb2>
 8109076:	4a2a      	ldr	r2, [pc, #168]	@ (8109120 <__sflush_r+0x104>)
 8109078:	40ca      	lsrs	r2, r1
 810907a:	07d6      	lsls	r6, r2, #31
 810907c:	d527      	bpl.n	81090ce <__sflush_r+0xb2>
 810907e:	2200      	movs	r2, #0
 8109080:	6062      	str	r2, [r4, #4]
 8109082:	04d9      	lsls	r1, r3, #19
 8109084:	6922      	ldr	r2, [r4, #16]
 8109086:	6022      	str	r2, [r4, #0]
 8109088:	d504      	bpl.n	8109094 <__sflush_r+0x78>
 810908a:	1c42      	adds	r2, r0, #1
 810908c:	d101      	bne.n	8109092 <__sflush_r+0x76>
 810908e:	682b      	ldr	r3, [r5, #0]
 8109090:	b903      	cbnz	r3, 8109094 <__sflush_r+0x78>
 8109092:	6560      	str	r0, [r4, #84]	@ 0x54
 8109094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8109096:	602f      	str	r7, [r5, #0]
 8109098:	b1b9      	cbz	r1, 81090ca <__sflush_r+0xae>
 810909a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810909e:	4299      	cmp	r1, r3
 81090a0:	d002      	beq.n	81090a8 <__sflush_r+0x8c>
 81090a2:	4628      	mov	r0, r5
 81090a4:	f7ff fec2 	bl	8108e2c <_free_r>
 81090a8:	2300      	movs	r3, #0
 81090aa:	6363      	str	r3, [r4, #52]	@ 0x34
 81090ac:	e00d      	b.n	81090ca <__sflush_r+0xae>
 81090ae:	2301      	movs	r3, #1
 81090b0:	4628      	mov	r0, r5
 81090b2:	47b0      	blx	r6
 81090b4:	4602      	mov	r2, r0
 81090b6:	1c50      	adds	r0, r2, #1
 81090b8:	d1c9      	bne.n	810904e <__sflush_r+0x32>
 81090ba:	682b      	ldr	r3, [r5, #0]
 81090bc:	2b00      	cmp	r3, #0
 81090be:	d0c6      	beq.n	810904e <__sflush_r+0x32>
 81090c0:	2b1d      	cmp	r3, #29
 81090c2:	d001      	beq.n	81090c8 <__sflush_r+0xac>
 81090c4:	2b16      	cmp	r3, #22
 81090c6:	d11e      	bne.n	8109106 <__sflush_r+0xea>
 81090c8:	602f      	str	r7, [r5, #0]
 81090ca:	2000      	movs	r0, #0
 81090cc:	e022      	b.n	8109114 <__sflush_r+0xf8>
 81090ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81090d2:	b21b      	sxth	r3, r3
 81090d4:	e01b      	b.n	810910e <__sflush_r+0xf2>
 81090d6:	690f      	ldr	r7, [r1, #16]
 81090d8:	2f00      	cmp	r7, #0
 81090da:	d0f6      	beq.n	81090ca <__sflush_r+0xae>
 81090dc:	0793      	lsls	r3, r2, #30
 81090de:	680e      	ldr	r6, [r1, #0]
 81090e0:	bf08      	it	eq
 81090e2:	694b      	ldreq	r3, [r1, #20]
 81090e4:	600f      	str	r7, [r1, #0]
 81090e6:	bf18      	it	ne
 81090e8:	2300      	movne	r3, #0
 81090ea:	eba6 0807 	sub.w	r8, r6, r7
 81090ee:	608b      	str	r3, [r1, #8]
 81090f0:	f1b8 0f00 	cmp.w	r8, #0
 81090f4:	dde9      	ble.n	81090ca <__sflush_r+0xae>
 81090f6:	6a21      	ldr	r1, [r4, #32]
 81090f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 81090fa:	4643      	mov	r3, r8
 81090fc:	463a      	mov	r2, r7
 81090fe:	4628      	mov	r0, r5
 8109100:	47b0      	blx	r6
 8109102:	2800      	cmp	r0, #0
 8109104:	dc08      	bgt.n	8109118 <__sflush_r+0xfc>
 8109106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810910e:	81a3      	strh	r3, [r4, #12]
 8109110:	f04f 30ff 	mov.w	r0, #4294967295
 8109114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109118:	4407      	add	r7, r0
 810911a:	eba8 0800 	sub.w	r8, r8, r0
 810911e:	e7e7      	b.n	81090f0 <__sflush_r+0xd4>
 8109120:	20400001 	.word	0x20400001

08109124 <_fflush_r>:
 8109124:	b538      	push	{r3, r4, r5, lr}
 8109126:	690b      	ldr	r3, [r1, #16]
 8109128:	4605      	mov	r5, r0
 810912a:	460c      	mov	r4, r1
 810912c:	b913      	cbnz	r3, 8109134 <_fflush_r+0x10>
 810912e:	2500      	movs	r5, #0
 8109130:	4628      	mov	r0, r5
 8109132:	bd38      	pop	{r3, r4, r5, pc}
 8109134:	b118      	cbz	r0, 810913e <_fflush_r+0x1a>
 8109136:	6a03      	ldr	r3, [r0, #32]
 8109138:	b90b      	cbnz	r3, 810913e <_fflush_r+0x1a>
 810913a:	f7ff fc81 	bl	8108a40 <__sinit>
 810913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109142:	2b00      	cmp	r3, #0
 8109144:	d0f3      	beq.n	810912e <_fflush_r+0xa>
 8109146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8109148:	07d0      	lsls	r0, r2, #31
 810914a:	d404      	bmi.n	8109156 <_fflush_r+0x32>
 810914c:	0599      	lsls	r1, r3, #22
 810914e:	d402      	bmi.n	8109156 <_fflush_r+0x32>
 8109150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8109152:	f7ff fe5a 	bl	8108e0a <__retarget_lock_acquire_recursive>
 8109156:	4628      	mov	r0, r5
 8109158:	4621      	mov	r1, r4
 810915a:	f7ff ff5f 	bl	810901c <__sflush_r>
 810915e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8109160:	07da      	lsls	r2, r3, #31
 8109162:	4605      	mov	r5, r0
 8109164:	d4e4      	bmi.n	8109130 <_fflush_r+0xc>
 8109166:	89a3      	ldrh	r3, [r4, #12]
 8109168:	059b      	lsls	r3, r3, #22
 810916a:	d4e1      	bmi.n	8109130 <_fflush_r+0xc>
 810916c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810916e:	f7ff fe4d 	bl	8108e0c <__retarget_lock_release_recursive>
 8109172:	e7dd      	b.n	8109130 <_fflush_r+0xc>

08109174 <__swhatbuf_r>:
 8109174:	b570      	push	{r4, r5, r6, lr}
 8109176:	460c      	mov	r4, r1
 8109178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810917c:	2900      	cmp	r1, #0
 810917e:	b096      	sub	sp, #88	@ 0x58
 8109180:	4615      	mov	r5, r2
 8109182:	461e      	mov	r6, r3
 8109184:	da0d      	bge.n	81091a2 <__swhatbuf_r+0x2e>
 8109186:	89a3      	ldrh	r3, [r4, #12]
 8109188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810918c:	f04f 0100 	mov.w	r1, #0
 8109190:	bf14      	ite	ne
 8109192:	2340      	movne	r3, #64	@ 0x40
 8109194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8109198:	2000      	movs	r0, #0
 810919a:	6031      	str	r1, [r6, #0]
 810919c:	602b      	str	r3, [r5, #0]
 810919e:	b016      	add	sp, #88	@ 0x58
 81091a0:	bd70      	pop	{r4, r5, r6, pc}
 81091a2:	466a      	mov	r2, sp
 81091a4:	f000 f848 	bl	8109238 <_fstat_r>
 81091a8:	2800      	cmp	r0, #0
 81091aa:	dbec      	blt.n	8109186 <__swhatbuf_r+0x12>
 81091ac:	9901      	ldr	r1, [sp, #4]
 81091ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 81091b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 81091b6:	4259      	negs	r1, r3
 81091b8:	4159      	adcs	r1, r3
 81091ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81091be:	e7eb      	b.n	8109198 <__swhatbuf_r+0x24>

081091c0 <__smakebuf_r>:
 81091c0:	898b      	ldrh	r3, [r1, #12]
 81091c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81091c4:	079d      	lsls	r5, r3, #30
 81091c6:	4606      	mov	r6, r0
 81091c8:	460c      	mov	r4, r1
 81091ca:	d507      	bpl.n	81091dc <__smakebuf_r+0x1c>
 81091cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 81091d0:	6023      	str	r3, [r4, #0]
 81091d2:	6123      	str	r3, [r4, #16]
 81091d4:	2301      	movs	r3, #1
 81091d6:	6163      	str	r3, [r4, #20]
 81091d8:	b003      	add	sp, #12
 81091da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81091dc:	ab01      	add	r3, sp, #4
 81091de:	466a      	mov	r2, sp
 81091e0:	f7ff ffc8 	bl	8109174 <__swhatbuf_r>
 81091e4:	9f00      	ldr	r7, [sp, #0]
 81091e6:	4605      	mov	r5, r0
 81091e8:	4639      	mov	r1, r7
 81091ea:	4630      	mov	r0, r6
 81091ec:	f7ff fe8a 	bl	8108f04 <_malloc_r>
 81091f0:	b948      	cbnz	r0, 8109206 <__smakebuf_r+0x46>
 81091f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81091f6:	059a      	lsls	r2, r3, #22
 81091f8:	d4ee      	bmi.n	81091d8 <__smakebuf_r+0x18>
 81091fa:	f023 0303 	bic.w	r3, r3, #3
 81091fe:	f043 0302 	orr.w	r3, r3, #2
 8109202:	81a3      	strh	r3, [r4, #12]
 8109204:	e7e2      	b.n	81091cc <__smakebuf_r+0xc>
 8109206:	89a3      	ldrh	r3, [r4, #12]
 8109208:	6020      	str	r0, [r4, #0]
 810920a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810920e:	81a3      	strh	r3, [r4, #12]
 8109210:	9b01      	ldr	r3, [sp, #4]
 8109212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8109216:	b15b      	cbz	r3, 8109230 <__smakebuf_r+0x70>
 8109218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810921c:	4630      	mov	r0, r6
 810921e:	f000 f81d 	bl	810925c <_isatty_r>
 8109222:	b128      	cbz	r0, 8109230 <__smakebuf_r+0x70>
 8109224:	89a3      	ldrh	r3, [r4, #12]
 8109226:	f023 0303 	bic.w	r3, r3, #3
 810922a:	f043 0301 	orr.w	r3, r3, #1
 810922e:	81a3      	strh	r3, [r4, #12]
 8109230:	89a3      	ldrh	r3, [r4, #12]
 8109232:	431d      	orrs	r5, r3
 8109234:	81a5      	strh	r5, [r4, #12]
 8109236:	e7cf      	b.n	81091d8 <__smakebuf_r+0x18>

08109238 <_fstat_r>:
 8109238:	b538      	push	{r3, r4, r5, lr}
 810923a:	4d07      	ldr	r5, [pc, #28]	@ (8109258 <_fstat_r+0x20>)
 810923c:	2300      	movs	r3, #0
 810923e:	4604      	mov	r4, r0
 8109240:	4608      	mov	r0, r1
 8109242:	4611      	mov	r1, r2
 8109244:	602b      	str	r3, [r5, #0]
 8109246:	f7f8 ffc8 	bl	81021da <_fstat>
 810924a:	1c43      	adds	r3, r0, #1
 810924c:	d102      	bne.n	8109254 <_fstat_r+0x1c>
 810924e:	682b      	ldr	r3, [r5, #0]
 8109250:	b103      	cbz	r3, 8109254 <_fstat_r+0x1c>
 8109252:	6023      	str	r3, [r4, #0]
 8109254:	bd38      	pop	{r3, r4, r5, pc}
 8109256:	bf00      	nop
 8109258:	10000f40 	.word	0x10000f40

0810925c <_isatty_r>:
 810925c:	b538      	push	{r3, r4, r5, lr}
 810925e:	4d06      	ldr	r5, [pc, #24]	@ (8109278 <_isatty_r+0x1c>)
 8109260:	2300      	movs	r3, #0
 8109262:	4604      	mov	r4, r0
 8109264:	4608      	mov	r0, r1
 8109266:	602b      	str	r3, [r5, #0]
 8109268:	f7f8 ffc7 	bl	81021fa <_isatty>
 810926c:	1c43      	adds	r3, r0, #1
 810926e:	d102      	bne.n	8109276 <_isatty_r+0x1a>
 8109270:	682b      	ldr	r3, [r5, #0]
 8109272:	b103      	cbz	r3, 8109276 <_isatty_r+0x1a>
 8109274:	6023      	str	r3, [r4, #0]
 8109276:	bd38      	pop	{r3, r4, r5, pc}
 8109278:	10000f40 	.word	0x10000f40

0810927c <_sbrk_r>:
 810927c:	b538      	push	{r3, r4, r5, lr}
 810927e:	4d06      	ldr	r5, [pc, #24]	@ (8109298 <_sbrk_r+0x1c>)
 8109280:	2300      	movs	r3, #0
 8109282:	4604      	mov	r4, r0
 8109284:	4608      	mov	r0, r1
 8109286:	602b      	str	r3, [r5, #0]
 8109288:	f7f8 ffd0 	bl	810222c <_sbrk>
 810928c:	1c43      	adds	r3, r0, #1
 810928e:	d102      	bne.n	8109296 <_sbrk_r+0x1a>
 8109290:	682b      	ldr	r3, [r5, #0]
 8109292:	b103      	cbz	r3, 8109296 <_sbrk_r+0x1a>
 8109294:	6023      	str	r3, [r4, #0]
 8109296:	bd38      	pop	{r3, r4, r5, pc}
 8109298:	10000f40 	.word	0x10000f40

0810929c <_init>:
 810929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810929e:	bf00      	nop
 81092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81092a2:	bc08      	pop	{r3}
 81092a4:	469e      	mov	lr, r3
 81092a6:	4770      	bx	lr

081092a8 <_fini>:
 81092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81092aa:	bf00      	nop
 81092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81092ae:	bc08      	pop	{r3}
 81092b0:	469e      	mov	lr, r3
 81092b2:	4770      	bx	lr
